; Input	MD5   :	6B7FE6F27F47FA15D223807C6B59CCD9
; Input	CRC32 :	8748B8D2

; Processor	  : PIC16Cxx
; Target assembler: Microchip's MPALC

;NOTE THE CPU IS ACTUALLY A 16F886 - MINOR DIFFERENCES IN REGISTERS (E.G. ADC)
include	"P16F877A.INC"


; ===========================================================================

; Segment type:	Pure code
		; .text	(CODE)
; assume bank =	0
; assume pclath	= 0
; [00000001 BYTES: COLLAPSED FUNCTION RESET. PRESS KEYPAD CTRL-"+" TO EXPAND]
; ---------------------------------------------------------------------------
		addlw	0FF
		addlw	0FF
		addlw	0FF

; =============== S U B	R O U T	I N E =======================================

; Interrupt Vector

		; public ISR
ISR:

; FUNCTION CHUNK AT 01BE SIZE 0000020A BYTES
; FUNCTION CHUNK AT 03CF SIZE 00000044 BYTES
; FUNCTION CHUNK AT 0432 SIZE 00000212 BYTES

		movwf	irq_store_w
		movfw	BANK0:STATUS
		movwf	irq_store_status
		clrf	BANK0:STATUS
		movfw	BANK0:PCLATH
		movwf	irq_store_pclath
		bcf	BANK0:PCLATH, 3
		bcf	BANK0:PCLATH, 4
		btfsc	BANK0:PIR1, SSPIF
		 b	 I2C_IRQ_Handler
		btfsc	BANK0:INTCON, TMR0IF
		 b	 Timer0_IRQ_Handler ; this is a	few khz	I believe
		bcf	BANK0:INTCON, GIE
		bcf	BANK0:STATUS, RP0
		bcf	BANK0:STATUS, RP1
		movfw	irq_store_pclath
		movwf	BANK0:PCLATH
		movfw	irq_store_status
		movwf	BANK0:STATUS
		swapf	irq_store_w, f
		swapf	irq_store_w, w
		retfie
; End of function ISR

; ---------------------------------------------------------------------------
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF

; =============== S U B	R O U T	I N E =======================================


lookup_ram_to_read_for_cmd:		; CODE XREF: ISR+1F4p ISR+24Cp
		addwf	BANK0:PCL, f
		retlw	79 ; 'y'        ; cmd0 read
; End of function lookup_ram_to_read_for_cmd

; ---------------------------------------------------------------------------
		retlw	0D6 ; 'Ö'
; ---------------------------------------------------------------------------
		retlw	0B0 ; '°'       ; returns some flags
; ---------------------------------------------------------------------------
		retlw	0B1 ; '±'
; ---------------------------------------------------------------------------
		retlw	0B2 ; '²'       ; more readable flags
; ---------------------------------------------------------------------------
		retlw	0B3 ; '³'
; ---------------------------------------------------------------------------
		retlw	0B4 ; '´'       ; status flags incl temperature flags
; ---------------------------------------------------------------------------
		retlw	0B5 ; 'µ'
; ---------------------------------------------------------------------------
		retlw	0B6 ; '¶'       ; input voltage
; ---------------------------------------------------------------------------
		retlw	0B7 ; '·'
; ---------------------------------------------------------------------------
		retlw	0B8 ; '¸'       ; amps in
; ---------------------------------------------------------------------------
		retlw	0B9 ; '¹'
; ---------------------------------------------------------------------------
		retlw	0D7 ; '×'       ; watts in
; ---------------------------------------------------------------------------
		retlw	0D8 ; 'Ø'
; ---------------------------------------------------------------------------
		retlw	0BA ; 'º'       ; output voltage
; ---------------------------------------------------------------------------
		retlw	0BB ; '»'
; ---------------------------------------------------------------------------
		retlw	0BC ; '¼'       ; (0x10=cmd8) possibly output current
; ---------------------------------------------------------------------------
		retlw	0BD ; '½'
; ---------------------------------------------------------------------------
		retlw	0D9 ; 'Ù'       ; output watts
; ---------------------------------------------------------------------------
		retlw	0DA ; 'Ú'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	0BE ; '¾'       ; think this is input air temperature
; ---------------------------------------------------------------------------
		retlw	0BF ; '¿'
; ---------------------------------------------------------------------------
		retlw	0C0 ; 'À'       ; this is some (higher) internal temperature
; ---------------------------------------------------------------------------
		retlw	0C1 ; 'Á'
; ---------------------------------------------------------------------------
		retlw	0C2 ; 'Â'       ; fan speed (rpm?)
; ---------------------------------------------------------------------------
		retlw	0C3 ; 'Ã'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'        ; 20
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	0DB ; 'Û'       ; total watts in (4 bytes)
; ---------------------------------------------------------------------------
		retlw	0DC ; 'Ü'
; ---------------------------------------------------------------------------
		retlw	0DD ; 'Ý'
; ---------------------------------------------------------------------------
		retlw	0DE ; 'Þ'
; ---------------------------------------------------------------------------
		retlw	0DF ; 'ß'       ; 30 : some simple up-counter (perhaps secs)
; ---------------------------------------------------------------------------
		retlw	0E0 ; 'à'
; ---------------------------------------------------------------------------
		retlw	0E1 ; 'á'       ; MaxWattsIn
; ---------------------------------------------------------------------------
		retlw	0E2 ; 'â'
; ---------------------------------------------------------------------------
		retlw	0C4 ; 'Ä'       ; Min recorded input current(?)
; ---------------------------------------------------------------------------
		retlw	0C5 ; 'Å'
; ---------------------------------------------------------------------------
		retlw	0C6 ; 'Æ'       ; Max recorded output current
; ---------------------------------------------------------------------------
		retlw	0C7 ; 'Ç'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	0C8 ; 'È'       ; bitflags ; bits 3,4,5,6 do something
; ---------------------------------------------------------------------------
		retlw	0C9 ; 'É'
; ---------------------------------------------------------------------------
		retlw	0CD ; 'Í'       ; written by cmd 3d
; ---------------------------------------------------------------------------
		retlw	0E4 ; 'ä'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	0E5 ; 'å'       ; 40 fan related lsb
; ---------------------------------------------------------------------------
		retlw	0D4 ; 'Ô'       ; fan related msb
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	0E6 ; 'æ'
; ---------------------------------------------------------------------------
		retlw	0E7 ; 'ç'
; ---------------------------------------------------------------------------
		retlw	0E8 ; 'è'
; ---------------------------------------------------------------------------
		retlw	0E9 ; 'é'
; ---------------------------------------------------------------------------
		retlw	0EA ; 'ê'       ; some value
; ---------------------------------------------------------------------------
		retlw	0EB ; 'ë'
; ---------------------------------------------------------------------------
		retlw	0EC ; 'ì'       ; related to above - peak value?
; ---------------------------------------------------------------------------
		retlw	0ED ; 'í'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	0EE ; 'î'       ; 50
; ---------------------------------------------------------------------------
		retlw	0EF ; 'ï'
; ---------------------------------------------------------------------------
		retlw	0A5 ; '¥'
; ---------------------------------------------------------------------------
		retlw	0A6 ; '¦'
; ---------------------------------------------------------------------------
		retlw	0A7 ; '§'
; ---------------------------------------------------------------------------
		retlw	0A8 ; '¨'
; ---------------------------------------------------------------------------
		retlw	0A9 ; '©'
; ---------------------------------------------------------------------------
		retlw	0AA ; 'ª'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; assume bank =	1

; =============== S U B	R O U T	I N E =======================================


sub_CODE_7B:				; CODE XREF: RESET_0+10Ap
		addwf	BANK1:PCL, f
		retlw	56 ; 'V'
; End of function sub_CODE_7B

; ---------------------------------------------------------------------------
		retlw	68 ; 'h'
; ---------------------------------------------------------------------------
		retlw	80 ; ''
; ---------------------------------------------------------------------------
		retlw	0A5 ; '¥'
; ---------------------------------------------------------------------------
		retlw	0A5 ; '¥'

; =============== S U B	R O U T	I N E =======================================


sub_CODE_81:				; CODE XREF: RESET_0+134p
		addwf	BANK1:PCL, f
		retlw	70 ; 'p'
; End of function sub_CODE_81

; ---------------------------------------------------------------------------
		retlw	70 ; 'p'
; ---------------------------------------------------------------------------
		retlw	7D ; '}'
; ---------------------------------------------------------------------------
		retlw	7D ; '}'
; ---------------------------------------------------------------------------
		retlw	0A7 ; '§'
; ---------------------------------------------------------------------------
		retlw	0A7 ; '§'

; =============== S U B	R O U T	I N E =======================================


sub_CODE_88:				; CODE XREF: RESET_0+11Dp
		addwf	BANK1:PCL, f
		retlw	85 ; ''
; End of function sub_CODE_88

; ---------------------------------------------------------------------------
		retlw	85 ; ''
; ---------------------------------------------------------------------------
		retlw	95 ; ''
; ---------------------------------------------------------------------------
		retlw	95 ; ''
; ---------------------------------------------------------------------------
		retlw	0CF ; 'Ï'
; ---------------------------------------------------------------------------
		retlw	0CF ; 'Ï'
; assume bank =	0

; =============== S U B	R O U T	I N E =======================================


lookup_ram_to_write_for_cmd:		; CODE XREF: ISR+299p ISR+2A8p
		addwf	BANK0:PCL, f
		retlw	79 ; 'y'        ; 0
; End of function lookup_ram_to_write_for_cmd

; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'        ; 0x10
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'        ; 0x20
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'        ; 0x30
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	0E5 ; 'å'       ; 0x40 - these two are fan related
; ---------------------------------------------------------------------------
		retlw	0D4 ; 'Ô'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	0EE ; 'î'       ; 0x50 - this defaults to 3200 and is settable
; ---------------------------------------------------------------------------
		retlw	0EF ; 'ï'
; ---------------------------------------------------------------------------
		retlw	0A5 ; '¥'       ; this defaults to 0x1260
; ---------------------------------------------------------------------------
		retlw	0A6 ; '¦'
; ---------------------------------------------------------------------------
		retlw	0A7 ; '§'       ; used by eeprom logging as some kind of tag (default 0)
; ---------------------------------------------------------------------------
		retlw	0A8 ; '¨'
; ---------------------------------------------------------------------------
		retlw	0A9 ; '©'       ; eeprom read address
; ---------------------------------------------------------------------------
		retlw	0AA ; 'ª'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
; assume pclath	= 1

; =============== S U B	R O U T	I N E =======================================


SomeADCLookup:				; CODE XREF: RESET_0+EBp RESET_0+FEp
		addwf	BANK0:PCL, f
		retlw	1
; End of function SomeADCLookup

; ---------------------------------------------------------------------------
		retlw	1
; ---------------------------------------------------------------------------
		retlw	2
; ---------------------------------------------------------------------------
		retlw	3
; ---------------------------------------------------------------------------
		retlw	4
; ---------------------------------------------------------------------------
		retlw	5
; ---------------------------------------------------------------------------
		retlw	6
; ---------------------------------------------------------------------------
		retlw	6
; ---------------------------------------------------------------------------
		retlw	7
; ---------------------------------------------------------------------------
		retlw	8
; ---------------------------------------------------------------------------
		retlw	9
; ---------------------------------------------------------------------------
		retlw	9
; ---------------------------------------------------------------------------
		retlw	0A
; ---------------------------------------------------------------------------
		retlw	0B
; ---------------------------------------------------------------------------
		retlw	0B
; ---------------------------------------------------------------------------
		retlw	0C
; ---------------------------------------------------------------------------
		retlw	0D
; ---------------------------------------------------------------------------
		retlw	0D
; ---------------------------------------------------------------------------
		retlw	0E
; ---------------------------------------------------------------------------
		retlw	0F
; ---------------------------------------------------------------------------
		retlw	0F
; ---------------------------------------------------------------------------
		retlw	10
; ---------------------------------------------------------------------------
		retlw	11
; ---------------------------------------------------------------------------
		retlw	11
; ---------------------------------------------------------------------------
		retlw	12
; ---------------------------------------------------------------------------
		retlw	12
; ---------------------------------------------------------------------------
		retlw	13
; ---------------------------------------------------------------------------
		retlw	14
; ---------------------------------------------------------------------------
		retlw	14
; ---------------------------------------------------------------------------
		retlw	15
; ---------------------------------------------------------------------------
		retlw	15
; ---------------------------------------------------------------------------
		retlw	16
; ---------------------------------------------------------------------------
		retlw	16
; ---------------------------------------------------------------------------
		retlw	17
; ---------------------------------------------------------------------------
		retlw	17
; ---------------------------------------------------------------------------
		retlw	18
; ---------------------------------------------------------------------------
		retlw	19
; ---------------------------------------------------------------------------
		retlw	19
; ---------------------------------------------------------------------------
		retlw	1A
; ---------------------------------------------------------------------------
		retlw	1A
; ---------------------------------------------------------------------------
		retlw	1B
; ---------------------------------------------------------------------------
		retlw	1B
; ---------------------------------------------------------------------------
		retlw	1C
; ---------------------------------------------------------------------------
		retlw	1C
; ---------------------------------------------------------------------------
		retlw	1D
; ---------------------------------------------------------------------------
		retlw	1D
; ---------------------------------------------------------------------------
		retlw	1E
; ---------------------------------------------------------------------------
		retlw	1E
; ---------------------------------------------------------------------------
		retlw	1F
; ---------------------------------------------------------------------------
		retlw	1F
; ---------------------------------------------------------------------------
		retlw	20 ; ' '
; ---------------------------------------------------------------------------
		retlw	20 ; ' '
; ---------------------------------------------------------------------------
		retlw	21 ; '!'
; ---------------------------------------------------------------------------
		retlw	21 ; '!'
; ---------------------------------------------------------------------------
		retlw	22 ; '"'
; ---------------------------------------------------------------------------
		retlw	22 ; '"'
; ---------------------------------------------------------------------------
		retlw	23 ; '#'
; ---------------------------------------------------------------------------
		retlw	23 ; '#'
; ---------------------------------------------------------------------------
		retlw	24 ; '$'
; ---------------------------------------------------------------------------
		retlw	24 ; '$'
; ---------------------------------------------------------------------------
		retlw	25 ; '%'
; ---------------------------------------------------------------------------
		retlw	25 ; '%'
; ---------------------------------------------------------------------------
		retlw	26 ; '&'
; ---------------------------------------------------------------------------
		retlw	26 ; '&'
; ---------------------------------------------------------------------------
		retlw	27 ; '''
; ---------------------------------------------------------------------------
		retlw	27 ; '''
; ---------------------------------------------------------------------------
		retlw	28 ; '('
; ---------------------------------------------------------------------------
		retlw	28 ; '('
; ---------------------------------------------------------------------------
		retlw	29 ; ')'
; ---------------------------------------------------------------------------
		retlw	29 ; ')'
; ---------------------------------------------------------------------------
		retlw	2A ; '*'
; ---------------------------------------------------------------------------
		retlw	2A ; '*'
; ---------------------------------------------------------------------------
		retlw	2B ; '+'
; ---------------------------------------------------------------------------
		retlw	2B ; '+'
; ---------------------------------------------------------------------------
		retlw	2C ; ','
; ---------------------------------------------------------------------------
		retlw	2C ; ','
; ---------------------------------------------------------------------------
		retlw	2D ; '-'
; ---------------------------------------------------------------------------
		retlw	2D ; '-'
; ---------------------------------------------------------------------------
		retlw	2E ; '.'
; ---------------------------------------------------------------------------
		retlw	2E ; '.'
; ---------------------------------------------------------------------------
		retlw	2F ; '/'
; ---------------------------------------------------------------------------
		retlw	2F ; '/'
; ---------------------------------------------------------------------------
		retlw	2F ; '/'
; ---------------------------------------------------------------------------
		retlw	30 ; '0'
; ---------------------------------------------------------------------------
		retlw	30 ; '0'
; ---------------------------------------------------------------------------
		retlw	31 ; '1'
; ---------------------------------------------------------------------------
		retlw	31 ; '1'
; ---------------------------------------------------------------------------
		retlw	32 ; '2'
; ---------------------------------------------------------------------------
		retlw	32 ; '2'
; ---------------------------------------------------------------------------
		retlw	33 ; '3'
; ---------------------------------------------------------------------------
		retlw	33 ; '3'
; ---------------------------------------------------------------------------
		retlw	34 ; '4'
; ---------------------------------------------------------------------------
		retlw	34 ; '4'
; ---------------------------------------------------------------------------
		retlw	35 ; '5'
; ---------------------------------------------------------------------------
		retlw	35 ; '5'
; ---------------------------------------------------------------------------
		retlw	36 ; '6'
; ---------------------------------------------------------------------------
		retlw	36 ; '6'
; ---------------------------------------------------------------------------
		retlw	37 ; '7'
; ---------------------------------------------------------------------------
		retlw	37 ; '7'
; ---------------------------------------------------------------------------
		retlw	38 ; '8'
; ---------------------------------------------------------------------------
		retlw	38 ; '8'
; ---------------------------------------------------------------------------
		retlw	39 ; '9'
; ---------------------------------------------------------------------------
		retlw	39 ; '9'
; ---------------------------------------------------------------------------
		retlw	3A ; ':'
; ---------------------------------------------------------------------------
		retlw	3A ; ':'
; ---------------------------------------------------------------------------
		retlw	3B ; ';'
; ---------------------------------------------------------------------------
		retlw	3B ; ';'
; ---------------------------------------------------------------------------
		retlw	3C ; '<'
; ---------------------------------------------------------------------------
		retlw	3C ; '<'
; ---------------------------------------------------------------------------
		retlw	3D ; '='
; ---------------------------------------------------------------------------
		retlw	3D ; '='
; ---------------------------------------------------------------------------
		retlw	3E ; '>'
; ---------------------------------------------------------------------------
		retlw	3E ; '>'
; ---------------------------------------------------------------------------
		retlw	3F ; '?'
; ---------------------------------------------------------------------------
		retlw	3F ; '?'
; ---------------------------------------------------------------------------
		retlw	40 ; '@'
; ---------------------------------------------------------------------------
		retlw	40 ; '@'
; ---------------------------------------------------------------------------
		retlw	41 ; 'A'
; ---------------------------------------------------------------------------
		retlw	41 ; 'A'
; ---------------------------------------------------------------------------
		retlw	42 ; 'B'
; ---------------------------------------------------------------------------
		retlw	42 ; 'B'
; ---------------------------------------------------------------------------
		retlw	43 ; 'C'
; ---------------------------------------------------------------------------
		retlw	44 ; 'D'
; ---------------------------------------------------------------------------
		retlw	44 ; 'D'
; ---------------------------------------------------------------------------
		retlw	45 ; 'E'
; ---------------------------------------------------------------------------
		retlw	45 ; 'E'
; ---------------------------------------------------------------------------
		retlw	46 ; 'F'
; ---------------------------------------------------------------------------
		retlw	46 ; 'F'
; ---------------------------------------------------------------------------
		retlw	47 ; 'G'
; ---------------------------------------------------------------------------
		retlw	47 ; 'G'
; ---------------------------------------------------------------------------
		retlw	48 ; 'H'
; ---------------------------------------------------------------------------
		retlw	48 ; 'H'
; ---------------------------------------------------------------------------
		retlw	49 ; 'I'
; ---------------------------------------------------------------------------
		retlw	4A ; 'J'
; ---------------------------------------------------------------------------
		retlw	4A ; 'J'
; ---------------------------------------------------------------------------
		retlw	4B ; 'K'
; ---------------------------------------------------------------------------
		retlw	4B ; 'K'
; ---------------------------------------------------------------------------
		retlw	4C ; 'L'
; ---------------------------------------------------------------------------
		retlw	4D ; 'M'
; ---------------------------------------------------------------------------
		retlw	4D ; 'M'
; ---------------------------------------------------------------------------
		retlw	4E ; 'N'
; ---------------------------------------------------------------------------
		retlw	4F ; 'O'
; ---------------------------------------------------------------------------
		retlw	4F ; 'O'
; ---------------------------------------------------------------------------
		retlw	50 ; 'P'
; ---------------------------------------------------------------------------
		retlw	50 ; 'P'
; ---------------------------------------------------------------------------
		retlw	51 ; 'Q'
; ---------------------------------------------------------------------------
		retlw	52 ; 'R'
; ---------------------------------------------------------------------------
		retlw	52 ; 'R'
; ---------------------------------------------------------------------------
		retlw	53 ; 'S'
; ---------------------------------------------------------------------------
		retlw	54 ; 'T'
; ---------------------------------------------------------------------------
		retlw	54 ; 'T'
; ---------------------------------------------------------------------------
		retlw	55 ; 'U'
; ---------------------------------------------------------------------------
		retlw	56 ; 'V'
; ---------------------------------------------------------------------------
		retlw	57 ; 'W'
; ---------------------------------------------------------------------------
		retlw	57 ; 'W'
; ---------------------------------------------------------------------------
		retlw	58 ; 'X'
; ---------------------------------------------------------------------------
		retlw	59 ; 'Y'
; ---------------------------------------------------------------------------
		retlw	59 ; 'Y'
; ---------------------------------------------------------------------------
		retlw	5A ; 'Z'
; ---------------------------------------------------------------------------
		retlw	5B ; '['
; ---------------------------------------------------------------------------
		retlw	5C ; '\'
; ---------------------------------------------------------------------------
		retlw	5C ; '\'
; ---------------------------------------------------------------------------
		retlw	5D ; ']'
; ---------------------------------------------------------------------------
		retlw	5E ; '^'
; ---------------------------------------------------------------------------
		retlw	5F ; '_'
; ---------------------------------------------------------------------------
		retlw	60 ; '`'
; ---------------------------------------------------------------------------
		retlw	61 ; 'a'
; ---------------------------------------------------------------------------
		retlw	61 ; 'a'
; ---------------------------------------------------------------------------
		retlw	62 ; 'b'
; ---------------------------------------------------------------------------
		retlw	63 ; 'c'
; ---------------------------------------------------------------------------
		retlw	64 ; 'd'
; ---------------------------------------------------------------------------
		retlw	65 ; 'e'
; ---------------------------------------------------------------------------
		retlw	66 ; 'f'
; ---------------------------------------------------------------------------
		retlw	67 ; 'g'
; ---------------------------------------------------------------------------
		retlw	68 ; 'h'
; ---------------------------------------------------------------------------
		retlw	69 ; 'i'
; ---------------------------------------------------------------------------
		retlw	6A ; 'j'
; ---------------------------------------------------------------------------
		retlw	6B ; 'k'
; ---------------------------------------------------------------------------
		retlw	6C ; 'l'
; ---------------------------------------------------------------------------
		retlw	6D ; 'm'
; ---------------------------------------------------------------------------
		retlw	6E ; 'n'
; ---------------------------------------------------------------------------
		retlw	6F ; 'o'
; ---------------------------------------------------------------------------
		retlw	70 ; 'p'
; ---------------------------------------------------------------------------
		retlw	71 ; 'q'
; ---------------------------------------------------------------------------
		retlw	73 ; 's'
; ---------------------------------------------------------------------------
		retlw	74 ; 't'
; ---------------------------------------------------------------------------
		retlw	75 ; 'u'
; ---------------------------------------------------------------------------
		retlw	76 ; 'v'
; ---------------------------------------------------------------------------
		retlw	78 ; 'x'
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR ISR
; assume pclath	= 0

I2C_IRQ_Handler:			; CODE XREF: ISR+9j
		movfw	irq_store_w
		movwf	irq_fw_copy
		movfw	irq_store_status
		movwf	irq_status_copy
		movfw	irq_store_pclath
		movwf	irq_pclath_copy
		bcf	BANK0:STATUS, RP0
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		movlw	26 ; '&'
		movwf	i2c_timeout_counter_msb
		movlw	0F9 ; 'ù'
		movwf	i2c_timeout_counter_lsb
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		clrf	cleared_every_i2c_irq
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		btfsc	BANK1:SSPSTAT, D_A ; Check if data or address (1=data)
		 b	 I2C_Was_Data
		bcf	BANK1:STATUS, RP1 ; received address byte
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	BANK0:SSPBUF	; read address byte (just to avoid overflow)
		bcf	i2c_flags2, 2
		bcf	i2c_flags1, 5	; bit0=psu on,bit1 set every 10k timerIrqs
		bcf	i2c_flags2, 1
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		btfss	BANK1:SSPSTAT, R_W ; is	in read	or write mode (1=read)
		 b	 i2c_exit_irq	; master is writing to us (and we just got address byte	so are done)
		bcf	BANK1:STATUS, RP0 ; master is reading from us (so we need to set up the	first data byte	for it)
; assume bank =	0
		bsf	i2c_flags2, 1	; state	3
		btfss	i2c_flags1, 3	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 flags1_bit3_clear
		movfw	i2c_rx_checksum	; this is the first byte read after the	address	write(w/read bit set), which was prepared during the write+address phase earlier
		movwf	BANK0:SSPBUF	; output i2c_byte_temp to master
		nop
		nop
		b	i2c_exit_irq
; ---------------------------------------------------------------------------

flags1_bit3_clear:			; CODE XREF: ISR+1D7j
		btfss	i2c_flags1, 6	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 flags1_bit6_clear
		comf	i2c_rx_checksum, w
		movwf	BANK0:SSPBUF	; output complement of i2c_byte_temp to	master
		nop
		nop
		b	i2c_exit_irq
; ---------------------------------------------------------------------------

flags1_bit6_clear:			; CODE XREF: ISR+1DEj
		btfsc	i2c_flags1, 4	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 flags1_bit4_set1
		movlw	55 ; 'U'
		movwf	BANK0:SSPBUF	; output 0x55 to master
		nop
		nop
		b	i2c_exit_irq
; ---------------------------------------------------------------------------

flags1_bit4_set1:			; CODE XREF: ISR+1E5j
		movlw	0
		movwf	BANK0:PCLATH
		movfw	i2c_cmd_code	; can read various bytes of memory with	cmds 0-58
		sublw	58 ; 'X'
		bc	cmd_lessthan_58
		movlw	59 ; 'Y'        ; clamp at 0x59
		movwf	i2c_cmd_code	; clamp	to max 59

cmd_lessthan_58:			; CODE XREF: ISR+1EFj
		movfw	i2c_cmd_code
		call	lookup_ram_to_read_for_cmd
		clrf	BANK0:PCLATH
		movwf	BANK0:FSR	; set up indirect address
		movfw	BANK0:INDF	; fetch	from indirect address
		bcf	BANK0:STATUS, IRP
		movwf	BANK0:SSPBUF	; send indirectly-fetched data
		nop
		nop
		movwf	i2c_checksum	; start	checksum
		b	i2c_exit_irq
; ---------------------------------------------------------------------------
; assume bank =	1

I2C_Was_Data:				; CODE XREF: ISR+1CAj
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfsc	i2c_flags2, 1
		 b	 flags2_bit1_set_host_reading ;	if host	is reading from	us
		btfsc	i2c_flags2, 2	; is 2nd byte flag set?
		 b	 flags2_bit2_receive_2ndplus_bytes ; if	on 2nd+	byte
		bsf	i2c_flags2, 2	; set second byte flag
		b	receive_first_byte_i2c_command ; get i2c byte which is cmd code
; ---------------------------------------------------------------------------

flags2_bit1_set_host_reading:		; CODE XREF: ISR+200j
		bsf	i2c_flags2, 2	; is reading (state 4) set second byte flag (flag2:2)
		btfss	i2c_flags1, 5	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 flags1_bit5_clear
		btfsc	i2c_flags1, 4	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 done_send_checksum ; calculate	and send checksum
		movlw	0FE ; 'þ'
		movwf	BANK0:SSPBUF	; send 0xfe (error code?)
		nop
		nop
		b	i2c_exit_irq
; ---------------------------------------------------------------------------

done_send_checksum:			; CODE XREF: ISR+209j
		movfw	i2c_checksum	; calculate and	send checksum
		sublw	0FF
		addlw	1
		movwf	i2c_checksum
		movfw	i2c_checksum
		movwf	BANK0:SSPBUF	; send checksum
		nop
		nop
		movfw	i2c_cmd_code
		sublw	37 ; '7'
		skpnz
		 bcf	 i2c_flags3, 5	; CMD 37=clear flags3.5
		movfw	i2c_cmd_code
		sublw	35 ; '5'
		skpnz
		 bcf	 i2c_flags3, 6	; CMD 35=clear flags3.6
		movfw	i2c_cmd_code
		sublw	33 ; '3'
		skpnz
		 bcf	 i2c_flags3, 7	; CMD 33=clear flags3.7
		b	i2c_exit_irq
; ---------------------------------------------------------------------------

flags1_bit5_clear:			; CODE XREF: ISR+207j
		btfsc	i2c_flags1, 4	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 flags1_bit4_set2
		movlw	0AA ; 'ª'
		movwf	BANK0:SSPBUF	; output 0xaa (error?)
		nop
		nop
		bsf	i2c_flags1, 5	; bit0=psu on,bit1 set every 10k timerIrqs
		b	i2c_exit_irq
; ---------------------------------------------------------------------------

flags1_bit4_set2:			; CODE XREF: ISR+225j
		movlw	0
		movwf	BANK0:PCLATH
		incf	i2c_cmd_code, f	; r/w sequential regs?
		movfw	i2c_cmd_code	; check	for overflow past 58
		sublw	58 ; 'X'
		bc	cmd_lessthan_0x58
		movlw	59 ; 'Y'        ; clamp at 0x59
		movwf	i2c_cmd_code	; clamp	to 59

cmd_lessthan_0x58:			; CODE XREF: ISR+231j
		movfw	i2c_cmd_code
		sublw	57 ; 'W'
		bnz	not_ee_read	; cmd 0x57=read	EEPROM
		bsf	BANK0:STATUS, RP0 ; read+send EEPROM data to host
; assume bank =	1
		movfw	EEPROM_read_addr_ptr
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		movwf	BANK2:EEADR
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		bcf	BANK3:EECON1, EEPGD
		bsf	BANK3:EECON1, RD
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	BANK2:EEDATA
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bcf	BANK0:STATUS, IRP
		movwf	BANK0:SSPBUF	; send EEPROM byte to host
		nop
		nop
		bsf	i2c_flags1, 5	; bit0=psu on,bit1 set every 10k timerIrqs
		addwf	i2c_checksum, f
		b	i2c_exit_irq
; ---------------------------------------------------------------------------

not_ee_read:				; CODE XREF: ISR+237j
		movfw	i2c_cmd_code
		call	lookup_ram_to_read_for_cmd
		clrf	BANK0:PCLATH
		movwf	BANK0:FSR	; indirect read	from lookedup location
		movfw	BANK0:INDF
		bcf	BANK0:STATUS, IRP
		movwf	BANK0:SSPBUF	; send indirectly read value
		nop
		nop
		bsf	i2c_flags1, 5	; bit0=psu on,bit1 set every 10k timerIrqs
		addwf	i2c_checksum, f
		b	i2c_exit_irq
; ---------------------------------------------------------------------------

receive_first_byte_i2c_command:		; CODE XREF: ISR+204j
		movfw	BANK0:SSPBUF	; get i2c byte which is	cmd code
		movwf	i2c_cmd_code	; set cmd code from incoming i2c
		movwf	i2c_cmd_code_copy2
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		addwf	BANK1:SSPADD, w	; add i2c address to it	as part	of checksum calculation
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movwf	i2c_rx_checksum	; init checksum	(=i2c address +	first byte)
		bcf	i2c_flags1, 4	; bit0=psu on,bit1 set every 10k timerIrqs
		bcf	i2c_flags1, 3	; bit0=psu on,bit1 set every 10k timerIrqs
		bcf	i2c_flags1, 6	; bit0=psu on,bit1 set every 10k timerIrqs
		clrf	i2c_rx_cmd_byte_count
		movfw	BANK0:SSPBUF	; get i2c cmd byte (again)
		andlw	1		; check	bit 0
		bz	i2c_exit_irq
		movlw	58 ; 'X'        ; if bit 0 set force cmd to be 58 (err?) (yes, returns 0, maybe is write cmd?)
		movwf	i2c_cmd_code	; set to 58 (err?)
		movwf	i2c_cmd_code_copy2
		b	i2c_exit_irq
; ---------------------------------------------------------------------------

flags2_bit2_receive_2ndplus_bytes:	; CODE XREF: ISR+202j
		tstf	i2c_rx_cmd_byte_count
		bnz	not_first_rx_operand ; check byte count=1?
		movfw	i2c_rx_checksum	; checksum currently = cmd byte	received+i2c_addr
		sublw	0FF		; 0xff - (byte)
		addlw	1
		subwf	BANK0:SSPBUF, w	; compare to new byte, so this byte must = (0xff-(cmd_code+i2c_addr))+1
		skpnz
		 bsf	 i2c_flags1, 4	; set 1:4 because incoming cmd checksum	ok (?) - this bit should be set	to makes reads work - however if this is a write cmd this checksum check is nonsensical	so gets	ignored	(see below for write cmd checksum)
		movfw	BANK0:SSPBUF	; ..this cmd may be a write in which case we store as lsb of write isn
		movwf	incoming_write_data_lsb	; if we're setting up read this byte was checksum, but if doing a write this is the low byte of the write instruction (checksome done later)
		addwf	i2c_rx_checksum, f ; add incoming byte to incoming checksum
		b	i2c_exit_irq_inc_byte_count
; ---------------------------------------------------------------------------

not_first_rx_operand:			; CODE XREF: ISR+26Bj
		movfw	i2c_rx_cmd_byte_count ;	check byte count=1?
		sublw	1
		bnz	not_second_rx_operand ;	is byte	count 2?
		movfw	BANK0:SSPBUF
		movwf	incoming_write_data_msb
		addwf	i2c_rx_checksum, f ; add incoming byte to incoming checksum
		b	i2c_exit_irq_inc_byte_count
; ---------------------------------------------------------------------------

not_second_rx_operand:			; CODE XREF: ISR+279j
		movfw	i2c_rx_cmd_byte_count ;	check byte count=2
		sublw	2
		bnz	i2c_exit_irq_inc_byte_count
		movfw	i2c_rx_checksum	; this is a write operation, (cmd,LSB,MSB,checksum) so check checksum now
		sublw	0FF
		addlw	1
		movwf	i2c_rx_checksum
		movfw	BANK0:SSPBUF
		subwf	i2c_rx_checksum, w
		bz	write_cmd_checksum_ok ;	checksum of write cmd was ok, so let's do it
		bsf	i2c_flags1, 6	; checksum error in write cmd
		movfw	BANK0:SSPBUF	; read current byte set	checksum
		movwf	i2c_rx_checksum
		b	i2c_exit_irq_inc_byte_count
; ---------------------------------------------------------------------------

write_cmd_checksum_ok:			; CODE XREF: ISR+289j
		bsf	i2c_flags1, 3	; checksum of write cmd	was ok,	so let's do it
		movlw	0
		movwf	BANK0:PCLATH
		movfw	i2c_cmd_code_copy2 ; performs 16-bit write to i2c_cmd_code reg
		sublw	58 ; 'X'
		bc	cmd_less_than_58_1
		movlw	59 ; 'Y'        ; clamp cmd at 59
		movwf	i2c_cmd_code_copy2

cmd_less_than_58_1:			; CODE XREF: ISR+294j
		movfw	i2c_cmd_code_copy2
		call	lookup_ram_to_write_for_cmd
		clrf	BANK0:PCLATH
		movwf	BANK0:FSR
		movfw	incoming_write_data_lsb
		movwf	BANK0:INDF	; indirect write LSB (to *fsr)
		incf	i2c_cmd_code_copy2, f ;	write next address..
		movlw	0
		movwf	BANK0:PCLATH
		movfw	i2c_cmd_code_copy2 ; check for overflow
		sublw	58 ; 'X'
		bc	cmd_less_than_58
		movlw	59 ; 'Y'        ; clamp cmd at 59
		movwf	i2c_cmd_code_copy2

cmd_less_than_58:			; CODE XREF: ISR+2A3j
		movfw	i2c_cmd_code_copy2
		call	lookup_ram_to_write_for_cmd
		clrf	BANK0:PCLATH
		movwf	BANK0:FSR
		movfw	incoming_write_data_msb
		movwf	BANK0:INDF	; indirect write MSB (to *fsr)
		movfw	i2c_cmd_code_copy2
		sublw	55 ; 'U'        ; unclear why cmd 55 gets special check here
		bnz	not_cmd_55	; is 16	bit arg	0?
		bsf	some_major_flags, 5

not_cmd_55:				; CODE XREF: ISR+2AFj
		tstf	incoming_write_data_lsb	; is 16	bit arg	0?
		bnz	not_cmd_31
		tstf	incoming_write_data_msb
		bnz	not_cmd_31
		movfw	i2c_cmd_code_copy2
		sublw	35 ; '5'
		bnz	cmd_not_35
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	MaxInputCurrentLSB
		clrf	MaxInputCurrentMSB
		bcf	BANK1:STATUS, RP0
; assume bank =	0

cmd_not_35:				; CODE XREF: ISR+2BAj
		movfw	i2c_cmd_code_copy2
		sublw	37 ; '7'
		bnz	not_cmd_37
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	MaxRecordedCurrentLSB
		clrf	MaxRecordedCurrentMSB
		bcf	BANK1:STATUS, RP0
; assume bank =	0

not_cmd_37:				; CODE XREF: ISR+2C2j
		movfw	i2c_cmd_code_copy2
		sublw	33 ; '3'
		bnz	not_cmd_33
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	MaxInputWattsLSB
		clrf	MaxInputWattsMSB
		bcf	BANK1:STATUS, RP0
; assume bank =	0

not_cmd_33:				; CODE XREF: ISR+2CAj
		movfw	i2c_cmd_code_copy2
		sublw	31 ; '1'
		bnz	not_cmd_31
		bsf	i2c_flags1, 2	; bit0=psu on,bit1 set every 10k timerIrqs
		bsf	i2c_flags1, 7	; bit0=psu on,bit1 set every 10k timerIrqs

not_cmd_31:				; CODE XREF: ISR+2B3j ISR+2B6j ...
		movfw	i2c_cmd_code_copy2
		sublw	41 ; 'A'
		bnz	not_cmd_41
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	surprise_more_flags, 5
		b	loc_CODE_312
; ---------------------------------------------------------------------------
; assume bank =	0

not_cmd_41:				; CODE XREF: ISR+2D8j
		movfw	i2c_cmd_code_copy2
		sublw	45 ; 'E'
		bnz	not_cmd_45
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	byte_DATA_A4, 1	; one-time trigger to do with setting a	voltage	threshold
		b	loc_CODE_312
; ---------------------------------------------------------------------------
; assume bank =	0

not_cmd_45:				; CODE XREF: ISR+2DFj
		movfw	i2c_cmd_code_copy2
		sublw	47 ; 'G'
		bnz	not_cmd_47
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	byte_DATA_A4, 2
		b	loc_CODE_312
; ---------------------------------------------------------------------------
; assume bank =	0

not_cmd_47:				; CODE XREF: ISR+2E6j
		movfw	i2c_cmd_code_copy2
		sublw	3D ; '='
		bnz	not_cmd_3d
		tstf	incoming_write_data_lsb	; is 16	bit value 0?
		bnz	loc_CODE_2F9
		tstf	incoming_write_data_msb
		bz	not_cmd_3d

loc_CODE_2F9:				; CODE XREF: ISR+2F0j
		bsf	yet_more_flags,	7
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	interesting_ctrl_byte_set_cmd3b, 6
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	incoming_write_data_lsb	; something like min fan speed
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movwf	written_by_cmd_3d_lsb
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	incoming_write_data_msb
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movwf	written_by_cmd_3d_msb
		b	loc_CODE_312
; ---------------------------------------------------------------------------
; assume bank =	0

not_cmd_3d:				; CODE XREF: ISR+2EDj ISR+2F3j
		movfw	i2c_cmd_code_copy2
		sublw	49 ; 'I'
		bnz	cmd_not_49
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	byte_DATA_A4, 3
		b	loc_CODE_312
; ---------------------------------------------------------------------------
; assume bank =	0

cmd_not_49:				; CODE XREF: ISR+303j
		movfw	i2c_cmd_code_copy2
		sublw	4B ; 'K'
		bnz	cmd_not_4b
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	byte_DATA_A4, 4

loc_CODE_312:				; CODE XREF: ISR+2DCj ISR+2E3j ...
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	incoming_write_data_lsb
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movwf	copy_of_write_data_lsb
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	incoming_write_data_msb
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movwf	copy_of_write_data_msb
; assume bank =	0

cmd_not_4b:				; CODE XREF: ISR+30Aj
		bcf	BANK0:STATUS, RP0
		movfw	i2c_cmd_code_copy2
		sublw	3B ; ';'
		bnz	i2c_exit_irq_inc_byte_count
		bsf	yet_more_flags,	5 ; handler for	mysterious cmd 3b
		btfsc	incoming_write_data_lsb, 5
		 b	 cmd_3b_lsb_bit5_set
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		btfss	yet_yet_more_flags, 2
		 b	 loc_CODE_327
		btfsc	interesting_ctrl_byte_set_cmd3b, 4
		 b	 cmd_3b_lsb_bit5_set

loc_CODE_327:				; CODE XREF: ISR+320j
		bcf	interesting_ctrl_byte_set_cmd3b, 5
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	BANK0:PORTC, RC1
; assume bank =	1

cmd_3b_lsb_bit5_set:			; CODE XREF: ISR+31Dj ISR+322j
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfsc	incoming_write_data_lsb, 6
		 b	 cmd_3b_bit_6_set
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	written_by_cmd_3d_lsb
		clrf	written_by_cmd_3d_msb
		bcf	interesting_ctrl_byte_set_cmd3b, 6
; assume bank =	0

cmd_3b_bit_6_set:			; CODE XREF: ISR+328j
		bcf	BANK0:STATUS, RP0
		movlw	1F
		andwf	incoming_write_data_lsb, f ; mask off just low 5 bits of lsb
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movfw	interesting_ctrl_byte_set_cmd3b
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movwf	incoming_write_data_msb
		btfsc	incoming_write_data_msb, 5
		 bsf	 incoming_write_data_lsb, 5
		btfsc	incoming_write_data_msb, 6
		 bsf	 incoming_write_data_lsb, 6
		movfw	incoming_write_data_lsb
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movwf	interesting_ctrl_byte_set_cmd3b
		btfsc	surprise_more_flags, 5
		 b	 i2c_exit_irq_inc_byte_count
		movfw	interesting_ctrl_byte_set_cmd3b
		andlw	7
		xorlw	1
		bnz	bits_not_1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfsc	some_major_flags, 1
		 b	 loc_CODE_34F
; assume bank =	1

bits_not_1:				; CODE XREF: ISR+340j
		bsf	BANK1:STATUS, RP0
		movlw	0C		; set to 3300
		movwf	fan_related_msb
		movlw	0E4 ; 'ä'
		movwf	fan_related_lsb
		b	i2c_exit_irq_inc_byte_count
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_34F:				; CODE XREF: ISR+344j
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movlw	23 ; '#'        ; set to 9000
		movwf	fan_related_msb
		movlw	28 ; '('
		movwf	fan_related_lsb
		b	i2c_exit_irq_inc_byte_count
; ---------------------------------------------------------------------------

i2c_exit_irq_inc_byte_count:		; CODE XREF: ISR+276j ISR+27Ej ...
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	BANK0:STATUS, RP1
		incf	i2c_rx_cmd_byte_count, f
		b	i2c_exit_irq
; ---------------------------------------------------------------------------

i2c_exit_irq:				; CODE XREF: ISR+1D3j ISR+1DCj ...
		bcf	BANK0:STATUS, RP0
		bcf	BANK0:SSPCON, WCOL ; clear write collision detect
		bcf	BANK0:SSPCON, SSPOV ; clear rx ovf
		bcf	BANK0:PIR1, SSPIF
		bsf	BANK0:SSPCON, CKP ; enable clk (don't clk stretch)
		bcf	BANK0:INTCON, GIE
		bcf	BANK0:STATUS, RP0
		bcf	BANK0:STATUS, RP1
		movfw	irq_pclath_copy
		movwf	BANK0:PCLATH
		movfw	irq_status_copy
		movwf	BANK0:STATUS
		swapf	irq_fw_copy, f
		swapf	irq_fw_copy, w
		retfie
; ---------------------------------------------------------------------------

Timer0_IRQ_Handler:			; CODE XREF: ISR+Bj
		movfw	irq_store_w	; this is a few	khz I believe
		movwf	tirq_store_w
		movfw	irq_store_status
		movwf	tirq_store_status
		movfw	irq_store_pclath
		movwf	tirq_store_plath
		bcf	BANK0:INTCON, TMR0IE
		bcf	BANK0:INTCON, TMR0IF
		movlw	86 ; ''
		movwf	BANK0:TMR0
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movlw	82 ; ''
		movwf	BANK1:OPTION
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:INTCON, GIE
		clrwdt
		movfw	downcount_from_10000_lsb
		bz	loc_CODE_37D
		decf	downcount_from_10000_lsb, f
		b	loc_CODE_384
; ---------------------------------------------------------------------------

loc_CODE_37D:				; CODE XREF: ISR+375j
		movfw	downcount_from_10000_msb
		bnz	loc_CODE_382
		bsf	i2c_flags1, 1	; bit0=psu on,bit1 set every 10k timerIrqs
		b	loc_CODE_384
; ---------------------------------------------------------------------------

loc_CODE_382:				; CODE XREF: ISR+37Aj
		decf	downcount_from_10000_msb, f
		comf	downcount_from_10000_lsb, f

loc_CODE_384:				; CODE XREF: ISR+378j ISR+37Dj ...
		btfsc	BANK0:ADCON0, 1
		 b	 loc_CODE_384
		movfw	byte_DATA_3D
		subwf	BANK0:ADRESH, w
		movwf	byte_DATA_3E
		bnc	loc_CODE_3A3
		clrc
		rrf	byte_DATA_3E, f
		addcf	byte_DATA_3E, f
		clrc
		rrf	byte_DATA_3E, f
		addcf	byte_DATA_3E, f
		clrc
		rrf	byte_DATA_3E, f
		addcf	byte_DATA_3E, f
		clrc
		rrf	byte_DATA_3E, f
		addcf	byte_DATA_3E, f
		movfw	byte_DATA_3E
		addwf	byte_DATA_3F, f
		bnc	loc_CODE_3BD
		incf	byte_DATA_3D, f
		skpnz
		 comf	 byte_DATA_3D, f
		b	loc_CODE_3BD
; ---------------------------------------------------------------------------

loc_CODE_3A3:				; CODE XREF: ISR+385j
		negf	byte_DATA_3E, f
		clrc
		rrf	byte_DATA_3E, f
		addcf	byte_DATA_3E, f
		clrc
		rrf	byte_DATA_3E, f
		addcf	byte_DATA_3E, f
		clrc
		rrf	byte_DATA_3E, f
		addcf	byte_DATA_3E, f
		clrc
		rrf	byte_DATA_3E, f
		addcf	byte_DATA_3E, f
		movfw	byte_DATA_3E
		subwf	byte_DATA_3F, f
		bc	loc_CODE_3BD
		movlw	1
		subwf	byte_DATA_3D, f
		skpc
		 clrf	 byte_DATA_3D

loc_CODE_3BD:				; CODE XREF: ISR+399j ISR+39Ej ...
		movlw	3
		movwf	BANK0:PCLATH
; assume pclath	= 3
		movlw	0		; get which ADC	channel	is being read into W
		btfsc	BANK0:ADCON0, GO_DONE
		 addlw	 1
		btfsc	BANK0:ADCON0, CHS0
		 addlw	 2
		btfsc	BANK0:ADCON0, CHS1
		 addlw	 4
		addwf	BANK0:PCL, f
		b	ADCReadChannel0	; jumptable
; END OF FUNCTION CHUNK	FOR ISR
; ---------------------------------------------------------------------------
		b	ADCReadChannel1	; jump table for storing each ADC result
; ---------------------------------------------------------------------------
		b	ADCReadChannel2
; assume pclath	= 0
; [00000001 BYTES: COLLAPSED FUNCTION j_ADCReadChannel3. PRESS KEYPAD CTRL-"+" TO EXPAND]
; ---------------------------------------------------------------------------
		b	ADCReadChannel3
; ---------------------------------------------------------------------------
		b	ADCReadChannel3
; ---------------------------------------------------------------------------
		b	ADCReadChannel3
; ---------------------------------------------------------------------------
		b	ADCReadChannel3
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR ISR
; assume pclath	= 3

ADCReadChannel0:			; CODE XREF: ISR+3C3j
		movfw	BANK0:ADRESH
		movwf	ADCChannel0MSB
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movfw	BANK1:ADRESL
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		movwf	ADCChannel0LSB
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		btfsc	some_major_flags, 1
		 b	 dont_turn_on_a
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		incf	count_up_to_5_then_turn_psu_on,	f
		movfw	count_up_to_5_then_turn_psu_on
		sublw	5
		bc	dont_turn_on
		clrf	count_up_to_5_then_turn_psu_on
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bsf	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		bcf	BANK0:INTCON, GIE
		bsf	BANK0:PORTB, RB2
		nop
		bsf	BANK0:PORTC, RC5 ; psu on
		bsf	BANK0:INTCON, GIE
		bcf	bunch_of_timing_flags, 7
		b	loc_CODE_401
; ---------------------------------------------------------------------------
; assume bank =	2

dont_turn_on:				; CODE XREF: ISR+3D9j
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		movfw	BANK0:ADRESH
		sublw	0B0 ; '°'
		bnc	loc_CODE_401
		bsf	BANK0:ADCON0, 1	; start	conversion

wait_adc_complete:			; CODE XREF: ISR+3ECj
		btfsc	BANK0:ADCON0, 1
		 b	 wait_adc_complete
		movfw	BANK0:ADRESH	; is this reading the "pull down to turn on"?
		sublw	0B0 ; '°'
		bnc	loc_CODE_401
		bsf	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		bcf	BANK0:INTCON, GIE
		bsf	BANK0:PORTB, RB2
		nop
		bsf	BANK0:PORTC, RC5 ; psu on
		bsf	BANK0:INTCON, GIE
		bcf	bunch_of_timing_flags, 7
		b	loc_CODE_401
; ---------------------------------------------------------------------------

dont_turn_on_a:				; CODE XREF: ISR+3D4j
		bsf	bunch_of_timing_flags, 7
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		clrf	count_up_to_5_then_turn_psu_on
		bcf	BANK2:STATUS, RP1
; assume bank =	0

loc_CODE_401:				; CODE XREF: ISR+3E4j ISR+3E8j ...
		incf	byte_DATA_65, f
		btfss	byte_DATA_65, 0
		 b	 loc_CODE_408
		bcf	BANK0:ADCON0, CHS1
		bcf	BANK0:ADCON0, CHS0
		bsf	BANK0:ADCON0, GO_DONE
		b	DoneADCChannelRead
; ---------------------------------------------------------------------------

loc_CODE_408:				; CODE XREF: ISR+3FFj
		movfw	byte_DATA_45
		movwf	byte_DATA_3D
		movfw	byte_DATA_44
		movwf	byte_DATA_3F
		bcf	BANK0:ADCON0, CHS1
		bsf	BANK0:ADCON0, CHS0
		bcf	BANK0:ADCON0, GO_DONE
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	BANK1:ADCON1, 4
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		b	DoneADCChannelRead
; END OF FUNCTION CHUNK	FOR ISR
; ---------------------------------------------------------------------------

ADCReadChannel1:			; CODE XREF: CODE:03C8j
		movfw	BANK0:ADRESH
		bcf	BANK0:STATUS, RP0
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		movwf	ADCChannel1MSB
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	BANK1:ADRESL
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		movwf	ADCChannel1LSB
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bcf	BANK0:ADCON0, CHS1
		bcf	BANK0:ADCON0, CHS0
		bcf	BANK0:ADCON0, GO_DONE
		b	DoneADCChannelRead
; ---------------------------------------------------------------------------

ADCReadChannel2:			; CODE XREF: CODE:03C9j
		movfw	byte_DATA_3D
		movwf	byte_DATA_45
		movfw	byte_DATA_3F
		movwf	byte_DATA_44
		bcf	BANK0:ADCON0, CHS1
		bcf	BANK0:ADCON0, CHS0
		bcf	BANK0:ADCON0, GO_DONE
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:ADCON1, 4
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		b	DoneADCChannelRead
; assume pclath	= 0

; =============== S U B	R O U T	I N E =======================================


ADCReadChannel3:			; CODE XREF: j_ADCReadChannel3j
					; CODE:03CBj ...
		bcf	BANK0:STATUS, RP0
		bcf	BANK0:ADCON0, CHS2
		bcf	BANK0:ADCON0, CHS1
		bcf	BANK0:ADCON0, CHS0
		bcf	BANK0:ADCON0, GO_DONE
; End of function ADCReadChannel3

; START	OF FUNCTION CHUNK FOR ISR
; assume pclath	= 3

DoneADCChannelRead:			; CODE XREF: ISR+403j ISR+40Ej ...
		btfsc	BANK0:PORTB, RB0
		 b	 loc_CODE_447
		nop
		nop
		btfsc	BANK0:PORTB, RB0
		 b	 loc_CODE_447
		btfsc	BANK0:PORTB, RB6
		 b	 loc_CODE_45B
		nop
		nop
		btfsc	BANK0:PORTB, RB6
		 b	 loc_CODE_45B
		bcf	yet_more_flags,	0
		bcf	yet_more_flags,	2
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		movlw	10
		movwf	downcount2_from_10000_lsb
		movlw	27 ; '''
		movwf	downcount2_from_10000_msb
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		b	loc_CODE_45F
; ---------------------------------------------------------------------------

loc_CODE_447:				; CODE XREF: ISR+42Fj ISR+433j
		btfsc	BANK0:PORTB, RB6
		 b	 loc_CODE_45D
		nop
		nop
		btfsc	BANK0:PORTB, RB6
		 b	 loc_CODE_45D
		btfsc	some_major_flags, 1
		 b	 loc_CODE_459
		bcf	yet_more_flags,	0
		btfss	yet_more_flags,	2
		 b	 loc_CODE_45F
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		btfss	readable_flags_lsb, 1
		 b	 loc_CODE_45F
		bsf	readable_flags2_lsb, 3
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	i2c_flags2, 3
		b	loc_CODE_45F
; ---------------------------------------------------------------------------

loc_CODE_459:				; CODE XREF: ISR+44Aj
		bsf	i2c_flags2, 3
		b	loc_CODE_45F
; ---------------------------------------------------------------------------

loc_CODE_45B:				; CODE XREF: ISR+435j ISR+439j
		bsf	yet_more_flags,	0
		b	loc_CODE_45F
; ---------------------------------------------------------------------------

loc_CODE_45D:				; CODE XREF: ISR+444j ISR+448j
		bsf	yet_more_flags,	0
		bcf	i2c_flags2, 3

loc_CODE_45F:				; CODE XREF: ISR+442j ISR+44Dj ...
		bcf	BANK0:STATUS, RP0
		btfsc	bunch_of_timing_flags, 0
		 b	 loc_CODE_475
		btfsc	yet_more_flags,	0
		 b	 loc_CODE_469
		movlw	0FA ; 'ú'
		movwf	downcount_from_500_250_lsb
		movlw	0
		movwf	downcount_from_500_250_msb
		b	loc_CODE_475
; ---------------------------------------------------------------------------

loc_CODE_469:				; CODE XREF: ISR+45Fj
		movfw	downcount_from_500_250_lsb
		bz	loc_CODE_46E
		decf	downcount_from_500_250_lsb, f
		b	loc_CODE_475
; ---------------------------------------------------------------------------

loc_CODE_46E:				; CODE XREF: ISR+466j
		movfw	downcount_from_500_250_msb
		bnz	loc_CODE_473
		bsf	bunch_of_timing_flags, 0
		b	loc_CODE_47D
; ---------------------------------------------------------------------------

loc_CODE_473:				; CODE XREF: ISR+46Bj
		decf	downcount_from_500_250_msb, f
		comf	downcount_from_500_250_lsb, f

loc_CODE_475:				; CODE XREF: ISR+45Dj ISR+464j ...
		btfss	bunch_of_timing_flags, 0
		 b	 loc_CODE_47D
		btfss	yet_more_flags,	0
		 bcf	 bunch_of_timing_flags,	0
		movlw	0FA ; 'ú'
		movwf	downcount_from_500_250_lsb ; set to 250	(elsewhere set to 500)
		movlw	0
		movwf	downcount_from_500_250_msb

loc_CODE_47D:				; CODE XREF: ISR+46Ej ISR+472j
		movfw	downcount_from_100_lsb
		bz	loc_CODE_482
		decf	downcount_from_100_lsb,	f
		b	loc_CODE_489
; ---------------------------------------------------------------------------

loc_CODE_482:				; CODE XREF: ISR+47Aj
		movfw	downcount_from_100_msb
		bnz	loc_CODE_487
		bsf	bunch_of_timing_flags, 2
		b	loc_CODE_489
; ---------------------------------------------------------------------------

loc_CODE_487:				; CODE XREF: ISR+47Fj
		decf	downcount_from_100_msb,	f
		comf	downcount_from_100_lsb,	f

loc_CODE_489:				; CODE XREF: ISR+47Dj ISR+482j
		movfw	downcount_from_2500_lsb
		bz	loc_CODE_48E
		decf	downcount_from_2500_lsb, f
		b	loc_CODE_495
; ---------------------------------------------------------------------------

loc_CODE_48E:				; CODE XREF: ISR+486j
		movfw	downcount_from_2500_msb
		bnz	loc_CODE_493
		bsf	yet_more_flags,	6
		b	loc_CODE_495
; ---------------------------------------------------------------------------

loc_CODE_493:				; CODE XREF: ISR+48Bj
		decf	downcount_from_2500_msb, f
		comf	downcount_from_2500_lsb, f

loc_CODE_495:				; CODE XREF: ISR+489j ISR+48Ej
		btfsc	bunch_of_timing_flags, 4
		 b	 loc_CODE_4B1
		btfsc	i2c_flags3, 0
		 b	 loc_CODE_49E
		movlw	64 ; 'd'        ; set to 6500
		movwf	downcount_from_6500_lsb
		movlw	19
		movwf	downcount_from_6500_msb
		b	loc_CODE_4B1
; ---------------------------------------------------------------------------

loc_CODE_49E:				; CODE XREF: ISR+494j
		movfw	downcount_from_6500_lsb
		bz	loc_CODE_4A3
		decf	downcount_from_6500_lsb, f
		b	loc_CODE_4B1
; ---------------------------------------------------------------------------

loc_CODE_4A3:				; CODE XREF: ISR+49Bj
		movfw	downcount_from_6500_msb
		bnz	loc_CODE_4AF
		bsf	bunch_of_timing_flags, 4
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	readable_flags2_lsb, 2
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movlw	64 ; 'd'
		movwf	downcount_from_6500_lsb
		movlw	19
		movwf	downcount_from_6500_msb
		b	loc_CODE_4CA
; ---------------------------------------------------------------------------

loc_CODE_4AF:				; CODE XREF: ISR+4A0j
		decf	downcount_from_6500_msb, f
		comf	downcount_from_6500_lsb, f

loc_CODE_4B1:				; CODE XREF: ISR+492j ISR+499j ...
		btfss	bunch_of_timing_flags, 4
		 b	 loc_CODE_4CA
		btfss	i2c_flags3, 0
		 b	 loc_CODE_4BA
		movlw	64 ; 'd'
		movwf	downcount_from_6500_lsb
		movlw	19
		movwf	downcount_from_6500_msb
		b	loc_CODE_4CA
; ---------------------------------------------------------------------------

loc_CODE_4BA:				; CODE XREF: ISR+4B0j
		movfw	downcount_from_6500_lsb
		bz	loc_CODE_4BF
		decf	downcount_from_6500_lsb, f
		b	loc_CODE_4CA
; ---------------------------------------------------------------------------

loc_CODE_4BF:				; CODE XREF: ISR+4B7j
		movfw	downcount_from_6500_msb
		bnz	loc_CODE_4C8
		bcf	bunch_of_timing_flags, 4
		movlw	64 ; 'd'
		movwf	downcount_from_6500_lsb
		movlw	19
		movwf	downcount_from_6500_msb
		b	loc_CODE_4CA
; ---------------------------------------------------------------------------

loc_CODE_4C8:				; CODE XREF: ISR+4BCj
		decf	downcount_from_6500_msb, f
		comf	downcount_from_6500_lsb, f

loc_CODE_4CA:				; CODE XREF: ISR+4AAj ISR+4AEj ...
		movfw	byte_DATA_34
		bnz	loc_CODE_4CF
		bsf	bunch_of_timing_flags, 3
		b	loc_CODE_4D0
; ---------------------------------------------------------------------------

loc_CODE_4CF:				; CODE XREF: ISR+4C7j
		decf	byte_DATA_34, f

loc_CODE_4D0:				; CODE XREF: ISR+4CAj
		btfsc	bunch_of_timing_flags, 5
		 b	 loc_CODE_4E5
		btfss	BANK0:PORTB, RB1
		 b	 loc_CODE_4D9
		movlw	0E2 ; 'â'       ; set to 1250
		movwf	downcount_from_1250_lsb
		movlw	4
		movwf	downcount_from_1250_msb
		b	loc_CODE_4E5
; ---------------------------------------------------------------------------

loc_CODE_4D9:				; CODE XREF: ISR+4CFj
		movfw	downcount_from_1250_lsb
		bz	loc_CODE_4DE
		decf	downcount_from_1250_lsb, f
		b	loc_CODE_4E5
; ---------------------------------------------------------------------------

loc_CODE_4DE:				; CODE XREF: ISR+4D6j
		movfw	downcount_from_1250_msb
		bnz	loc_CODE_4E3
		bsf	bunch_of_timing_flags, 5
		b	loc_CODE_4E5
; ---------------------------------------------------------------------------

loc_CODE_4E3:				; CODE XREF: ISR+4DBj
		decf	downcount_from_1250_msb, f
		comf	downcount_from_1250_lsb, f

loc_CODE_4E5:				; CODE XREF: ISR+4CDj ISR+4D4j ...
		btfss	bunch_of_timing_flags, 5
		 b	 loc_CODE_4EF
		btfsc	BANK0:PORTB, RB1
		 bcf	 bunch_of_timing_flags,	5
		btfss	BANK0:PORTB, RB5
		 bcf	 bunch_of_timing_flags,	5
		movlw	0E2 ; 'â'
		movwf	downcount_from_1250_lsb
		movlw	4
		movwf	downcount_from_1250_msb

loc_CODE_4EF:				; CODE XREF: ISR+4E2j
		movfw	downcount2_from_1250_lsb
		bz	loc_CODE_4F4
		decf	downcount2_from_1250_lsb, f
		b	loc_CODE_503
; ---------------------------------------------------------------------------

loc_CODE_4F4:				; CODE XREF: ISR+4ECj
		movfw	downcount2_from_1250_msb
		bnz	loc_CODE_501
		btfss	bunch_of_other_flags, 4	; bit0=1=psu on
		 b	 loc_CODE_4FB
		bcf	bunch_of_other_flags, 4	; bit0=1=psu on
		b	loc_CODE_4FC
; ---------------------------------------------------------------------------

loc_CODE_4FB:				; CODE XREF: ISR+4F4j
		bsf	bunch_of_other_flags, 4	; bit0=1=psu on

loc_CODE_4FC:				; CODE XREF: ISR+4F6j
		movlw	0E2 ; 'â'
		movwf	downcount2_from_1250_lsb
		movlw	4
		movwf	downcount2_from_1250_msb
		b	loc_CODE_503
; ---------------------------------------------------------------------------

loc_CODE_501:				; CODE XREF: ISR+4F1j
		decf	downcount2_from_1250_msb, f
		comf	downcount2_from_1250_lsb, f

loc_CODE_503:				; CODE XREF: ISR+4EFj ISR+4FCj
		btfss	bunch_of_other_flags, 6	; bit0=1=psu on
		 b	 loc_CODE_509
		btfss	bunch_of_other_flags, 4	; bit0=1=psu on
		 b	 loc_CODE_50D
		bcf	bunch_of_other_flags, 5	; bit0=1=psu on
		b	loc_CODE_512	; measure fan speed from tach input
; ---------------------------------------------------------------------------

loc_CODE_509:				; CODE XREF: ISR+500j
		btfsc	bunch_of_other_flags, 4	; bit0=1=psu on
		 b	 loc_CODE_510
		bcf	bunch_of_other_flags, 5	; bit0=1=psu on
		b	loc_CODE_512	; measure fan speed from tach input
; ---------------------------------------------------------------------------

loc_CODE_50D:				; CODE XREF: ISR+502j
		bcf	bunch_of_other_flags, 6	; bit0=1=psu on
		bsf	bunch_of_other_flags, 5	; bit0=1=psu on
		b	loc_CODE_512	; measure fan speed from tach input
; ---------------------------------------------------------------------------

loc_CODE_510:				; CODE XREF: ISR+506j
		bsf	bunch_of_other_flags, 6	; bit0=1=psu on
		bsf	bunch_of_other_flags, 5	; bit0=1=psu on

loc_CODE_512:				; CODE XREF: ISR+504j ISR+508j ...
		btfss	BANK0:PORTC, RC0 ; measure fan speed from tach input
		 b	 PortC0_Clear
		bsf	bunch_of_other_flags, 7	; debounce fan tachometer counter
		b	DoneFanRPMCount
; ---------------------------------------------------------------------------

PortC0_Clear:				; CODE XREF: ISR+50Fj
		btfss	bunch_of_other_flags, 7	; bit0=1=psu on
		 b	 DoneFanRPMCount
		bcf	bunch_of_other_flags, 7	; bit0=1=psu on
		incf	FanTachPulsesLSB, f
		bnz	DoneFanRPMCount
		incf	FanTachPulsesMSB, f
		bnz	DoneFanRPMCount
		comf	FanTachPulsesLSB, f
		comf	FanTachPulsesMSB, f

DoneFanRPMCount:			; CODE XREF: ISR+511j ISR+513j ...
		btfss	bunch_of_other_flags, 5	; bit0=1=psu on
		 b	 loc_CODE_532
		movlw	3
		subwf	FanTachPulsesMSB, w
		bc	loc_CODE_52D
		movfw	FanTachPulsesLSB
		movwf	FanTachPulseCopyLSB
		movfw	FanTachPulsesMSB
		movwf	FanTachPulseCopyMSB
		bsf	i2c_flags3, 4
		b	loc_CODE_530
; ---------------------------------------------------------------------------

loc_CODE_52D:				; CODE XREF: ISR+521j
		bsf	i2c_flags3, 4
		clrf	FanTachPulseCopyLSB
		clrf	FanTachPulseCopyMSB

loc_CODE_530:				; CODE XREF: ISR+528j
		clrf	FanTachPulsesLSB
		clrf	FanTachPulsesMSB

loc_CODE_532:				; CODE XREF: ISR+51Ej
		btfss	yet_more_flags,	7
		 b	 loc_CODE_541
		incf	FanTachPulseErrorTimeoutLSB, f ; this is probably a timeout on fan tach	pulses if fan is fucked	up
		movfw	FanTachPulseErrorTimeoutLSB
		sublw	0FA ; 'ú'
		bc	NoFanTachTimeout
		bsf	bunch_of_timing_flags, 1
		clrf	FanTachPulseErrorTimeoutLSB
		incf	FanTachPulseErrorTimeoutMSB, f
		movfw	FanTachPulseErrorTimeoutMSB
		sublw	13
		bc	NoFanTachTimeout
		bcf	yet_more_flags,	7 ; Fan	is not rotating	error! (I think)

loc_CODE_541:				; CODE XREF: ISR+52Fj
		clrf	FanTachPulseErrorTimeoutLSB
		clrf	FanTachPulseErrorTimeoutMSB

NoFanTachTimeout:			; CODE XREF: ISR+533j ISR+53Aj
		bcf	BANK0:STATUS, RP0
		btfss	yet_more_flags,	1
		 b	 loc_CODE_563
		btfss	BANK0:PORTB, RB0
		 b	 dont_turn_psu_off
		nop
		nop
		btfss	BANK0:PORTB, RB0
		 b	 dont_turn_psu_off
		nop
		nop
		btfss	BANK0:PORTB, RB0
		 b	 dont_turn_psu_off
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	readable_flags2_lsb, 4
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	yet_more_flags,	1
		bcf	i2c_flags1, 1	; bit0=psu on,bit1 set every 10k timerIrqs
		movlw	10
		movwf	downcount_from_10000_lsb ; set to 10000
		movlw	27 ; '''
		movwf	downcount_from_10000_msb
		btfss	some_major_flags, 1
		 b	 dont_turn_psu_off
		btfsc	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 dont_turn_psu_off
		bcf	BANK0:INTCON, GIE ; disable interrupts
		bcf	BANK0:PORTB, RB2 ; turn	psu off!
		nop
		bcf	BANK0:PORTC, RC5 ; power off
		bsf	BANK0:INTCON, GIE ; enable interrupts
		b	dont_turn_psu_off
; ---------------------------------------------------------------------------

loc_CODE_563:				; CODE XREF: ISR+541j
		btfsc	BANK0:PORTB, RB0
		 b	 dont_turn_psu_off
		nop
		nop
		btfsc	BANK0:PORTB, RB0
		 b	 dont_turn_psu_off
		nop
		nop
		btfsc	BANK0:PORTB, RB0
		 b	 dont_turn_psu_off
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	readable_flags2_lsb, 4
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	yet_more_flags,	1
		btfss	some_major_flags, 1
		 b	 dont_turn_psu_off
		btfsc	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 dont_turn_psu_off
		bcf	BANK0:INTCON, GIE
		bsf	BANK0:PORTB, RB2
		nop
		bcf	BANK0:PORTC, RC5 ; power off
		bsf	BANK0:INTCON, GIE

dont_turn_psu_off:			; CODE XREF: ISR+543j ISR+547j ...
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		movfw	downcount2_from_10000_lsb
		bz	loc_CODE_580
		decf	downcount2_from_10000_lsb, f
		b	loc_CODE_588
; ---------------------------------------------------------------------------

loc_CODE_580:				; CODE XREF: ISR+578j
		movfw	downcount2_from_10000_msb
		bnz	loc_CODE_586
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bsf	yet_more_flags,	2 ; counter wrapped
		b	loc_CODE_588
; ---------------------------------------------------------------------------
; assume bank =	2

loc_CODE_586:				; CODE XREF: ISR+57Dj
		decf	downcount2_from_10000_msb, f
		comf	downcount2_from_10000_lsb, f
; assume bank =	0

loc_CODE_588:				; CODE XREF: ISR+57Bj ISR+581j
		bcf	BANK0:STATUS, RP1
		movfw	some_other_downcounter2_lsb
		bz	loc_CODE_58E
		decf	some_other_downcounter2_lsb, f
		b	loc_CODE_595
; ---------------------------------------------------------------------------

loc_CODE_58E:				; CODE XREF: ISR+586j
		movfw	some_other_downcounter2_msb
		bnz	loc_CODE_593
		bsf	yet_more_flags,	4 ; counter wrapped
		b	loc_CODE_595
; ---------------------------------------------------------------------------

loc_CODE_593:				; CODE XREF: ISR+58Bj
		decf	some_other_downcounter2_msb, f
		comf	some_other_downcounter2_lsb, f

loc_CODE_595:				; CODE XREF: ISR+589j ISR+58Ej
		btfss	some_major_flags, 1
		 b	 loc_CODE_5A7
		btfsc	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 loc_CODE_59F
		btfsc	yet_more_flags,	0
		 b	 loc_CODE_5A7
		bsf	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		nop
		bsf	bunch_of_other_flags, 0	; bit0=1=psu on
		bcf	bunch_of_timing_flags, 0

loc_CODE_59F:				; CODE XREF: ISR+594j
		btfsc	yet_more_flags,	0
		 b	 loc_CODE_5A7
		btfss	bunch_of_timing_flags, 3
		 b	 loc_CODE_5A7
		bsf	BANK0:PORTB, RB1
		bsf	some_major_flags, 6
		bcf	some_major_flags, 1
		bsf	some_major_flags, 0

loc_CODE_5A7:				; CODE XREF: ISR+592j ISR+596j ...
		bcf	BANK0:INTCON, GIE
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movfw	downcount_from_2492_lsb
		bz	loc_CODE_5AF
		decf	downcount_from_2492_lsb, f
		b	downcounter_not_expired1
; ---------------------------------------------------------------------------

loc_CODE_5AF:				; CODE XREF: ISR+5A7j
		movfw	downcount_from_2492_msb
		bnz	downcounter_not_expired
		movlw	0BC ; '¼'
		movwf	downcount_from_2492_lsb
		movlw	9
		movwf	downcount_from_2492_msb	; reset	downcounter to 0x9bc (2492)
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		incf	uptime_seconds_msb, w
		bnz	loc_CODE_5BE
		incf	uptime_seconds_lsb, w
		bnz	loc_CODE_5BE
		b	downcounter_not_expired1
; ---------------------------------------------------------------------------

loc_CODE_5BE:				; CODE XREF: ISR+5B4j ISR+5B7j
		incf	uptime_seconds_lsb, f
		skpnz
		 incf	 uptime_seconds_msb, f
		movfw	WattsInLSB
		addwf	total_watts_in_byte0, f
		bnc	loc_CODE_5CB
		incf	total_watts_in_byte1, f
		bnz	loc_CODE_5CB
		incf	total_watts_in_byte2, f
		skpnz
		 incf	 total_watts_in_byte3, f

loc_CODE_5CB:				; CODE XREF: ISR+5BFj ISR+5C2j
		movfw	WattsInMSB
		addwf	total_watts_in_byte1, f
		bnc	downcounter_not_expired1
		incf	total_watts_in_byte2, f
		skpnz
		 incf	 total_watts_in_byte3, f
		b	downcounter_not_expired1
; ---------------------------------------------------------------------------
; assume bank =	3

downcounter_not_expired:		; CODE XREF: ISR+5ACj
		decf	downcount_from_2492_msb, f
		comf	downcount_from_2492_lsb, f
; assume bank =	1

downcounter_not_expired1:		; CODE XREF: ISR+5AAj ISR+5B9j ...
		bsf	BANK1:INTCON, GIE
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	BANK0:STATUS, RP1
		btfsc	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 loc_CODE_607
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movfw	downcounter_from4987_lsb
		bz	loc_CODE_5E1
		decf	downcounter_from4987_lsb, f
		b	loc_CODE_607
; ---------------------------------------------------------------------------

loc_CODE_5E1:				; CODE XREF: ISR+5D9j
		movfw	downcounter_from4987_byte1
		bnz	loc_CODE_605
		movlw	7B ; '{'
		movwf	downcounter_from4987_lsb
		movlw	13
		movwf	downcounter_from4987_byte1
		incf	seconds_uptime_wraps_at_60, f
		movfw	seconds_uptime_wraps_at_60
		sublw	3C ; '<'
		bnz	loc_CODE_607
		clrf	seconds_uptime_wraps_at_60
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		incf	possibly_total_mins_uptime_byte0, f
		skpnz
		 incf	 possibly_total_mins_uptime_byte1, f
		skpnz
		 incf	 possibly_total_mins_uptime_byte2, f
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		incf	minutes_uptime_counter,	f
		movfw	minutes_uptime_counter
		sublw	3C ; '<'        ; wrap at 60
		bnz	loc_CODE_607
		clrf	minutes_uptime_counter
		incf	hours_uptime_counter, f
		movfw	hours_uptime_counter
		sublw	18		; wrap at 24
		bnz	loc_CODE_607
		clrf	hours_uptime_counter ; whole day
		bsf	logging_trigger_flags, 1 ; bit1	is set once every 24hrs
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		decf	possibly_total_mins_uptime_byte0, f
		b	loc_CODE_607
; ---------------------------------------------------------------------------
; assume bank =	3

loc_CODE_605:				; CODE XREF: ISR+5DEj
		decf	downcounter_from4987_byte1, f
		comf	downcounter_from4987_lsb, f
; assume bank =	1

loc_CODE_607:				; CODE XREF: ISR+5D5j ISR+5DCj ...
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	BANK0:STATUS, RP1
		btfsc	BANK0:PORTC, RC4
		 b	 loc_CODE_629
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		movfw	i2c_timeout_counter_lsb
		bz	loc_CODE_611
		decf	i2c_timeout_counter_lsb, f
		b	loc_CODE_633
; ---------------------------------------------------------------------------

loc_CODE_611:				; CODE XREF: ISR+609j
		movfw	i2c_timeout_counter_msb
		bnz	loc_CODE_62F
		bcf	BANK2:STATUS, RP0 ; reset i2c in case of error
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bcf	BANK0:SSPCON, SSPEN
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	BANK1:SSPSTAT
		bcf	BANK1:TRISC, TRISC4
		bcf	BANK1:TRISC, TRISC3
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:PORTC, RC4
		bsf	BANK0:PORTC, RC3
		movlw	36 ; '6'
		movwf	BANK0:SSPCON
		movfw	BANK0:SSPBUF
		clrf	BANK0:SSPBUF
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:TRISC, TRISC4
		bsf	BANK1:TRISC, TRISC3
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	bunch_of_other_flags, 3	; bit0=1=psu on
		bcf	bunch_of_other_flags, 2	; bit0=1=psu on
		bcf	i2c_flags2, 0

loc_CODE_629:				; CODE XREF: ISR+606j
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		movlw	26 ; '&'
		movwf	i2c_timeout_counter_msb
		movlw	0F9 ; 'ù'
		movwf	i2c_timeout_counter_lsb
		b	loc_CODE_633
; ---------------------------------------------------------------------------

loc_CODE_62F:				; CODE XREF: ISR+60Ej
		bcf	BANK2:STATUS, RP0
		bsf	BANK2:STATUS, RP1
		decf	i2c_timeout_counter_msb, f
		comf	i2c_timeout_counter_lsb, f

loc_CODE_633:				; CODE XREF: ISR+60Cj ISR+62Aj
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:ADCON0, 1
		bcf	BANK0:INTCON, GIE
		bsf	BANK0:INTCON, TMR0IE
		bcf	BANK0:INTCON, TMR0IF
		bcf	BANK0:INTCON, GIE
		bcf	BANK0:STATUS, RP0
		bcf	BANK0:STATUS, RP1
		movfw	tirq_store_plath
		movwf	BANK0:PCLATH
; assume pclath	= 0
		movfw	tirq_store_status
		movwf	BANK0:STATUS
		swapf	tirq_store_w, f
		swapf	tirq_store_w, w
		retfie
; END OF FUNCTION CHUNK	FOR ISR

; =============== S U B	R O U T	I N E =======================================


RESET_0:				; CODE XREF: RESETj

; FUNCTION CHUNK AT 1000 SIZE 0000059A BYTES
; FUNCTION CHUNK AT 1800 SIZE 00000282 BYTES

		bcf	BANK0:STATUS, RP1
		bcf	BANK0:STATUS, RP0
		clrf	fan_speed
		clrf	other_min_fan_speed
		movlw	28 ; '('
		movwf	BANK0:CCPR1L	; fan speed PWM	output
		movwf	count_up_to_200
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		clrf	byte_DATA_190
		bcf	byte_DATA_191, 0

HardwareSetup:				; CODE XREF: RESET_0+B8j RESET_0+BCj ...
		clrwdt
		bcf	BANK3:INTCON, GIE
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movlw	3F ; '?'
		movwf	BANK0:PORTA
		movlw	1E
		movwf	BANK0:PORTB
		movlw	0B9 ; '¹'
		movwf	BANK0:PORTC
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movlw	3F ; '?'
		movwf	BANK1:TRISA
		movlw	0F9 ; 'ù'
		movwf	BANK1:TRISB
		movlw	99 ; ''
		movwf	BANK1:TRISC
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		clrf	BANK0:STATUS
		movlw	downcount2_from_1250_lsb
		movwf	BANK0:FSR

loop1:					; CODE XREF: RESET_0+23j
		clrf	BANK0:INDF
		incf	BANK0:FSR, f
		btfss	BANK0:FSR, 7
		 b	 loop1
		movlw	yet_yet_more_flags
		movwf	BANK0:FSR

loop2:					; CODE XREF: RESET_0+28j
		clrf	BANK0:INDF
		incfsz	BANK0:FSR, f
		 b	 loop2
		bsf	BANK0:STATUS, IRP
		movlw	BANK0_T1CON
		movwf	BANK0:FSR

loop3:					; CODE XREF: RESET_0+2Fj
		clrf	BANK0:INDF
		incf	BANK0:FSR, f
		btfss	BANK0:FSR, 7
		 b	 loop3
		movlw	BANK1_PR2
		movwf	BANK0:FSR

loop4:					; CODE XREF: RESET_0+34j
		clrf	BANK0:INDF
		incfsz	BANK0:FSR, f
		 b	 loop4
		bcf	BANK0:STATUS, IRP
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	BANK1:SSPSTAT
		movlw	0B0 ; '°'
		movwf	BANK1:SSPADD	; set i2c address to 0xb0
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movlw	36 ; '6'
		movwf	BANK0:SSPCON
		bcf	BANK0:PIR1, SSPIF
		bcf	BANK0:STATUS, RP0
		movlw	86 ; ''
		movwf	BANK0:TMR0
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movlw	82 ; ''
		movwf	BANK1:OPTION
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	BANK0:INTCON, TMR0IF
		bcf	BANK0:INTCON, INTF
		movfw	BANK0:RCREG
		clrf	BANK0:RCREG
		clrf	BANK0:RCSTA
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	BANK1:TXSTA
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movlw	90 ; ''
		movwf	BANK0:RCSTA
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movlw	40 ; '@'
		movwf	BANK1:SPBRG
		movlw	20 ; ' '
		movwf	BANK1:TXSTA
		movlw	10
		movwf	BANK1:ADCON1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movlw	80 ; ''
		movwf	BANK0:ADCON0
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		clrf	BANK3:RESERVED0189
		movlw	0F
		movwf	BANK3:RESERVED0188
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		clrf	BANK0:TMR2
		clrf	BANK0:CCPR1H
		movlw	0
		movwf	BANK0:T2CON
		movlw	0C
		movwf	BANK0:CCP1CON
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	BANK1:TRISC, TRISC2
		movlw	0C7 ; 'Ç'
		movwf	BANK1:PR2
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:T2CON, TMR2ON
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:INTCON, PEIE
		bsf	BANK1:INTCON, TMR0IE
		bsf	BANK1:PIE1, SSPIE
		bsf	readable_flags2_lsb, 4
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	yet_more_flags,	1
		movlw	0FA ; 'ú'
		movwf	downcount_from_500_250_lsb
		movlw	0
		movwf	downcount_from_500_250_msb
		movlw	64 ; 'd'
		movwf	downcount_from_100_lsb
		movlw	0
		movwf	downcount_from_100_msb
		movlw	64 ; 'd'
		movwf	downcount_from_6500_lsb
		movlw	19
		movwf	downcount_from_6500_msb
		movlw	1
		movwf	byte_DATA_34
		movlw	0E2 ; 'â'
		movwf	downcount_from_1250_lsb
		movlw	4
		movwf	downcount_from_1250_msb
		movlw	3
		movwf	byte_DATA_3C
		movwf	byte_DATA_3B
		movwf	byte_DATA_2D
		movlw	0E2 ; 'â'
		movwf	downcount2_from_1250_lsb
		movlw	4
		movwf	downcount2_from_1250_msb
		movlw	30 ; '0'
		movwf	some_other_downcounter2_lsb
		movlw	75 ; 'u'
		movwf	some_other_downcounter2_msb
		movlw	0
		movwf	byte_DATA_25
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		movlw	10
		movwf	downcount2_from_10000_lsb
		movlw	27 ; '''
		movwf	downcount2_from_10000_msb
		movlw	10
		movwf	byte_DATA_112
		movlw	10
		movwf	byte_DATA_115
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movlw	0BC ; '¼'
		movwf	downcount_from_2492_lsb
		movlw	9
		movwf	downcount_from_2492_msb
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		bcf	i2c_flags1, 1	; bit0=psu on,bit1 set every 10k timerIrqs
		movlw	10
		movwf	downcount_from_10000_lsb
		movlw	27 ; '''        ; set to 10000
		movwf	downcount_from_10000_msb
		movlw	0C4 ; 'Ä'
		movwf	downcount_from_2500_lsb	; set to 2500
		movlw	9
		movwf	downcount_from_2500_msb
		movlw	28 ; '('
		movwf	BANK0:CCPR1L	; fan speed PWM	output
		movlw	20 ; ' '
		movwf	byte_DATA_45
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	byte_DATA_190
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	some_major_flags, 0
		btfss	BANK0:PORTB, RB3
		 b	 HardwareSetup
		nop
		nop
		btfss	BANK0:PORTB, RB3
		 b	 HardwareSetup
		nop
		nop
		btfss	BANK0:PORTB, RB3
		 b	 HardwareSetup
		btfss	BANK0:PORTA, RA4 ; adjust I2c address based on address inputs (PA4,PA5,PE3)
		 b	 loc_CODE_70B
		bsf	bunch_of_other_flags, 3	; bit0=1=psu on
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:SSPADD, 1	; adjust i2c address (bit 0)
		bcf	BANK1:STATUS, RP0
; assume bank =	0

loc_CODE_70B:				; CODE XREF: RESET_0+C2j
		btfss	BANK0:PORTA, RA5
		 b	 loc_CODE_711
		bsf	bunch_of_other_flags, 2	; bit0=1=psu on
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:SSPADD, 2	; adjust i2c address (bit 1)
		bcf	BANK1:STATUS, RP0
; assume bank =	0

loc_CODE_711:				; CODE XREF: RESET_0+C8j
		btfss	BANK0:PORTE, 3
		 b	 loc_CODE_717
		bsf	i2c_flags2, 0
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:SSPADD, 3	; adjust i2c address (bit 2)
		bcf	BANK1:STATUS, RP0
; assume bank =	0

loc_CODE_717:				; CODE XREF: RESET_0+CEj
		movfw	fan_speed
		movwf	BANK0:CCPR1L	; write	fan speed to PWM ctrl reg
		bcf	BANK0:STATUS, RP0
		bsf	BANK0:ADCON0, ADON
		bsf	BANK0:ADCON0, 1
		bsf	BANK0:INTCON, GIE

loc_CODE_71D:				; CODE XREF: RESET_0+143Dj
		bcf	BANK0:STATUS, RP1
		bcf	BANK0:STATUS, RP0
		movlw	1D
		subwf	byte_DATA_45, w
		bc	loc_CODE_726
		movlw	0
		movwf	byte_DATA_68
		b	loc_CODE_72C
; ---------------------------------------------------------------------------

loc_CODE_726:				; CODE XREF: RESET_0+DDj
		movwf	byte_DATA_68
		sublw	0BC ; '¼'       ; clamp to max 0xbc
		bc	loc_CODE_72C
		movlw	0BC ; '¼'
		movwf	byte_DATA_68

loc_CODE_72C:				; CODE XREF: RESET_0+E1j RESET_0+E4j
		movlw	1
		movwf	BANK0:PCLATH
; assume pclath	= 1
		movfw	byte_DATA_68
		call	SomeADCLookup
		clrf	BANK0:PCLATH
; assume pclath	= 0
		movwf	internal_temperature
		movlw	1D
		subwf	byte_DATA_5E, w
		bc	loc_CODE_739
		movlw	0
		movwf	byte_DATA_68
		b	loc_CODE_73F
; ---------------------------------------------------------------------------

loc_CODE_739:				; CODE XREF: RESET_0+F0j
		movwf	byte_DATA_68
		sublw	0BC ; '¼'
		bc	loc_CODE_73F
		movlw	0BC ; '¼'
		movwf	byte_DATA_68

loc_CODE_73F:				; CODE XREF: RESET_0+F4j RESET_0+F7j
		movlw	1
		movwf	BANK0:PCLATH
; assume pclath	= 1
		movfw	byte_DATA_68
		call	SomeADCLookup
		clrf	BANK0:PCLATH
; assume pclath	= 0
		movwf	another_temperature_maybe_external
		btfss	some_major_flags, 1
		 b	 loc_CODE_78A
		btfss	yet_more_flags,	6
		 b	 loc_CODE_78A
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	byte_DATA_F0

loc_CODE_74B:				; CODE XREF: RESET_0+112j
		movlw	0
		movwf	BANK1:PCLATH
		movfw	byte_DATA_F0
		call	sub_CODE_7B
		clrf	BANK1:PCLATH
		subwf	input_volts_related, w
		bnc	loc_CODE_75A
		incf	byte_DATA_F0, f
		movfw	byte_DATA_F0
		sublw	4
		bc	loc_CODE_74B
		movlw	5
		movwf	byte_DATA_F0

loc_CODE_75A:				; CODE XREF: RESET_0+10Dj
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfsc	i2c_flags3, 0
		 b	 loc_CODE_774
		movlw	0
		movwf	BANK0:PCLATH
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movfw	byte_DATA_F0
		call	sub_CODE_88
		clrf	BANK1:PCLATH
		subwf	byte_DATA_F2, w
		bnc	loc_CODE_770
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		incf	byte_DATA_1AC, f
		movfw	byte_DATA_1AC
		sublw	0C8 ; 'È'
		bc	loc_CODE_78A
		clrf	byte_DATA_1AB
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	i2c_flags3, 0
; assume bank =	1

loc_CODE_770:				; CODE XREF: RESET_0+120j
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		bsf	BANK3:STATUS, RP0
		clrf	byte_DATA_1AC
		b	loc_CODE_78A
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_774:				; CODE XREF: RESET_0+118j
		movlw	0
		movwf	BANK0:PCLATH
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movfw	byte_DATA_F0
		call	sub_CODE_81
		clrf	BANK1:PCLATH
		subwf	byte_DATA_F2, w
		bc	loc_CODE_787
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		incf	byte_DATA_1AB, f
		movfw	byte_DATA_1AB
		sublw	0C8 ; 'È'
		bc	loc_CODE_78A
		clrf	byte_DATA_1AC
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	i2c_flags3, 0
; assume bank =	1

loc_CODE_787:				; CODE XREF: RESET_0+137j
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		bsf	BANK3:STATUS, RP0
		clrf	byte_DATA_1AB

loc_CODE_78A:				; CODE XREF: RESET_0+102j RESET_0+104j ...
		bsf	BANK3:PCLATH, 3
; assume pclath	= 8
		b	ManageFanSpeed
; ---------------------------------------------------------------------------
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF

ManageFanSpeed:				; CODE XREF: RESET_0+147j
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfsc	some_major_flags, 1
		 b	 loc_CODE_812
		movlw	26 ; '&'
		movwf	fan_speed
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		btfsc	byte_DATA_191, 0
		 b	 loc_CODE_821
		bsf	byte_DATA_191, 0
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movlw	26 ; '&'
		movwf	BANK0:CCPR1L	; fan speed PWM	output
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movwf	minimum_fan_speed
		b	loc_CODE_821
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_812:				; CODE XREF: RESET_0+1BFj
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		bcf	byte_DATA_191, 0
		bsf	BANK3:STATUS, RP1
		bsf	BANK3:STATUS, RP0
		movfw	byte_DATA_190
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movwf	fan_speed
		movfw	fan_speed
		subwf	other_min_fan_speed, w
		bnc	loc_CODE_821
		movfw	other_min_fan_speed
		movwf	fan_speed

loc_CODE_821:				; CODE XREF: RESET_0+1C5j RESET_0+1CDj ...
		bcf	BANK0:STATUS, RP1
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		btfss	interesting_ctrl_byte_set_cmd3b, 6
		 b	 loc_CODE_82E
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	fan_speed
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		subwf	min_fan_speed_if_cm3b_bit6_set,	w
		bnc	loc_CODE_831
		movfw	min_fan_speed_if_cm3b_bit6_set
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movwf	fan_speed
; assume bank =	1

loc_CODE_82E:				; CODE XREF: RESET_0+1E0j
		bsf	BANK1:STATUS, RP0
		bcf	readable_flags_lsb, 6
		b	loc_CODE_832
; ---------------------------------------------------------------------------

loc_CODE_831:				; CODE XREF: RESET_0+1E5j
		bsf	readable_flags_lsb, 6

loc_CODE_832:				; CODE XREF: RESET_0+1ECj
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	BANK0:CCPR1L	; fan speed PWM	output
		sublw	28 ; '('
		bc	fan_speed_over_1000
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movfw	reported_fan_speed_msb
		sublw	3
		bnc	fan_speed_over_1000
		bnz	loc_CODE_84B
		movfw	reported_fan_speed_lsb
		sublw	0E8 ; 'è'
		bc	loc_CODE_84B

fan_speed_over_1000:			; CODE XREF: RESET_0+1F1j RESET_0+1F6j
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	fan_speed
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		subwf	minimum_fan_speed, w
		bnc	loc_CODE_84B
		movfw	minimum_fan_speed
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movwf	fan_speed
; assume bank =	1

loc_CODE_84B:				; CODE XREF: RESET_0+1F8j RESET_0+1FCj ...
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	BANK0:CCPR1L	; adjust fan speed slowly
		subwf	fan_speed, w
		bz	done_fan_speed_adj
		movfw	BANK0:CCPR1L	; fan speed PWM	output
		subwf	fan_speed, w
		bc	loc_CODE_865
		tstf	BANK0:CCPR1L	; fan speed PWM	output
		bz	done_fan_speed_adj
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		incf	fan_speed_adj_timer_lsb, f
		tstf	fan_speed_adj_timer_lsb
		bnz	done_fan_speed_adj
		incf	fan_speed_adj_timer_msb, f
		movfw	fan_speed_adj_timer_msb
		sublw	0A		; counts to 0xa00
		bc	done_fan_speed_adj
		clrf	fan_speed_adj_timer_msb
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		decf	BANK0:CCPR1L, f	; slow down fan	(slowly)
		b	done_fan_speed_adj
; ---------------------------------------------------------------------------

loc_CODE_865:				; CODE XREF: RESET_0+20Ej
		movfw	BANK0:CCPR1L	; fan speed PWM	output
		sublw	0C7 ; 'Ç'       ; max fan speed (199)
		bc	not_max_fan_speed
		movlw	0C7 ; 'Ç'       ; clamp to max
		movwf	BANK0:CCPR1L	; fan speed PWM	output
		b	done_fan_speed_adj
; ---------------------------------------------------------------------------

not_max_fan_speed:			; CODE XREF: RESET_0+223j
		incf	BANK0:CCPR1L, f	; fan speed PWM	output

done_fan_speed_adj:			; CODE XREF: RESET_0+20Aj RESET_0+211j ...
		bcf	BANK0:STATUS, RP0
		bcf	BANK0:STATUS, RP1
		btfsc	BANK0:PORTB, RB3
		 b	 loc_CODE_880
		nop
		nop
		btfsc	BANK0:PORTB, RB3
		 b	 loc_CODE_880
		nop
		nop
		btfsc	BANK0:PORTB, RB3
		 b	 loc_CODE_880
		movfw	BANK0:CCPR1L	; fan speed PWM	output
		movwf	fan_speed
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		bsf	byte_DATA_191, 0
		bcf	BANK3:PCLATH, 3
; assume pclath	= 0
		b	HardwareSetup
; ---------------------------------------------------------------------------
; assume bank =	0
; assume pclath	= 8

loc_CODE_880:				; CODE XREF: RESET_0+22Cj RESET_0+230j ...
		bcf	BANK0:STATUS, RP1
		bcf	BANK0:STATUS, RP0
		btfsc	i2c_flags3, 3
		 b	 loc_CODE_975
		bsf	i2c_flags3, 3
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		clrf	eeprom_log_addr_counter
		bcf	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		bcf	BANK3:INTCON, GIE
		movlw	1F
		call	EEPROM_Read
		bsf	BANK3:STATUS, RP0
		movwf	eeprom_log_addr_base
		movlw	1E
		call	EEPROM_Read
		bsf	BANK3:STATUS, RP0
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movwf	some_eeprom_log_counter
		movlw	19
		call	EEPROM_Read
		bsf	BANK1:STATUS, RP0
		bcf	BANK1:STATUS, RP1
		movwf	possibly_total_mins_uptime_byte0
		movlw	1A
		call	EEPROM_Read
		bsf	BANK1:STATUS, RP0
		bcf	BANK1:STATUS, RP1
		movwf	possibly_total_mins_uptime_byte1
		movlw	1B
		call	EEPROM_Read
		bsf	BANK1:STATUS, RP0
		bcf	BANK1:STATUS, RP1
		movwf	possibly_total_mins_uptime_byte2
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	BANK0:PORTB, RB7
		 b	 loc_CODE_8AC
		nop
		btfss	BANK0:PORTB, RB7
		 b	 loc_CODE_8AC
		nop
		btfss	BANK0:PORTB, RB7
		 b	 loc_CODE_8AC
		b	loc_CODE_8C2
; ---------------------------------------------------------------------------

loc_CODE_8AC:				; CODE XREF: RESET_0+260j RESET_0+263j ...
		bcf	BANK0:STATUS, RP0
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, IRP
		movlw	byte_DATA_50
		movwf	BANK2:FSR
		movlw	20 ; ' '
		movwf	byte_DATA_14E

loc_CODE_8B3:				; CODE XREF: RESET_0+276j
		movfw	byte_DATA_14E
		call	EEPROM_Read
		movwf	BANK2:INDF
		incf	byte_DATA_14E, f
		incf	BANK2:FSR, f
		movfw	byte_DATA_14E
		sublw	2D ; '-'
		bnz	loc_CODE_8B3
		bsf	byte_DATA_125, 3
		bcf	BANK2:STATUS, RP0
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bcf	BANK0:PORTB, RB7
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	BANK1:TRISB, TRISB7
; assume bank =	0

loc_CODE_8C2:				; CODE XREF: RESET_0+267j
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movlw	0
		movwf	byte_DATA_1D0
		movlw	1
		movwf	byte_DATA_1D1
		movlw	0B2 ; '²'
		movwf	byte_DATA_1D2
		movlw	80 ; ''
		movwf	byte_DATA_1D3
		movlw	0
		movwf	byte_DATA_1D4
		movlw	1
		movwf	byte_DATA_1D5
		movlw	6C ; 'l'
		movwf	byte_DATA_1D6
		movlw	80 ; ''
		movwf	byte_DATA_1D7
		movlw	0
		movwf	byte_DATA_1D8
		movlw	1
		movwf	byte_DATA_1D9
		movlw	45 ; 'E'
		movwf	byte_DATA_1DA
		movlw	80 ; ''
		movwf	byte_DATA_1DB
		movlw	0
		movwf	byte_DATA_1DC
		movlw	1
		movwf	byte_DATA_1DD
		movlw	6
		movwf	byte_DATA_1DE
		movlw	80 ; ''
		movwf	byte_DATA_1DF
		movlw	0FC ; 'ü'
		movwf	byte_DATA_1E0
		movlw	0
		movwf	byte_DATA_1E1
		movlw	2D ; '-'
		movwf	byte_DATA_1E2
		movlw	0
		movwf	byte_DATA_1E3
		movlw	97 ; ''
		movwf	byte_DATA_1E4
		movlw	2
		movwf	byte_DATA_1E5
		movlw	91 ; ''
		movwf	byte_DATA_1E6
		movlw	3
		movwf	byte_DATA_1E7
		movlw	6A ; 'j'
		movwf	byte_DATA_1E8
		movlw	4
		movwf	byte_DATA_1E9
		movlw	6C ; 'l'
		movwf	byte_DATA_1EA
		movlw	0E
		movwf	byte_DATA_1EB
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		bsf	BANK2:STATUS, RP1
		movlw	0
		movwf	byte_DATA_12D
		movlw	1
		movwf	byte_DATA_12E
		movlw	4
		movwf	byte_DATA_12F
		movlw	0
		movwf	byte_DATA_130
		movlw	1
		movwf	byte_DATA_131
		movlw	4
		movwf	byte_DATA_132
		movlw	0
		movwf	byte_DATA_133
		movlw	1
		movwf	byte_DATA_134
		movlw	0
		movwf	byte_DATA_135
		movlw	0
		movwf	byte_DATA_147
		movlw	1
		movwf	byte_DATA_148
		movlw	86 ; ''
		movwf	byte_DATA_149
		movlw	49 ; 'I'
		movwf	byte_DATA_136
		movlw	0
		movwf	byte_DATA_137
		movlw	5E ; '^'
		movwf	byte_DATA_138
		movlw	0
		movwf	byte_DATA_139
		movlw	35 ; '5'
		movwf	byte_DATA_14A
		movlw	1
		movwf	byte_DATA_14B
		movlw	0
		movwf	byte_DATA_13A
		movlw	1
		movwf	byte_DATA_13B
		movlw	2
		movwf	byte_DATA_13C
		movlw	0
		movwf	byte_DATA_13D
		movlw	1
		movwf	byte_DATA_13E
		movlw	81 ; ''
		movwf	byte_DATA_13F
		movlw	0
		movwf	byte_DATA_140
		movlw	1
		movwf	byte_DATA_141
		movlw	81 ; ''
		movwf	byte_DATA_142
		movlw	36 ; '6'
		movwf	byte_DATA_143
		movlw	0
		movwf	byte_DATA_144
		movlw	0CA ; 'Ê'
		movwf	byte_DATA_145
		movlw	0
		movwf	byte_DATA_146
		bcf	BANK2:STATUS, IRP
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movlw	1C
		movwf	counter_for_eeprom_logging
		clrf	tag_for_eeprom_logging
		movfw	counter_for_eeprom_logging
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	EEPROM_Write_Addr
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	tag_for_eeprom_logging
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	EEPROM_Write_Data
		call	EEPROM_Write
		bsf	BANK3:STATUS, RP0
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		clrf	counter_for_eeprom_logging
		bsf	BANK1:INTCON, GIE
		bsf	BANK1:STATUS, RP0
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movlw	7B ; '{'
		movwf	downcounter_from4987_lsb
		movlw	13
		movwf	downcounter_from4987_byte1
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movlw	21 ; '!'
		movwf	byte_DATA_D6
		movlw	0
		movwf	voltage_threshold1_lsb ; init to 2560
		movlw	0A
		movwf	voltage_threshold1_msb
		movlw	0C0 ; 'À'
		movwf	voltage_threshold3_lsb ; init to 8640
		movlw	21 ; '!'
		movwf	voltage_threshold3_msb
		movlw	0
		movwf	byte_DATA_EA	; init to 2816
		movlw	0B
		movwf	byte_DATA_EB
		movlw	0
		movwf	byte_DATA_EC	; init to 3328
		movlw	0D
		movwf	byte_DATA_ED
		movlw	80 ; ''
		movwf	byte_DATA_EE	; set ee/ef to 3200
		movlw	0C
		movwf	byte_DATA_EF
		movlw	0C0 ; 'À'
		movwf	byte_DATA_A5
		movlw	12
		movwf	byte_DATA_A6
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		movlw	26 ; '&'
		movwf	i2c_timeout_counter_msb
		movlw	0F9 ; 'ù'
		movwf	i2c_timeout_counter_lsb
; assume bank =	0

loc_CODE_975:				; CODE XREF: RESET_0+23Fj
		bcf	BANK0:STATUS, RP0
		bcf	BANK0:STATUS, RP1
		clrwdt
		bsf	BANK0:INTCON, GIE
		btfss	some_major_flags, 0
		 b	 loc_CODE_9D4
		btfss	BANK0:PORTB, RB4
		 b	 loc_CODE_9D4
		btfss	bunch_of_timing_flags, 0
		 b	 loc_CODE_9D4
		btfss	BANK0:PORTB, RB5
		 b	 loc_CODE_9D4
		btfss	BANK0:PORTB, RB0
		 b	 loc_CODE_9D4
		bcf	BANK0:PORTB, RB1
		bsf	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		bcf	BANK0:INTCON, GIE
		bsf	BANK0:PORTB, RB2
		nop
		bsf	BANK0:PORTC, RC5 ; psu on
		bsf	BANK0:INTCON, GIE
		movlw	64 ; 'd'
		movwf	downcount_from_100_lsb
		movlw	0
		movwf	downcount_from_100_msb
		bcf	bunch_of_timing_flags, 2
		movlw	0C4 ; 'Ä'
		movwf	downcount_from_2500_lsb
		movlw	9
		movwf	downcount_from_2500_msb
		bcf	yet_more_flags,	6
		bcf	bunch_of_timing_flags, 5
		movlw	0E2 ; 'â'
		movwf	downcount_from_1250_lsb
		movlw	4
		movwf	downcount_from_1250_msb
		bcf	bunch_of_timing_flags, 4
		movlw	64 ; 'd'
		movwf	downcount_from_6500_lsb
		movlw	19
		movwf	downcount_from_6500_msb
		bcf	i2c_flags3, 0
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		clrf	byte_DATA_1AB
		clrf	byte_DATA_1AC
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	yet_more_flags,	5
		btfsc	i2c_flags2, 7
		 b	 loc_CODE_9AD
		bcf	BANK0:PORTC, RC1
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	interesting_ctrl_byte_set_cmd3b, 5
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	yet_more_flags,	5

loc_CODE_9AD:				; CODE XREF: RESET_0+363j
		bcf	bunch_of_other_flags, 1	; bit0=1=psu on
		bcf	i2c_flags2, 3
		bcf	i2c_flags2, 5
		bcf	i2c_flags2, 6
		bsf	bunch_of_other_flags, 0	; bit0=1=psu on
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	readable_flags2_lsb
		clrf	byte_DATA_B3
		clrf	status_flags_including_temperature
		clrf	byte_DATA_B5
		clrf	byte_DATA_AB
		bcf	byte_DATA_A1, 1
		bcf	byte_DATA_A4, 0
		bsf	BANK1:STATUS, RP0
		btfsc	surprise_more_flags, 5
		 b	 loc_CODE_9C9
		movfw	interesting_ctrl_byte_set_cmd3b
		andlw	7
		xorlw	1
		bnz	bits_not_1
		bcf	BANK1:INTCON, GIE
		movlw	23 ; '#'        ; set to 9000
		movwf	fan_related_msb
		movlw	28 ; '('
		movwf	fan_related_lsb
		bsf	BANK1:INTCON, GIE
		b	bits_not_1
; ---------------------------------------------------------------------------

loc_CODE_9C9:				; CODE XREF: RESET_0+378j
		bcf	BANK1:INTCON, GIE
		movfw	byte_DATA_D3
		movwf	fan_related_msb
		movfw	byte_DATA_D2
		movwf	fan_related_lsb
		bsf	BANK1:INTCON, GIE

bits_not_1:				; CODE XREF: RESET_0+37Cj RESET_0+384j
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	i2c_flags2, 7
		bcf	some_major_flags, 6
		bcf	some_major_flags, 0
		bsf	some_major_flags, 1

loc_CODE_9D4:				; CODE XREF: RESET_0+336j RESET_0+338j ...
		btfss	some_major_flags, 1
		 b	 loc_CODE_A8D
		clrwdt
		bsf	BANK0:INTCON, GIE
		btfsc	BANK0:PORTB, RB5
		 b	 loc_CODE_9E8
		nop
		nop
		btfsc	BANK0:PORTB, RB5
		 b	 loc_CODE_9E8
		nop
		nop
		btfsc	BANK0:PORTB, RB5
		 b	 loc_CODE_9E8
		bsf	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		nop
		bsf	some_major_flags, 6
		bcf	some_major_flags, 1
		bsf	some_major_flags, 3
		b	loc_CODE_AA7
; ---------------------------------------------------------------------------

loc_CODE_9E8:				; CODE XREF: RESET_0+395j RESET_0+399j ...
		btfsc	BANK0:PORTB, RB4
		 b	 loc_CODE_A08
		nop
		nop
		btfsc	BANK0:PORTB, RB4
		 b	 loc_CODE_A08
		nop
		nop
		btfsc	BANK0:PORTB, RB4
		 b	 loc_CODE_A08
		bsf	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		nop
		bsf	bunch_of_other_flags, 1	; bit0=1=psu on
		bsf	i2c_flags2, 6
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	readable_flags2_lsb, 1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	bunch_of_timing_flags, 3
		 b	 loc_CODE_A1E
		bsf	BANK0:PORTB, RB1
		bsf	some_major_flags, 6
		bcf	some_major_flags, 1
		bsf	some_major_flags, 2
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		bsf	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		movlw	1
		movwf	EEPROM_Write_Data
		movlw	1D
		movwf	EEPROM_Write_Addr
		call	EEPROM_Write
		b	loc_CODE_A8D
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_A08:				; CODE XREF: RESET_0+3A5j RESET_0+3A9j ...
		btfss	bunch_of_timing_flags, 4
		 b	 loc_CODE_A1E
		btfsc	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 loc_CODE_A0E
		bsf	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		nop

loc_CODE_A0E:				; CODE XREF: RESET_0+3C7j
		btfss	bunch_of_timing_flags, 3
		 b	 loc_CODE_A1E
		bsf	BANK0:PORTB, RB1
		bsf	i2c_flags2, 6
		bsf	some_major_flags, 6
		bcf	some_major_flags, 1
		bsf	some_major_flags, 2
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		bsf	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		movlw	1
		movwf	EEPROM_Write_Data
		movlw	1D
		movwf	EEPROM_Write_Addr
		call	EEPROM_Write
		b	loc_CODE_A8D
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_A1E:				; CODE XREF: RESET_0+3B6j RESET_0+3C5j ...
		btfss	i2c_flags2, 5
		 b	 loc_CODE_A38
		btfss	yet_more_flags,	6
		 b	 loc_CODE_A38
		btfsc	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 loc_CODE_A29
		bsf	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		nop
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	readable_flags2_lsb, 3
		bcf	BANK1:STATUS, RP0
; assume bank =	0

loc_CODE_A29:				; CODE XREF: RESET_0+3DFj
		btfss	bunch_of_timing_flags, 3
		 b	 loc_CODE_A38
		bsf	BANK0:PORTB, RB1
		bsf	some_major_flags, 6
		bcf	some_major_flags, 1
		bsf	some_major_flags, 2
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		bsf	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		movlw	1
		movwf	EEPROM_Write_Data
		movlw	1D
		movwf	EEPROM_Write_Addr
		call	EEPROM_Write
		b	loc_CODE_A8D
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_A38:				; CODE XREF: RESET_0+3DBj RESET_0+3DDj ...
		btfss	i2c_flags2, 3
		 b	 loc_CODE_A52
		btfss	yet_more_flags,	6
		 b	 loc_CODE_A52
		btfsc	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 loc_CODE_A43
		bsf	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		nop
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	readable_flags2_lsb, 3
		bcf	BANK1:STATUS, RP0
; assume bank =	0

loc_CODE_A43:				; CODE XREF: RESET_0+3F9j
		btfss	bunch_of_timing_flags, 3
		 b	 loc_CODE_A52
		bsf	BANK0:PORTB, RB1
		bsf	some_major_flags, 6
		bcf	some_major_flags, 1
		bsf	some_major_flags, 2
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		bsf	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		movlw	1
		movwf	EEPROM_Write_Data
		movlw	1D
		movwf	EEPROM_Write_Addr
		call	EEPROM_Write
		b	loc_CODE_A8D
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_A52:				; CODE XREF: RESET_0+3F5j RESET_0+3F7j ...
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		btfsc	surprise_more_flags, 6
		 b	 consider_turning_psu_off
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	yet_more_flags,	4
		 b	 consider_turning_psu_off
		btfsc	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 loc_CODE_A5F
		bsf	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		nop
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	readable_flags2_lsb, 6
		bcf	BANK1:STATUS, RP0
; assume bank =	0

loc_CODE_A5F:				; CODE XREF: RESET_0+415j
		btfss	bunch_of_timing_flags, 3
		 b	 consider_turning_psu_off
		bsf	BANK0:PORTB, RB1
		bsf	i2c_flags2, 6
		bsf	some_major_flags, 6
		bcf	some_major_flags, 1
		bsf	some_major_flags, 2
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		bsf	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		movlw	1
		movwf	EEPROM_Write_Data
		movlw	1D
		movwf	EEPROM_Write_Addr
		call	EEPROM_Write
		b	loc_CODE_A8D
; ---------------------------------------------------------------------------
; assume bank =	0

consider_turning_psu_off:		; CODE XREF: RESET_0+410j RESET_0+413j ...
		bcf	BANK0:STATUS, RP0
		bcf	BANK0:INTCON, GIE
		btfsc	bunch_of_other_flags, 1	; bit0=1=psu on
		 b	 loc_CODE_A8D
		btfss	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 dont_turn_psu_off
		btfss	bunch_of_timing_flags, 0
		 b	 dont_turn_psu_off
		btfss	bunch_of_timing_flags, 5
		 b	 dont_turn_psu_off
		btfsc	bunch_of_timing_flags, 4
		 b	 dont_turn_psu_off
		btfss	yet_more_flags,	6
		 b	 loc_CODE_A7D

loc_CODE_A7D:				; CODE XREF: RESET_0+438j
		btfss	BANK0:PORTB, RB0
		 b	 dont_turn_psu_off
		nop
		nop
		btfss	BANK0:PORTB, RB0
		 b	 dont_turn_psu_off
		btfss	bunch_of_timing_flags, 7
		 b	 dont_turn_psu_off
		bcf	bunch_of_other_flags, 0	; turn power supply off!
		bcf	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		bcf	BANK0:INTCON, GIE
		bcf	BANK0:PORTB, RB2
		nop
		bcf	BANK0:PORTC, RC5 ; power off
		bsf	BANK0:INTCON, GIE

dont_turn_psu_off:			; CODE XREF: RESET_0+430j RESET_0+432j ...
		bsf	BANK0:INTCON, GIE

loc_CODE_A8D:				; CODE XREF: RESET_0+391j RESET_0+3C3j ...
		bcf	BANK0:STATUS, RP1
		bcf	BANK0:STATUS, RP0
		bsf	BANK0:INTCON, GIE
		btfss	some_major_flags, 2
		 b	 loc_CODE_AA5
		clrwdt
		btfss	BANK0:PORTB, RB0
		 b	 loc_CODE_AA3
		btfss	BANK0:PORTB, RB5
		 b	 loc_CODE_AA3
		btfsc	i2c_flags2, 5
		 b	 loc_CODE_AA5
		btfsc	i2c_flags2, 3
		 b	 loc_CODE_AA5
		btfsc	i2c_flags2, 6
		 b	 loc_CODE_AA5
		movlw	0F4 ; 'ô'
		movwf	downcount_from_500_250_lsb ; set to 500
		movlw	1
		movwf	downcount_from_500_250_msb
		bcf	bunch_of_timing_flags, 0
		bsf	i2c_flags2, 7

loc_CODE_AA3:				; CODE XREF: RESET_0+450j RESET_0+452j
		bcf	some_major_flags, 2
		bsf	some_major_flags, 0

loc_CODE_AA5:				; CODE XREF: RESET_0+44Dj RESET_0+454j ...
		btfss	some_major_flags, 3
		 b	 loc_CODE_AAD

loc_CODE_AA7:				; CODE XREF: RESET_0+3A3j
		clrwdt
		btfss	bunch_of_timing_flags, 3
		 b	 loc_CODE_AAD
		bsf	BANK0:PORTB, RB1
		bcf	some_major_flags, 3
		bsf	some_major_flags, 0

loc_CODE_AAD:				; CODE XREF: RESET_0+462j RESET_0+465j
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		btfsc	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		 b	 loc_CODE_B04
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	some_major_flags, 1
		 b	 loc_CODE_AFB
		bcf	BANK0:INTCON, GIE
		movfw	ADCChannel0MSB
		movwf	multiply_result_MSB
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		movfw	ADCChannel0LSB
		movwf	byte_DATA_17B
		bsf	BANK2:INTCON, GIE
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		movfw	byte_DATA_17B
		addwf	byte_DATA_167, f
		addcf	byte_DATA_168, f
		movfw	byte_DATA_17A
		addwf	byte_DATA_168, f
		incf	byte_DATA_169, f
		btfss	byte_DATA_169, 6
		 b	 loc_CODE_B04
		clrf	byte_DATA_169
		movfw	byte_DATA_167
		movwf	byte_DATA_17B
		movfw	byte_DATA_168
		movwf	byte_DATA_17A
		clrf	byte_DATA_167
		clrf	byte_DATA_168
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		movlw	1E
		subwf	byte_DATA_17B, f
		bc	loc_CODE_AF2
		tstf	byte_DATA_17A
		bz	loc_CODE_AFB
		decf	byte_DATA_17A, f

loc_CODE_AF2:				; CODE XREF: RESET_0+4A8j
		bcf	BANK2:INTCON, GIE
		movfw	byte_DATA_17B
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movwf	OutputVoltageLSB
		movfw	temp16_msb
		movwf	OutputVoltageMSB
		bsf	BANK1:INTCON, GIE
		b	loc_CODE_B04
; ---------------------------------------------------------------------------
; assume bank =	2

loc_CODE_AFB:				; CODE XREF: RESET_0+470j RESET_0+4ABj
		bsf	BANK2:STATUS, RP1
		bcf	BANK2:STATUS, RP0
		clrf	byte_DATA_167
		clrf	byte_DATA_168
		clrf	byte_DATA_169
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	OutputVoltageLSB
		clrf	OutputVoltageMSB

loc_CODE_B04:				; CODE XREF: RESET_0+46Cj RESET_0+492j ...
		bcf	BANK1:STATUS, RP1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	some_major_flags, 1
		 b	 loc_CODE_B23
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movlw	12
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movwf	multiply_data_arg2
		movfw	BANK0:CCPR1L	; fan speed PWM	output
		movwf	multiply_data_arg1
		call	multiply8x8	; this is the multiply8x8=16 from microchip
		movfw	multiply_result_MSB
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		subwf	reported_fan_speed_msb,	w
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bz	loc_CODE_B1A
		bc	loc_CODE_B23
		btfss	yet_more_flags,	4
		 b	 loc_CODE_B29
		b	loc_CODE_B2B
; ---------------------------------------------------------------------------

loc_CODE_B1A:				; CODE XREF: RESET_0+4CFj
		movfw	multiply_result_LSB
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		subwf	reported_fan_speed_lsb,	w
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bc	loc_CODE_B23
		btfss	yet_more_flags,	4
		 b	 loc_CODE_B29
		b	loc_CODE_B2B
; ---------------------------------------------------------------------------

loc_CODE_B23:				; CODE XREF: RESET_0+4C3j RESET_0+4D1j ...
		bcf	BANK0:STATUS, RP0
		movlw	30 ; '0'
		movwf	some_other_downcounter2_lsb
		movlw	75 ; 'u'
		movwf	some_other_downcounter2_msb
		bcf	yet_more_flags,	4

loc_CODE_B29:				; CODE XREF: RESET_0+4D4j RESET_0+4DDj
		bcf	BANK0:STATUS, RP0
		b	loc_CODE_B2D
; ---------------------------------------------------------------------------

loc_CODE_B2B:				; CODE XREF: RESET_0+4D5j RESET_0+4DEj
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	readable_flags2_lsb, 6
; assume bank =	0

loc_CODE_B2D:				; CODE XREF: RESET_0+4E6j
		bcf	BANK0:STATUS, RP0
		bcf	BANK0:STATUS, RP0
		btfss	i2c_flags1, 1	; check	temperature range
		 b	 loc_CODE_B4E
		movlw	46 ; 'F'
		subwf	internal_temperature, w
		bc	loc_CODE_B49
		movfw	internal_temperature
		sublw	3C ; '<'
		bnc	loc_CODE_B4E
		movfw	byte_DATA_45
		sublw	0F
		bc	loc_CODE_B49
		movlw	1A
		subwf	byte_DATA_45, w
		bnc	loc_CODE_B4E
		bcf	i2c_flags2, 5
		btfsc	i2c_flags2, 3
		 b	 loc_CODE_B4E
		btfsc	some_major_flags, 1
		 b	 loc_CODE_B4E
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	readable_flags2_lsb, 3
		b	loc_CODE_B4E
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_B49:				; CODE XREF: RESET_0+4EFj RESET_0+4F7j
		bsf	i2c_flags2, 5
		btfss	some_major_flags, 1
		 b	 loc_CODE_B4E
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	readable_flags2_lsb, 3
; assume bank =	0

loc_CODE_B4E:				; CODE XREF: RESET_0+4ECj RESET_0+4F3j ...
		bcf	BANK0:STATUS, RP0
		bcf	BANK0:INTCON, GIE
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movfw	readable_flags2_lsb
		andlw	4E
		bnz	loc_CODE_B57
		bcf	readable_flags2_lsb, 0
		b	loc_CODE_B5E
; ---------------------------------------------------------------------------

loc_CODE_B57:				; CODE XREF: RESET_0+50Fj
		btfss	surprise_more_flags, 6
		 b	 loc_CODE_B5D
		movfw	readable_flags2_lsb
		andlw	40
		bnz	loc_CODE_B5E

loc_CODE_B5D:				; CODE XREF: RESET_0+514j
		bsf	readable_flags2_lsb, 0

loc_CODE_B5E:				; CODE XREF: RESET_0+512j RESET_0+517j
		bsf	BANK1:INTCON, GIE
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	internal_temperature
		movwf	multiply_data_arg1
		movlw	40 ; '@'
		movwf	multiply_data_arg2
		call	multiply8x8	; this is the multiply8x8=16 from microchip
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	BANK1:INTCON, GIE
		movfw	temp16_msb
		movwf	Temperature1MSB
		movfw	temp16_lsb
		movwf	Temperature1LSB
		bsf	BANK1:INTCON, GIE
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	another_temperature_maybe_external
		movwf	multiply_data_arg1
		movlw	40 ; '@'
		movwf	multiply_data_arg2
		call	multiply8x8	; this is the multiply8x8=16 from microchip
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	BANK1:INTCON, GIE
		movfw	temp16_msb
		movwf	Temperature2MSB
		movfw	temp16_lsb
		movwf	Temperature2LSB
		bsf	BANK1:INTCON, GIE
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	i2c_flags1, 1	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 loc_CODE_BAB
		btfsc	i2c_flags2, 5
		 b	 loc_CODE_B91
		movfw	internal_temperature
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		subwf	another_temperature_threshold, w
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bnc	loc_CODE_B91
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movfw	some_temperature_threshold
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		subwf	internal_temperature, w
		bc	loc_CODE_B93
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	status_flags_including_temperature, 4
		b	loc_CODE_B93
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_B91:				; CODE XREF: RESET_0+539j RESET_0+540j
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	status_flags_including_temperature, 4

loc_CODE_B93:				; CODE XREF: RESET_0+548j RESET_0+54Cj
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfsc	i2c_flags2, 3
		 b	 loc_CODE_BA9
		movfw	another_temperature_maybe_external
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		subwf	byte_DATA_192, w
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bnc	loc_CODE_BA9
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movfw	some_temp_threshold
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		subwf	another_temperature_maybe_external, w
		bc	loc_CODE_BAB
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	status_flags_including_temperature, 5
		b	loc_CODE_BAB
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_BA9:				; CODE XREF: RESET_0+551j RESET_0+558j
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	status_flags_including_temperature, 5

loc_CODE_BAB:				; CODE XREF: RESET_0+537j RESET_0+560j ...
		bsf	BANK1:STATUS, RP0
		movfw	readable_flags2_lsb
		xorwf	byte_DATA_AB, w
		bz	loc_CODE_BB2
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	yet_more_flags,	5
; assume bank =	1

loc_CODE_BB2:				; CODE XREF: RESET_0+56Aj
		bsf	BANK1:STATUS, RP0
		movfw	readable_flags2_lsb
		movwf	byte_DATA_AB
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	BANK0:PORTB, RB5
		 b	 loc_CODE_BBB
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	readable_flags_lsb, 2
		b	loc_CODE_BBD
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_BBB:				; CODE XREF: RESET_0+573j
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	readable_flags_lsb, 2

loc_CODE_BBD:				; CODE XREF: RESET_0+576j
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 loc_CODE_BC3
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	readable_flags_lsb, 0
		b	loc_CODE_BC5
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_BC3:				; CODE XREF: RESET_0+57Bj
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	readable_flags_lsb, 0

loc_CODE_BC5:				; CODE XREF: RESET_0+57Ej
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		tstf	readable_flags2_lsb
		bnz	loc_CODE_BCC
		bcf	yet_yet_more_flags, 1
		b	loc_CODE_BD0
; ---------------------------------------------------------------------------

loc_CODE_BCC:				; CODE XREF: RESET_0+584j
		movfw	readable_flags2_lsb
		xorlw	10
		skpz
		 bsf	 yet_yet_more_flags, 1

loc_CODE_BD0:				; CODE XREF: RESET_0+587j
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		tstf	status_flags_including_temperature
		bnz	loc_CODE_BD7
		bcf	yet_yet_more_flags, 2
		b	loc_CODE_BD8
; ---------------------------------------------------------------------------

loc_CODE_BD7:				; CODE XREF: RESET_0+58Fj
		bsf	yet_yet_more_flags, 2

loc_CODE_BD8:				; CODE XREF: RESET_0+592j
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	BANK0:STATUS, RP0
		btfss	i2c_flags3, 4
		 b	 loc_CODE_BEC
		bcf	BANK0:INTCON, GIE
		movfw	FanTachPulseCopyLSB
		movwf	multiply_data_arg1
		movlw	78 ; 'x'
		movwf	multiply_data_arg2
		call	multiply8x8	; this is the multiply8x8=16 from microchip
		movfw	multiply_result_MSB
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movwf	reported_fan_speed_msb
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	multiply_result_LSB
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movwf	reported_fan_speed_lsb
		bsf	BANK1:INTCON, GIE
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		b	loc_CODE_BFD
; ---------------------------------------------------------------------------

loc_CODE_BEC:				; CODE XREF: RESET_0+597j
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		btfsc	surprise_more_flags, 7
		 b	 fan_speed_needs_adjusting
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfsc	yet_more_flags,	3
		 b	 loc_CODE_BF8
		movfw	downcount2_from_1250_msb
		andlw	9
		bnz	fan_speed_needs_adjusting
		bsf	yet_more_flags,	3
		b	loc_CODE_BFD
; ---------------------------------------------------------------------------

loc_CODE_BF8:				; CODE XREF: RESET_0+5ADj
		movfw	downcount2_from_1250_msb
		andlw	9
		bz	fan_speed_needs_adjusting
		bcf	yet_more_flags,	3

loc_CODE_BFD:				; CODE XREF: RESET_0+5A7j RESET_0+5B3j
		btfss	bunch_of_timing_flags, 1
		 b	 loc_CODE_C09
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		incf	byte_DATA_126, f
		movfw	byte_DATA_126
		sublw	5
		bc	loc_CODE_C0D
		clrf	byte_DATA_126
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bcf	bunch_of_timing_flags, 1
		b	loc_CODE_C0D
; ---------------------------------------------------------------------------

loc_CODE_C09:				; CODE XREF: RESET_0+5BAj
		movfw	BANK0:CCPR1L	; fan speed PWM	output
		subwf	fan_speed, w
		bnz	fan_speed_needs_adjusting

loc_CODE_C0D:				; CODE XREF: RESET_0+5BFj RESET_0+5C4j
		bcf	BANK0:STATUS, RP1
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		btfss	interesting_ctrl_byte_set_cmd3b, 6
		 b	 loc_CODE_C43
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		movlw	0FF
		movwf	fan_speed_adj_timer_lsb
		movlw	0B
		movwf	fan_speed_adj_timer_msb
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movfw	reported_fan_speed_msb
		subwf	written_by_cmd_3d_msb, w
		bnc	loc_CODE_C3D
		bnz	loc_CODE_C30
		bsf	surprise_more_flags, 7
		movfw	reported_fan_speed_lsb
		subwf	written_by_cmd_3d_lsb, w
		bz	loc_CODE_C47
		bnc	loc_CODE_C47
		bcf	surprise_more_flags, 7
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		incf	byte_DATA_129, f
		movfw	byte_DATA_129
		sublw	32 ; '2'
		bc	loc_CODE_C47
		clrf	byte_DATA_129
		bcf	BANK2:STATUS, RP1
; assume bank =	0

loc_CODE_C30:				; CODE XREF: RESET_0+5D9j
		bcf	BANK0:STATUS, RP0
		movfw	fan_speed
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movwf	min_fan_speed_if_cm3b_bit6_set
		bcf	surprise_more_flags, 7
		incf	min_fan_speed_if_cm3b_bit6_set,	f
		movfw	min_fan_speed_if_cm3b_bit6_set
		sublw	0C8 ; 'È'
		bc	loc_CODE_C47
		movlw	0C8 ; 'È'
		movwf	min_fan_speed_if_cm3b_bit6_set
		b	loc_CODE_C47
; ---------------------------------------------------------------------------

loc_CODE_C3D:				; CODE XREF: RESET_0+5D7j
		bsf	BANK1:STATUS, RP0
		tstf	min_fan_speed_if_cm3b_bit6_set
		skpz
		 decf	 min_fan_speed_if_cm3b_bit6_set, f
		bsf	surprise_more_flags, 7
		b	loc_CODE_C47
; ---------------------------------------------------------------------------

loc_CODE_C43:				; CODE XREF: RESET_0+5CCj
		clrf	min_fan_speed_if_cm3b_bit6_set
		clrf	written_by_cmd_3d_msb
		clrf	written_by_cmd_3d_lsb
		bcf	surprise_more_flags, 7

loc_CODE_C47:				; CODE XREF: RESET_0+5DEj RESET_0+5E0j ...
		bcf	BANK1:STATUS, RP1
		bsf	BANK1:STATUS, RP0
		tstf	reported_fan_speed_msb
		skpz
		 movlw	 1
		subwf	reported_fan_speed_msb,	w
		subwf	fan_related_msb, w
		bnc	loc_CODE_C67
		bnz	loc_CODE_C53
		b	fan_speed_needs_adjusting
; ---------------------------------------------------------------------------

loc_CODE_C53:				; CODE XREF: RESET_0+60Cj
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		movlw	0FF
		movwf	fan_speed_adj_timer_lsb
		movlw	0B
		movwf	fan_speed_adj_timer_msb
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bcf	BANK0:STATUS, RP0
		movfw	fan_speed
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	surprise_more_flags, 7
		movwf	minimum_fan_speed
		incf	minimum_fan_speed, f
		movfw	minimum_fan_speed
		sublw	0C8 ; 'È'
		bc	fan_speed_needs_adjusting
		movlw	0C8 ; 'È'
		movwf	minimum_fan_speed
		b	fan_speed_needs_adjusting
; ---------------------------------------------------------------------------

loc_CODE_C67:				; CODE XREF: RESET_0+60Aj
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		movlw	0FF
		movwf	fan_speed_adj_timer_lsb
		movlw	0B
		movwf	fan_speed_adj_timer_msb
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bcf	BANK0:STATUS, RP0
		movfw	fan_speed
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	surprise_more_flags, 7
		movwf	minimum_fan_speed
		skpz
		 decf	 minimum_fan_speed, f

fan_speed_needs_adjusting:		; CODE XREF: RESET_0+5AAj RESET_0+5B0j ...
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	some_major_flags, 5
		 b	 loc_CODE_CB1
		bcf	some_major_flags, 5
		bcf	BANK0:STATUS, RP1
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		btfsc	surprise_more_flags, 3
		 b	 loc_CODE_C86
		movlw	20 ; ' '
		subwf	counter_for_eeprom_logging, w
		bnc	loc_CODE_C86
		movfw	counter_for_eeprom_logging
		sublw	2D ; '-'
		bnc	loc_CODE_C86
		b	loc_CODE_CB1
; ---------------------------------------------------------------------------

loc_CODE_C86:				; CODE XREF: RESET_0+638j RESET_0+63Bj ...
		movfw	counter_for_eeprom_logging
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	EEPROM_Write_Addr
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	tag_for_eeprom_logging
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	EEPROM_Write_Data
		call	EEPROM_Write
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	counter_for_eeprom_logging
		sublw	1C
		bnz	loc_CODE_CA2
		bcf	surprise_more_flags, 3
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	byte_DATA_125, 3
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	tag_for_eeprom_logging
		sublw	4B ; 'K'
		bnz	loc_CODE_CB1
		bsf	surprise_more_flags, 3
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bcf	byte_DATA_125, 3
		b	loc_CODE_CB1
; ---------------------------------------------------------------------------
; assume bank =	1

loc_CODE_CA2:				; CODE XREF: RESET_0+64Dj
		bcf	BANK1:STATUS, RP1
		movfw	counter_for_eeprom_logging
		sublw	1E
		bnz	loc_CODE_CAA
		movfw	tag_for_eeprom_logging
		movwf	some_eeprom_log_counter
		b	loc_CODE_CB1
; ---------------------------------------------------------------------------

loc_CODE_CAA:				; CODE XREF: RESET_0+661j
		movfw	counter_for_eeprom_logging
		sublw	1F
		bnz	loc_CODE_CB1
		movfw	tag_for_eeprom_logging
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	eeprom_log_addr_base
; assume bank =	1

loc_CODE_CB1:				; CODE XREF: RESET_0+633j RESET_0+641j ...
		bsf	BANK1:STATUS, RP0
		bcf	BANK1:STATUS, RP1
		btfsc	readable_flags2_lsb, 4
		 b	 loc_CODE_D0D	; appears to be	recording some kind of alarm/min/max log to EEPROM
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	i2c_flags1, 1	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 loc_CODE_D0D	; appears to be	recording some kind of alarm/min/max log to EEPROM
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movfw	voltage_threshold1_lsb
		movwf	temp16_lsb
		movfw	voltage_threshold1_msb
		movwf	temp16_msb
		movlw	0C0 ; 'À'
		addwf	temp16_lsb, f
		bnc	loc_CODE_CC8
		incf	temp16_msb, f
		tstf	temp16_msb
		bnz	loc_CODE_CC8
		movlw	0FF
		movwf	temp16_msb
		movwf	temp16_lsb

loc_CODE_CC8:				; CODE XREF: RESET_0+67Bj RESET_0+67Fj
		bsf	BANK1:STATUS, RP0
		bcf	BANK1:STATUS, RP1
		movfw	voltage_threshold1_msb ; this appears to be checking for input under/over voltage
		subwf	input_voltage_msb, w
		bnc	loc_CODE_CE1
		bnz	loc_CODE_CD4
		movfw	voltage_threshold1_lsb
		subwf	input_voltage_lsb, w
		bnc	loc_CODE_CE1

loc_CODE_CD4:				; CODE XREF: RESET_0+68Aj
		movfw	input_voltage_msb
		subwf	temp16_msb, w
		bnc	loc_CODE_CDF
		bnz	loc_CODE_CE2
		movfw	input_voltage_lsb
		subwf	temp16_lsb, w
		bnc	loc_CODE_CDF
		b	loc_CODE_CE2
; ---------------------------------------------------------------------------

loc_CODE_CDF:				; CODE XREF: RESET_0+692j RESET_0+698j
		bcf	status_flags_including_temperature, 1
		b	loc_CODE_CE2
; ---------------------------------------------------------------------------

loc_CODE_CE1:				; CODE XREF: RESET_0+688j RESET_0+68Ej
		bsf	status_flags_including_temperature, 1

loc_CODE_CE2:				; CODE XREF: RESET_0+694j RESET_0+69Aj ...
		bsf	BANK1:STATUS, RP0
		bcf	BANK1:STATUS, RP1
		movfw	voltage_threshold3_lsb
		movwf	temp16_lsb
		movfw	voltage_threshold3_msb
		movwf	temp16_msb
		movlw	0C0 ; 'À'
		subwf	temp16_lsb, f
		bc	loc_CODE_CF3
		decf	temp16_msb, f
		movfw	temp16_msb
		sublw	0FF
		bnz	loc_CODE_CF3
		clrf	temp16_msb
		clrf	temp16_lsb

loc_CODE_CF3:				; CODE XREF: RESET_0+6A6j RESET_0+6ABj
		bsf	BANK1:STATUS, RP0
		bcf	BANK1:STATUS, RP1
		movfw	input_voltage_msb
		subwf	voltage_threshold3_msb,	w
		bnc	loc_CODE_D0C
		bnz	loc_CODE_CFF
		movfw	input_voltage_lsb
		subwf	voltage_threshold3_lsb,	w
		bnc	loc_CODE_D0C

loc_CODE_CFF:				; CODE XREF: RESET_0+6B5j
		movfw	temp16_msb
		subwf	input_voltage_msb, w
		bnc	loc_CODE_D0A
		bnz	loc_CODE_D0D	; appears to be	recording some kind of alarm/min/max log to EEPROM
		movfw	temp16_lsb
		subwf	input_voltage_lsb, w
		bnc	loc_CODE_D0A
		b	loc_CODE_D0D	; appears to be	recording some kind of alarm/min/max log to EEPROM
; ---------------------------------------------------------------------------

loc_CODE_D0A:				; CODE XREF: RESET_0+6BDj RESET_0+6C3j
		bcf	status_flags_including_temperature, 0
		b	loc_CODE_D0D	; appears to be	recording some kind of alarm/min/max log to EEPROM
; ---------------------------------------------------------------------------

loc_CODE_D0C:				; CODE XREF: RESET_0+6B3j RESET_0+6B9j
		bsf	status_flags_including_temperature, 0

loc_CODE_D0D:				; CODE XREF: RESET_0+670j RESET_0+673j ...
		bsf	BANK1:STATUS, RP0 ; appears to be recording some kind of alarm/min/max log to EEPROM
		bcf	BANK1:STATUS, RP1
		bcf	BANK1:INTCON, GIE
		bcf	readable_flags_lsb, 1
		btfss	readable_flags2_lsb, 4
		 bsf	 readable_flags_lsb, 1
		bsf	BANK1:INTCON, GIE
		bsf	BANK1:STATUS, RP0
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		btfss	logging_trigger_flags, 1 ; this	bit is set once	every 24hrs
		 b	 not_new_day
		bcf	logging_trigger_flags, 1 ; bit1	is set once every 24hrs
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	possibly_total_mins_uptime_byte0
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	EEPROM_Write_Data
		movlw	19
		movwf	EEPROM_Write_Addr
		call	EEPROM_Write
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	possibly_total_mins_uptime_byte1
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	EEPROM_Write_Data
		movlw	1A
		movwf	EEPROM_Write_Addr
		call	EEPROM_Write
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	possibly_total_mins_uptime_byte2
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	EEPROM_Write_Data
		movlw	1B
		movwf	EEPROM_Write_Addr
		call	EEPROM_Write

not_new_day:				; CODE XREF: RESET_0+6D3j
		btfss	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		 b	 loc_CODE_D78
		btfsc	logging_trigger_flags, 2 ; bit1	is set once every 24hrs
		 b	 loc_CODE_D46
		bsf	logging_trigger_flags, 2 ; bit1	is set once every 24hrs
		movlw	2E ; '.'
		subwf	eeprom_log_addr_base, w
		bnz	loc_CODE_D39
		movlw	0E8 ; 'è'
		b	loc_CODE_D3B
; ---------------------------------------------------------------------------

loc_CODE_D39:				; CODE XREF: RESET_0+6F1j
		movlw	18
		subwf	eeprom_log_addr_base, w

loc_CODE_D3B:				; CODE XREF: RESET_0+6F4j
		call	EEPROM_Read
		andlw	4E
		bsf	BANK3:STATUS, RP0
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		andwf	readable_flags2_lsb, w
		bnz	loc_CODE_D6F
		incf	some_eeprom_log_counter, f
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		bsf	logging_trigger_flags, 3 ; bit1	is set once every 24hrs
		bsf	logging_trigger_flags, 1 ; bit1	is set once every 24hrs

loc_CODE_D46:				; CODE XREF: RESET_0+6EDj
		bsf	BANK3:STATUS, RP1
		bcf	BANK3:INTCON, GIE
		movlw	0AC ; '¬'
		addwf	eeprom_log_addr_counter, w
		movwf	BANK3:FSR
		movfw	BANK3:INDF	; indirect read
		movwf	EEPROM_Write_Data
		bsf	BANK3:INTCON, GIE
		movfw	eeprom_log_addr_base
		addwf	eeprom_log_addr_counter, w
		movwf	EEPROM_Write_Addr
		call	EEPROM_Write
		incf	eeprom_log_addr_counter, f
		movfw	eeprom_log_addr_counter
		sublw	1D
		bc	loc_CODE_D78
		clrf	eeprom_log_addr_counter
		bcf	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		bcf	logging_trigger_flags, 2 ; bit1	is set once every 24hrs
		btfss	logging_trigger_flags, 3 ; bit1	is set once every 24hrs
		 b	 loc_CODE_D63
		bcf	logging_trigger_flags, 3 ; bit1	is set once every 24hrs
		movlw	1E
		addwf	eeprom_log_addr_base, f
		bnc	loc_CODE_D63
		movlw	2E ; '.'
		movwf	eeprom_log_addr_base

loc_CODE_D63:				; CODE XREF: RESET_0+717j RESET_0+71Bj
		movfw	eeprom_log_addr_base
		movwf	EEPROM_Write_Data
		movlw	1F
		movwf	EEPROM_Write_Addr
		call	EEPROM_Write
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	some_eeprom_log_counter
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	EEPROM_Write_Data
		movlw	1E
		movwf	EEPROM_Write_Addr
		call	EEPROM_Write
; assume bank =	1

loc_CODE_D6F:				; CODE XREF: RESET_0+6FCj
		bsf	BANK1:STATUS, RP0
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movlw	0
		movwf	EEPROM_Write_Data
		movlw	1D
		movwf	EEPROM_Write_Addr
		call	EEPROM_Write
		bcf	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		bcf	logging_trigger_flags, 2 ; bit1	is set once every 24hrs

loc_CODE_D78:				; CODE XREF: RESET_0+6EBj RESET_0+711j
		bcf	BANK3:PCLATH, 3
; assume pclath	= 0
		bsf	BANK3:PCLATH, 4
; assume pclath	= 10
		b	loc_CODE_1000
; End of function RESET_0

; assume bank =	0
; assume pclath	= 8

; =============== S U B	R O U T	I N E =======================================

; this is the multiply8x8=16 from microchip

multiply8x8:				; CODE XREF: RESET_0+4CAp RESET_0+520p ...
		clrc
		clrf	multiply_result_MSB
		clrf	multiply_result_LSB
		movlw	8
		movwf	loop_counter
		movfw	multiply_data_arg1
		clrc

loc_CODE_D82:				; CODE XREF: multiply8x8+Dj
		rrf	multiply_data_arg2, f
		skpnc
		 addwf	 multiply_result_MSB, f
		rrf	multiply_result_MSB, f
		rrf	multiply_result_LSB, f
		decfsz	loop_counter, f
		 b	 loc_CODE_D82
		return
; End of function multiply8x8

; ---------------------------------------------------------------------------
		clrf	BANK0:TXREG
		clrc
		movlw	10
		movwf	BANK0:CCP2CON

loc_CODE_D8E:				; CODE XREF: CODE:0D9Fj
		rlf	BANK0:CCPR2H, f
		rlf	BANK0:CCPR2L, f
		rlf	BANK0:RCREG, f
		rlf	BANK0:TXREG, f
		movfw	BANK0:ADRESH
		subwf	BANK0:RCREG, w
		bc	loc_CODE_D9D
		movwf	BANK0:RCSTA
		movlw	1
		subwf	BANK0:TXREG, w
		bnc	loc_CODE_D9E
		movwf	BANK0:TXREG
		movfw	BANK0:RCSTA

loc_CODE_D9D:				; CODE XREF: CODE:0D94j
		movwf	BANK0:RCREG

loc_CODE_D9E:				; CODE XREF: CODE:0D99j
		decfsz	BANK0:CCP2CON, f
		 b	 loc_CODE_D8E
		rlf	BANK0:CCPR2H, f
		rlf	BANK0:CCPR2L, f
		return
; ---------------------------------------------------------------------------
		bcf	byte_DATA_25, 0
		bcf	byte_DATA_25, 1
		movfw	count_up_to_200
		subwf	BANK0:ADCON0, w
		bz	loc_CODE_DAD
		bc	loc_CODE_DB5
		bnc	locret_CODE_DB8

loc_CODE_DAD:				; CODE XREF: CODE:0DA7j
		movfw	other_min_fan_speed
		subwf	fan_speed, w
		bz	loc_CODE_DB7
		bc	loc_CODE_DB5
		bnc	locret_CODE_DB8

loc_CODE_DB5:				; CODE XREF: CODE:0DA9j CODE:0DB1j
		bsf	byte_DATA_25, 0
		b	locret_CODE_DB8
; ---------------------------------------------------------------------------

loc_CODE_DB7:				; CODE XREF: CODE:0DAFj
		bsf	byte_DATA_25, 1

locret_CODE_DB8:			; CODE XREF: CODE:0DABj CODE:0DB3j ...
		return
; assume bank =	3

; =============== S U B	R O U T	I N E =======================================


EEPROM_Read:				; CODE XREF: RESET_0+247p RESET_0+24Bp ...
		bsf	BANK3:STATUS, RP0
		bsf	BANK3:STATUS, RP1

loc_CODE_DBB:				; CODE XREF: EEPROM_Read+3j
		btfsc	BANK3:EECON1, WR
		 b	 loc_CODE_DBB
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		bsf	BANK2:STATUS, RP1
		movwf	BANK2:EEADR
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		bcf	BANK3:EECON1, EEPGD
		bsf	BANK3:EECON1, RD
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	BANK2:EEDATA
		return
; End of function EEPROM_Read

; assume bank =	3

; =============== S U B	R O U T	I N E =======================================


EEPROM_Write:				; CODE XREF: RESET_0+305p RESET_0+3C2p ...
		bsf	BANK3:STATUS, RP0
		bsf	BANK3:STATUS, RP1

loc_CODE_DC8:				; CODE XREF: EEPROM_Write+3j
		btfsc	BANK3:EECON1, WR
		 b	 loc_CODE_DC8
		bcf	BANK3:INTCON, GIE
		movfw	EEPROM_Write_Addr
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movwf	BANK2:EEADR
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movfw	EEPROM_Write_Data
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movwf	BANK2:EEDATA
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		bcf	BANK3:EECON1, EEPGD
		bsf	BANK3:EECON1, WREN
		movlw	55 ; 'U'        ; enable EEPROM write magic
		movwf	BANK3:EECON2
		movlw	0AA ; 'ª'
		movwf	BANK3:EECON2
		bsf	BANK3:EECON1, WR
		bcf	BANK3:EECON1, WREN
		bsf	BANK3:INTCON, GIE
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	BANK0:RCREG	; UART receive?
		clrf	BANK0:RCREG
		clrf	BANK0:RCSTA
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	BANK1:TXSTA
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movlw	90 ; ''
		movwf	BANK0:RCSTA
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movlw	40 ; '@'
		movwf	BANK1:SPBRG
		movlw	20 ; ' '
		movwf	BANK1:TXSTA
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		bsf	BANK3:STATUS, RP0
		return
; End of function EEPROM_Write

; ---------------------------------------------------------------------------
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF

LookupSomethingElse:			; Lookup table
		addwf	BANK3:PCL, f
		retlw	0
; ---------------------------------------------------------------------------
		retlw	0
; ---------------------------------------------------------------------------
		retlw	0
; ---------------------------------------------------------------------------
		retlw	0
; ---------------------------------------------------------------------------
		retlw	0
; ---------------------------------------------------------------------------
		retlw	0
; ---------------------------------------------------------------------------
		retlw	0
; ---------------------------------------------------------------------------
		retlw	0
; ---------------------------------------------------------------------------
		retlw	0
; ---------------------------------------------------------------------------
		retlw	1
; ---------------------------------------------------------------------------
		retlw	1
; ---------------------------------------------------------------------------
		retlw	2
; ---------------------------------------------------------------------------
		retlw	2
; ---------------------------------------------------------------------------
		retlw	3
; ---------------------------------------------------------------------------
		retlw	3
; ---------------------------------------------------------------------------
		retlw	4
; ---------------------------------------------------------------------------
		retlw	4
; ---------------------------------------------------------------------------
		retlw	5
; ---------------------------------------------------------------------------
		retlw	5
; ---------------------------------------------------------------------------
		retlw	6
; ---------------------------------------------------------------------------
		retlw	6
; ---------------------------------------------------------------------------
		retlw	6
; ---------------------------------------------------------------------------
		retlw	7
; ---------------------------------------------------------------------------
		retlw	7
; ---------------------------------------------------------------------------
		retlw	7
; ---------------------------------------------------------------------------
		retlw	8
; ---------------------------------------------------------------------------
		retlw	8
; ---------------------------------------------------------------------------
		retlw	8
; ---------------------------------------------------------------------------
		retlw	8
; ---------------------------------------------------------------------------
		retlw	8
; ---------------------------------------------------------------------------
		retlw	9
; ---------------------------------------------------------------------------
		retlw	9
; ---------------------------------------------------------------------------
		retlw	0A
; ---------------------------------------------------------------------------
		retlw	0A
; ---------------------------------------------------------------------------
		retlw	0B
; ---------------------------------------------------------------------------
		retlw	0B
; ---------------------------------------------------------------------------
		retlw	0D
; ---------------------------------------------------------------------------
		retlw	0E
; ---------------------------------------------------------------------------
		retlw	10
; ---------------------------------------------------------------------------
		retlw	11
; ---------------------------------------------------------------------------
		retlw	13
; ---------------------------------------------------------------------------
		retlw	14
; ---------------------------------------------------------------------------
		retlw	16
; ---------------------------------------------------------------------------
		retlw	17
; ---------------------------------------------------------------------------
		retlw	19
; ---------------------------------------------------------------------------
		retlw	1A
; ---------------------------------------------------------------------------
		retlw	1B
; ---------------------------------------------------------------------------
		retlw	1D
; ---------------------------------------------------------------------------
		retlw	1F
; ---------------------------------------------------------------------------
		retlw	21 ; '!'
; ---------------------------------------------------------------------------
		retlw	23 ; '#'
; ---------------------------------------------------------------------------
		retlw	25 ; '%'
; ---------------------------------------------------------------------------
		retlw	26 ; '&'
; ---------------------------------------------------------------------------
		retlw	27 ; '''
; ---------------------------------------------------------------------------
		retlw	28 ; '('
; ---------------------------------------------------------------------------
		retlw	2A ; '*'
; ---------------------------------------------------------------------------
		retlw	2C ; ','
; ---------------------------------------------------------------------------
		retlw	2E ; '.'
; ---------------------------------------------------------------------------
		retlw	30 ; '0'
; ---------------------------------------------------------------------------
		retlw	32 ; '2'
; ---------------------------------------------------------------------------
		retlw	34 ; '4'
; ---------------------------------------------------------------------------
		retlw	36 ; '6'
; ---------------------------------------------------------------------------
		retlw	38 ; '8'
; ---------------------------------------------------------------------------
		retlw	38 ; '8'
; ---------------------------------------------------------------------------
		retlw	3A ; ':'
; ---------------------------------------------------------------------------
		retlw	3C ; '<'
; ---------------------------------------------------------------------------
		retlw	3E ; '>'
; ---------------------------------------------------------------------------
		retlw	40 ; '@'
; ---------------------------------------------------------------------------
		retlw	41 ; 'A'
; ---------------------------------------------------------------------------
		retlw	43 ; 'C'
; ---------------------------------------------------------------------------
		retlw	45 ; 'E'
; ---------------------------------------------------------------------------
		retlw	47 ; 'G'
; ---------------------------------------------------------------------------
		retlw	48 ; 'H'
; ---------------------------------------------------------------------------
		retlw	4A ; 'J'
; ---------------------------------------------------------------------------
		retlw	4C ; 'L'
; ---------------------------------------------------------------------------
		retlw	4D ; 'M'
; ---------------------------------------------------------------------------
		retlw	50 ; 'P'
; ---------------------------------------------------------------------------
		retlw	51 ; 'Q'
; ---------------------------------------------------------------------------
		retlw	53 ; 'S'
; ---------------------------------------------------------------------------
		retlw	55 ; 'U'
; ---------------------------------------------------------------------------
		retlw	57 ; 'W'
; ---------------------------------------------------------------------------
		retlw	58 ; 'X'
; ---------------------------------------------------------------------------
		retlw	59 ; 'Y'
; ---------------------------------------------------------------------------
		retlw	5A ; 'Z'
; ---------------------------------------------------------------------------
		retlw	5B ; '['
; ---------------------------------------------------------------------------
		retlw	5C ; '\'
; ---------------------------------------------------------------------------
		retlw	5E ; '^'
; ---------------------------------------------------------------------------
		retlw	5F ; '_'
; ---------------------------------------------------------------------------
		retlw	60 ; '`'
; ---------------------------------------------------------------------------
		retlw	61 ; 'a'
; ---------------------------------------------------------------------------
		retlw	62 ; 'b'
; ---------------------------------------------------------------------------
		retlw	63 ; 'c'
; ---------------------------------------------------------------------------
		retlw	65 ; 'e'
; ---------------------------------------------------------------------------
		retlw	67 ; 'g'
; ---------------------------------------------------------------------------
		retlw	68 ; 'h'
; ---------------------------------------------------------------------------
		retlw	69 ; 'i'
; ---------------------------------------------------------------------------
		retlw	6B ; 'k'
; ---------------------------------------------------------------------------
		retlw	6D ; 'm'
; ---------------------------------------------------------------------------
		retlw	6F ; 'o'
; ---------------------------------------------------------------------------
		retlw	70 ; 'p'
; ---------------------------------------------------------------------------
		retlw	71 ; 'q'
; ---------------------------------------------------------------------------
		retlw	73 ; 's'
; ---------------------------------------------------------------------------
		retlw	75 ; 'u'
; ---------------------------------------------------------------------------
		retlw	77 ; 'w'
; ---------------------------------------------------------------------------
		retlw	78 ; 'x'
; ---------------------------------------------------------------------------
		retlw	77 ; 'w'
; ---------------------------------------------------------------------------
		retlw	79 ; 'y'
; ---------------------------------------------------------------------------
		retlw	7B ; '{'
; ---------------------------------------------------------------------------
		retlw	7D ; '}'
; ---------------------------------------------------------------------------
		retlw	7F ; ''
; ---------------------------------------------------------------------------
		retlw	80 ; ''
; ---------------------------------------------------------------------------
		retlw	82 ; ''
; ---------------------------------------------------------------------------
		retlw	84 ; ''
; ---------------------------------------------------------------------------
		retlw	86 ; ''
; ---------------------------------------------------------------------------
		retlw	88 ; ''
; ---------------------------------------------------------------------------
		retlw	89 ; ''
; ---------------------------------------------------------------------------
		retlw	8B ; ''
; ---------------------------------------------------------------------------
		retlw	8D ; ''
; ---------------------------------------------------------------------------
		retlw	8F ; ''
; ---------------------------------------------------------------------------
		retlw	90 ; ''
; ---------------------------------------------------------------------------
		retlw	91 ; ''
; ---------------------------------------------------------------------------
		retlw	92 ; ''
; ---------------------------------------------------------------------------
		retlw	93 ; ''
; ---------------------------------------------------------------------------
		retlw	95 ; ''
; ---------------------------------------------------------------------------
		retlw	97 ; ''
; ---------------------------------------------------------------------------
		retlw	98 ; ''
; ---------------------------------------------------------------------------
		retlw	99 ; ''
; ---------------------------------------------------------------------------
		retlw	9B ; ''
; ---------------------------------------------------------------------------
		retlw	9D ; ''
; ---------------------------------------------------------------------------
		retlw	9F ; ''
; ---------------------------------------------------------------------------
		retlw	0A0 ; ' '
; ---------------------------------------------------------------------------
		retlw	0A1 ; '¡'
; ---------------------------------------------------------------------------
		retlw	0A3 ; '£'
; ---------------------------------------------------------------------------
		retlw	0A5 ; '¥'
; ---------------------------------------------------------------------------
		retlw	0A7 ; '§'
; ---------------------------------------------------------------------------
		retlw	0A8 ; '¨'
; ---------------------------------------------------------------------------
		retlw	0A9 ; '©'
; ---------------------------------------------------------------------------
		retlw	0AB ; '«'
; ---------------------------------------------------------------------------
		retlw	0AD ; '­'
; ---------------------------------------------------------------------------
		retlw	0AE ; '®'
; ---------------------------------------------------------------------------
		retlw	0AF ; '¯'
; ---------------------------------------------------------------------------
		retlw	0B0 ; '°'
; ---------------------------------------------------------------------------
		retlw	0B0 ; '°'
; ---------------------------------------------------------------------------
		retlw	0B0 ; '°'
; ---------------------------------------------------------------------------
		retlw	0B0 ; '°'
; ---------------------------------------------------------------------------
		retlw	0B0 ; '°'
; ---------------------------------------------------------------------------
		retlw	0B0 ; '°'
; ---------------------------------------------------------------------------
		retlw	0B0 ; '°'
; ---------------------------------------------------------------------------
		retlw	0B0 ; '°'
; ---------------------------------------------------------------------------
		retlw	0B0 ; '°'
; ---------------------------------------------------------------------------
		retlw	0B0 ; '°'
; ---------------------------------------------------------------------------
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
; START	OF FUNCTION CHUNK FOR RESET_0
; assume pclath	= 10

loc_CODE_1000:				; CODE XREF: RESET_0+736j
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		btfss	i2c_flags3, 4
		 b	 loc_CODE_104A
		btfsc	some_major_flags, 1
		 b	 loc_CODE_1007
		b	loc_CODE_104A
; ---------------------------------------------------------------------------

loc_CODE_1007:				; CODE XREF: RESET_0+9C1j
		movfw	internal_temperature
		sublw	3B ; ';'
		bnc	loc_CODE_1023
		movfw	internal_temperature
		sublw	39 ; '9'
		bnc	loc_CODE_101B
		movfw	internal_temperature
		sublw	35 ; '5'
		bc	loc_CODE_1036
		movfw	internal_temperature
		sublw	37 ; '7'
		bc	loc_CODE_102D
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bcf	BANK2:STATUS, RP0
		clrf	byte_DATA_16F
		b	loc_CODE_104A
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_101B:				; CODE XREF: RESET_0+9C9j
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bcf	BANK2:STATUS, RP0
		incf	byte_DATA_16F, f
		movfw	byte_DATA_16F
		sublw	19
		bc	loc_CODE_104A
		clrf	byte_DATA_16F
; assume bank =	0

loc_CODE_1023:				; CODE XREF: RESET_0+9C5j
		bcf	BANK0:STATUS, RP1
		bcf	BANK0:STATUS, RP0
		incf	other_min_fan_speed, f
		movfw	other_min_fan_speed
		sublw	0C8 ; 'È'
		bc	loc_CODE_104A
		movlw	0C8 ; 'È'
		movwf	other_min_fan_speed
		b	loc_CODE_104A
; ---------------------------------------------------------------------------

loc_CODE_102D:				; CODE XREF: RESET_0+9D1j
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bcf	BANK2:STATUS, RP0
		incf	byte_DATA_16F, f
		movfw	byte_DATA_16F
		sublw	64 ; 'd'
		bc	loc_CODE_104A
		clrf	byte_DATA_16F
		b	loc_CODE_103E
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_1036:				; CODE XREF: RESET_0+9CDj
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bcf	BANK2:STATUS, RP0
		incf	byte_DATA_16F, f
		movfw	byte_DATA_16F
		sublw	0A
		bc	loc_CODE_104A
		clrf	byte_DATA_16F

loc_CODE_103E:				; CODE XREF: RESET_0+9F1j
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bcf	BANK0:STATUS, RP0
		tstf	other_min_fan_speed
		bz	loc_CODE_104A
		decf	other_min_fan_speed, f
		movfw	other_min_fan_speed
		sublw	28 ; '('
		bnc	loc_CODE_104A
		movlw	28 ; '('
		movwf	other_min_fan_speed

loc_CODE_104A:				; CODE XREF: RESET_0+9BFj RESET_0+9C2j ...
		bcf	BANK0:STATUS, RP0
		bcf	BANK0:STATUS, RP1
		btfss	i2c_flags3, 4
		 b	 upcounter_not_reached
		btfsc	some_major_flags, 1
		 b	 loc_CODE_1051
		b	upcounter_not_reached
; ---------------------------------------------------------------------------

loc_CODE_1051:				; CODE XREF: RESET_0+A0Bj
		movfw	another_temperature_maybe_external
		sublw	58 ; 'X'
		bnc	loc_CODE_106D
		movfw	another_temperature_maybe_external
		sublw	55 ; 'U'
		bnc	loc_CODE_1065
		movfw	another_temperature_maybe_external
		sublw	4E ; 'N'
		bc	loc_CODE_1080
		movfw	another_temperature_maybe_external
		sublw	51 ; 'Q'
		bc	loc_CODE_1077
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		clrf	count_up_to_60
		b	upcounter_not_reached
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_1065:				; CODE XREF: RESET_0+A13j
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		incf	count_up_to_60,	f
		movfw	count_up_to_60
		sublw	3C ; '<'
		bc	upcounter_not_reached
		clrf	count_up_to_60	; reset	at 60
; assume bank =	0

loc_CODE_106D:				; CODE XREF: RESET_0+A0Fj
		bcf	BANK0:STATUS, RP1
		bcf	BANK0:STATUS, RP0
		incf	count_up_to_200, f
		movfw	count_up_to_200
		sublw	0C8 ; 'È'
		bc	upcounter_not_reached
		movlw	0C8 ; 'È'       ; stop at 200
		movwf	count_up_to_200
		b	upcounter_not_reached
; ---------------------------------------------------------------------------

loc_CODE_1077:				; CODE XREF: RESET_0+A1Bj
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		incf	count_up_to_60,	f
		movfw	count_up_to_60
		sublw	0F0 ; 'ð'
		bc	upcounter_not_reached
		clrf	count_up_to_60
		b	loc_CODE_1088
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_1080:				; CODE XREF: RESET_0+A17j
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		incf	count_up_to_60,	f
		movfw	count_up_to_60
		sublw	28 ; '('
		bc	upcounter_not_reached
		clrf	count_up_to_60

loc_CODE_1088:				; CODE XREF: RESET_0+A3Bj
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		tstf	count_up_to_200
		bz	upcounter_not_reached
		decf	count_up_to_200, f
		movfw	count_up_to_200
		sublw	28 ; '('
		bnc	upcounter_not_reached
		movlw	28 ; '('
		movwf	count_up_to_200

upcounter_not_reached:			; CODE XREF: RESET_0+A09j RESET_0+A0Cj ...
		bcf	BANK0:STATUS, RP1
		bcf	BANK0:STATUS, RP0
		movfw	count_up_to_200
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	byte_DATA_190
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	BANK0:PIR1, RCIF
		 b	 loc_CODE_1107
		movfw	BANK0:RCREG
		movwf	byte_DATA_25
		btfsc	yet_more_flags2, 4
		 b	 loc_CODE_1107
		btfsc	yet_more_flags2, 6
		 b	 loc_CODE_1107
		btfsc	yet_more_flags2, 0
		 b	 loc_CODE_10B4
		btfsc	yet_more_flags2, 1
		 b	 loc_CODE_10DE
		xorlw	49
		skpnz
		 bsf	 yet_more_flags2, 0
		movfw	byte_DATA_25
		xorlw	56
		skpnz
		 bsf	 yet_more_flags2, 1
		bcf	yet_more_flags2, 2
		bcf	yet_more_flags2, 3
		bcf	yet_more_flags2, 4
		bcf	yet_more_flags2, 6
		b	loc_CODE_1107
; ---------------------------------------------------------------------------

loc_CODE_10B4:				; CODE XREF: RESET_0+A61j
		btfsc	yet_more_flags2, 2
		 b	 loc_CODE_10BB
		xorlw	34
		skpz
		 bcf	 yet_more_flags2, 0
		bsf	yet_more_flags2, 2
		b	loc_CODE_1107
; ---------------------------------------------------------------------------

loc_CODE_10BB:				; CODE XREF: RESET_0+A71j
		movfw	byte_DATA_66
		sublw	5
		bz	loc_CODE_10CD
		bcf	BANK0:INTCON, GIE
		movlw	46 ; 'F'
		addwf	byte_DATA_66, w
		movwf	BANK0:FSR
		movfw	byte_DATA_25
		movwf	BANK0:INDF
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bcf	BANK2:STATUS, RP0
		addwf	byte_DATA_117, f
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bcf	BANK0:STATUS, RP0
		incf	byte_DATA_66, f
		bsf	BANK0:INTCON, GIE
		b	loc_CODE_1107
; ---------------------------------------------------------------------------

loc_CODE_10CD:				; CODE XREF: RESET_0+A79j
		movfw	byte_DATA_25
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bcf	BANK2:STATUS, RP0
		xorwf	byte_DATA_117, w
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bcf	BANK0:STATUS, RP0
		skpnz
		 bsf	 yet_more_flags2, 4
		bcf	yet_more_flags2, 0
		bcf	yet_more_flags2, 2
		clrf	byte_DATA_66
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bcf	BANK2:STATUS, RP0
		clrf	byte_DATA_117
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bcf	BANK0:STATUS, RP0
		b	loc_CODE_1107
; ---------------------------------------------------------------------------

loc_CODE_10DE:				; CODE XREF: RESET_0+A63j
		btfsc	yet_more_flags2, 3
		 b	 loc_CODE_10E5
		xorlw	34
		skpz
		 bcf	 yet_more_flags2, 1
		bsf	yet_more_flags2, 3
		b	loc_CODE_1107
; ---------------------------------------------------------------------------

loc_CODE_10E5:				; CODE XREF: RESET_0+A9Bj
		movfw	byte_DATA_66
		sublw	6
		bz	loc_CODE_10F7
		bcf	BANK0:INTCON, GIE
		movlw	4B ; 'K'
		addwf	byte_DATA_66, w
		movwf	BANK0:FSR
		movfw	byte_DATA_25
		movwf	BANK0:INDF
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bcf	BANK2:STATUS, RP0
		addwf	byte_DATA_116, f
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bcf	BANK0:STATUS, RP0
		incf	byte_DATA_66, f
		bsf	BANK0:INTCON, GIE
		b	loc_CODE_1107
; ---------------------------------------------------------------------------

loc_CODE_10F7:				; CODE XREF: RESET_0+AA3j
		movfw	byte_DATA_25
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bcf	BANK2:STATUS, RP0
		xorwf	byte_DATA_116, w
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bcf	BANK0:STATUS, RP0
		skpnz
		 bsf	 yet_more_flags2, 6
		bcf	yet_more_flags2, 1
		bcf	yet_more_flags2, 3
		clrf	byte_DATA_66
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bcf	BANK2:STATUS, RP0
		clrf	byte_DATA_116
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bcf	BANK0:STATUS, RP0

loc_CODE_1107:				; CODE XREF: RESET_0+A59j RESET_0+A5Dj ...
		bsf	BANK0:INTCON, GIE
		btfsc	some_major_flags, 7
		 b	 loc_CODE_117B
		btfsc	yet_more_flags2, 4
		 b	 loc_CODE_1133
		btfss	yet_more_flags2, 6
		 b	 loc_CODE_1155
		movfw	byte_DATA_4E	; this 4-byte divider value appears to be written by the i2c host
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte2
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	byte_DATA_4D
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte1
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	byte_DATA_4C
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte0
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	byte_DATA_4B
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte3
		clrf	math32_arg2_LSB
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	byte_DATA_4F
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg2_MSB
		call	math_32bit_probably_divide
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	yet_more_flags2, 6
		bsf	yet_more_flags2, 7
		movfw	byte_DATA_50
		movwf	byte_DATA_5E
		b	loc_CODE_1155
; ---------------------------------------------------------------------------

loc_CODE_1133:				; CODE XREF: RESET_0+AC7j
		movfw	byte_DATA_49
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte2
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	some_24bit_output_byte2
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte1
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	some_24bit_output_byte1
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte0
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	some_24bit_output_byte0
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte3
		clrf	math32_arg2_LSB
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		movfw	byte_DATA_4A
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg2_MSB
		call	math_32bit_probably_divide
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	yet_more_flags2, 4
		bsf	yet_more_flags2, 5

loc_CODE_1155:				; CODE XREF: RESET_0+AC9j RESET_0+AEEj
		btfsc	yet_more_flags2, 5
		 b	 loc_CODE_1159
		btfss	yet_more_flags2, 7
		 b	 loc_CODE_1361

loc_CODE_1159:				; CODE XREF: RESET_0+B12j
		btfsc	some_major_flags, 7
		 b	 loc_CODE_117B
		bsf	some_major_flags, 7
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		tstf	math32_arg_byte1
		bnz	loc_CODE_116C
		tstf	math32_arg_byte0
		bnz	loc_CODE_116C
		movfw	math32_arg_byte3
		sublw	1
		bnc	loc_CODE_116C
		clrf	byte_DATA_1C2
		clrf	byte_DATA_1C3
		clrf	byte_DATA_1C4
		b	loc_CODE_119A
; ---------------------------------------------------------------------------

loc_CODE_116C:				; CODE XREF: RESET_0+B1Bj RESET_0+B1Ej ...
		movfw	math32_arg_byte1
		movwf	byte_DATA_1BF
		movwf	byte_DATA_1C2
		movfw	math32_arg_byte0
		movwf	byte_DATA_1C0
		movwf	byte_DATA_1C3
		movfw	math32_arg_byte3
		movwf	byte_DATA_1C1
		movwf	byte_DATA_1C4
		clrc
		rrf	byte_DATA_1C2, f
		rrf	byte_DATA_1C3, f
		rrf	byte_DATA_1C4, f
		movlw	0E
		movwf	byte_DATA_1C5
; assume bank =	0

loc_CODE_117B:				; CODE XREF: RESET_0+AC5j RESET_0+B16j
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movfw	byte_DATA_1BF
		movwf	math32_arg_byte2
		movfw	byte_DATA_1C0
		movwf	math32_arg_byte1
		movfw	byte_DATA_1C1
		movwf	math32_arg_byte0
		movfw	byte_DATA_1C2
		movwf	math32_arg2_LSB
		movfw	byte_DATA_1C3
		movwf	math32_arg2_MSB
		movfw	byte_DATA_1C4
		movwf	byte_DATA_1B9
		call	math32_something
		movfw	math32_arg_byte0
		addwf	byte_DATA_1C4, f
		addcf	byte_DATA_1C3, f
		movfw	math32_arg_byte1
		addwf	byte_DATA_1C3, f
		addcf	byte_DATA_1C2, f
		movfw	math32_arg_byte2
		addwf	byte_DATA_1C2, f
		clrc
		rrf	byte_DATA_1C2, f
		rrf	byte_DATA_1C3, f
		rrf	byte_DATA_1C4, f
		decfsz	byte_DATA_1C5, f
		 b	 loc_CODE_1361

loc_CODE_119A:				; CODE XREF: RESET_0+B27j
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:INTCON, GIE
		bcf	some_major_flags, 7
		btfsc	yet_more_flags2, 5
		 b	 loc_CODE_11F7
		btfss	yet_more_flags2, 7
		 b	 loc_CODE_1361
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movfw	byte_DATA_1C4
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		addwf	byte_DATA_111, f
		addcf	byte_DATA_110, f
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movfw	byte_DATA_1C3
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		addwf	byte_DATA_110, f
		decfsz	byte_DATA_112, f
		 b	 loc_CODE_11F3
		movlw	10
		movwf	byte_DATA_112
		clrc
		rrf	byte_DATA_110, f
		rrf	byte_DATA_111, f
		clrc
		rrf	byte_DATA_110, f
		rrf	byte_DATA_111, f
		clrc
		rrf	byte_DATA_110, f
		rrf	byte_DATA_111, f
		clrc
		rrf	byte_DATA_110, f
		rrf	byte_DATA_111, f
		movfw	byte_DATA_110
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte2
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_111
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte1
		movlw	0C
		movwf	math32_arg2_LSB	; multiply by 30476
		movlw	77 ; 'w'
		movwf	math32_arg2_MSB
		call	Multiply16x16Eq32 ; 16x16=32bit	multiply
		movfw	math32_arg_byte1
		movwf	byte_DATA_1FA
		movfw	math32_arg_byte0
		movwf	byte_DATA_1FB
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		clrf	byte_DATA_110
		clrf	byte_DATA_111
		bsf	BANK2:STATUS, RP1
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		btfsc	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		 b	 loc_CODE_11F3
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bsf	BANK1:STATUS, RP0
		bcf	BANK1:INTCON, GIE
		movfw	temp16_msb
		movwf	input_voltage_msb
		movfw	temp16_lsb
		movwf	input_voltage_lsb
		bsf	BANK1:INTCON, GIE
		clrc
		rlf	temp16_lsb, f	; <<3 and take msb
		rlf	temp16_msb, f
		rlf	temp16_lsb, f
		rlf	temp16_msb, f
		rlf	temp16_lsb, f
		rlf	temp16_msb, f
		movlw	0FE ; 'þ'
		skpc
		 movfw	 temp16_msb
		movwf	input_voltage_shifted_up_a_bit
		movfw	input_voltage_msb
		movwf	temp16_msb
		movfw	input_voltage_lsb
		movwf	temp16_lsb
		clrc
		rlf	temp16_lsb, f	; <<2 and take MSB
		rlf	temp16_msb, f
		rlf	temp16_lsb, f
		rlf	temp16_msb, f
		movfw	temp16_msb
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	input_voltage_volts

loc_CODE_11F3:				; CODE XREF: RESET_0+B6Aj RESET_0+B8Fj
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	yet_more_flags2, 7
		b	loc_CODE_1361
; ---------------------------------------------------------------------------

loc_CODE_11F7:				; CODE XREF: RESET_0+B5Bj
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movfw	byte_DATA_1C4
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		addwf	byte_DATA_114, f
		addcf	byte_DATA_113, f
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movfw	byte_DATA_1C3
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		addwf	byte_DATA_113, f
		decfsz	byte_DATA_115, f
		 b	 loc_CODE_135E
		movlw	10
		movwf	byte_DATA_115
		clrc
		rrf	byte_DATA_113, f
		rrf	byte_DATA_114, f
		clrc
		rrf	byte_DATA_113, f
		rrf	byte_DATA_114, f
		clrc
		rrf	byte_DATA_113, f
		rrf	byte_DATA_114, f
		clrc
		rrf	byte_DATA_113, f
		rrf	byte_DATA_114, f
		movfw	byte_DATA_113
		movwf	byte_DATA_17A
		movfw	byte_DATA_114
		movwf	byte_DATA_17B
		bcf	BANK2:STATUS, RP0
		bsf	BANK2:STATUS, RP1
		btfss	byte_DATA_125, 3
		 b	 loc_CODE_1340
		movlw	0A0 ; ' '
		subwf	byte_DATA_171, w
		bc	loc_CODE_1229
		movfw	byte_DATA_158
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte2
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_157
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte1
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_159
		movwf	byte_DATA_14C
		b	loc_CODE_1233
; ---------------------------------------------------------------------------

loc_CODE_1229:				; CODE XREF: RESET_0+BD8j
		movfw	byte_DATA_155
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte2
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_154
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte1
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_156
		movwf	byte_DATA_14C

loc_CODE_1233:				; CODE XREF: RESET_0+BE4j
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movfw	byte_DATA_1FA
		movwf	math32_arg2_LSB
		movfw	byte_DATA_1FB
		movwf	math32_arg2_MSB
		call	Multiply16x16Eq32 ; 16x16=32bit	multiply
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		btfsc	byte_DATA_14C, 7
		 b	 loc_CODE_1248
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movfw	math32_arg_byte1
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movwf	byte_DATA_17A
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movfw	math32_arg_byte0
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		addwf	byte_DATA_14C, w
		movwf	byte_DATA_17B
		addcf	byte_DATA_17A, f
		b	loc_CODE_125B
; ---------------------------------------------------------------------------

loc_CODE_1248:				; CODE XREF: RESET_0+BF7j
		bcf	byte_DATA_14C, 7
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movfw	math32_arg_byte1
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movwf	byte_DATA_17A
		movfw	byte_DATA_14C
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		subwf	math32_arg_byte0, w
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movwf	byte_DATA_17B
		bc	loc_CODE_125B
		tstf	byte_DATA_17A
		bnz	loc_CODE_125A
		clrf	byte_DATA_17A
		clrf	byte_DATA_17B
		b	loc_CODE_125B
; ---------------------------------------------------------------------------

loc_CODE_125A:				; CODE XREF: RESET_0+C11j
		decf	byte_DATA_17A, f

loc_CODE_125B:				; CODE XREF: RESET_0+C03j RESET_0+C0Ej ...
		bcf	BANK2:STATUS, RP0
		bsf	BANK2:STATUS, RP1
		movlw	0A0 ; ' '
		subwf	byte_DATA_171, w
		bc	loc_CODE_12AB
		movfw	byte_DATA_17A
		subwf	byte_DATA_137, w
		bnc	loc_CODE_1276
		bnz	loc_CODE_126B
		movfw	byte_DATA_17B
		subwf	byte_DATA_136, w
		bnc	loc_CODE_1276

loc_CODE_126B:				; CODE XREF: RESET_0+C21j
		movfw	byte_DATA_12E
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte2
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_12D
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte1
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_12F
		movwf	byte_DATA_14C
		b	loc_CODE_12F2
; ---------------------------------------------------------------------------

loc_CODE_1276:				; CODE XREF: RESET_0+C1Fj RESET_0+C25j
		movfw	byte_DATA_17A
		subwf	byte_DATA_139, w
		bnc	loc_CODE_128B
		bnz	loc_CODE_1280
		movfw	byte_DATA_17B
		subwf	byte_DATA_138, w
		bnc	loc_CODE_128B

loc_CODE_1280:				; CODE XREF: RESET_0+C36j
		movfw	byte_DATA_131
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte2
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_130
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte1
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_132
		movwf	byte_DATA_14C
		b	loc_CODE_12F2
; ---------------------------------------------------------------------------

loc_CODE_128B:				; CODE XREF: RESET_0+C34j RESET_0+C3Aj
		movfw	byte_DATA_17A
		subwf	byte_DATA_14B, w
		bnc	loc_CODE_12A0
		bnz	loc_CODE_1295
		movfw	byte_DATA_17B
		subwf	byte_DATA_14A, w
		bnc	loc_CODE_12A0

loc_CODE_1295:				; CODE XREF: RESET_0+C4Bj
		movfw	byte_DATA_134
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte2
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_133
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte1
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_135
		movwf	byte_DATA_14C
		b	loc_CODE_12F2
; ---------------------------------------------------------------------------

loc_CODE_12A0:				; CODE XREF: RESET_0+C49j RESET_0+C4Fj
		movfw	byte_DATA_148
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte2
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_147
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte1
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_149
		movwf	byte_DATA_14C
		b	loc_CODE_12F2
; ---------------------------------------------------------------------------

loc_CODE_12AB:				; CODE XREF: RESET_0+C1Bj
		movfw	byte_DATA_17A
		sublw	0
		bnc	loc_CODE_12BE
		bnz	loc_CODE_12B5
		movfw	byte_DATA_17B
		sublw	1A
		bnc	loc_CODE_12BE

loc_CODE_12B5:				; CODE XREF: RESET_0+C6Bj
		movlw	1
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte2
		movlw	0
		movwf	math32_arg_byte1
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movlw	5
		movwf	byte_DATA_14C
		b	loc_CODE_12F2
; ---------------------------------------------------------------------------

loc_CODE_12BE:				; CODE XREF: RESET_0+C69j RESET_0+C6Fj
		movfw	byte_DATA_17A
		subwf	byte_DATA_144, w
		bnc	loc_CODE_12D3
		bnz	loc_CODE_12C8
		movfw	byte_DATA_17B
		subwf	byte_DATA_143, w
		bnc	loc_CODE_12D3

loc_CODE_12C8:				; CODE XREF: RESET_0+C7Ej
		movfw	byte_DATA_13B
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte2
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_13A
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte1
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_13C
		movwf	byte_DATA_14C
		b	loc_CODE_12F2
; ---------------------------------------------------------------------------

loc_CODE_12D3:				; CODE XREF: RESET_0+C7Cj RESET_0+C82j
		movfw	byte_DATA_17A
		subwf	byte_DATA_146, w
		bnc	loc_CODE_12E8
		bnz	loc_CODE_12DD
		movfw	byte_DATA_17B
		subwf	byte_DATA_145, w
		bnc	loc_CODE_12E8

loc_CODE_12DD:				; CODE XREF: RESET_0+C93j
		movfw	byte_DATA_13E
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte2
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_13D
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte1
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_13F
		movwf	byte_DATA_14C
		b	loc_CODE_12F2
; ---------------------------------------------------------------------------

loc_CODE_12E8:				; CODE XREF: RESET_0+C91j RESET_0+C97j
		movfw	byte_DATA_141
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte2
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_140
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte1
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_142
		movwf	byte_DATA_14C

loc_CODE_12F2:				; CODE XREF: RESET_0+C31j RESET_0+C46j ...
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movfw	byte_DATA_1FA
		movwf	math32_arg2_LSB
		movfw	byte_DATA_1FB
		movwf	math32_arg2_MSB
		call	Multiply16x16Eq32 ; 16x16=32bit	multiply
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		btfsc	byte_DATA_14C, 7
		 b	 loc_CODE_1307
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movfw	math32_arg_byte1
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movwf	byte_DATA_17A
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movfw	math32_arg_byte0
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		addwf	byte_DATA_14C, w
		movwf	byte_DATA_17B
		addcf	byte_DATA_17A, f
		b	loc_CODE_131A
; ---------------------------------------------------------------------------

loc_CODE_1307:				; CODE XREF: RESET_0+CB6j
		bcf	byte_DATA_14C, 7
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movfw	math32_arg_byte1
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movwf	byte_DATA_17A
		movfw	byte_DATA_14C
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		subwf	math32_arg_byte0, w
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movwf	byte_DATA_17B
		bc	loc_CODE_131A
		tstf	byte_DATA_17A
		bnz	loc_CODE_1319
		clrf	byte_DATA_17A
		clrf	byte_DATA_17B
		b	loc_CODE_131A
; ---------------------------------------------------------------------------

loc_CODE_1319:				; CODE XREF: RESET_0+CD0j
		decf	byte_DATA_17A, f

loc_CODE_131A:				; CODE XREF: RESET_0+CC2j RESET_0+CCDj ...
		bsf	BANK2:STATUS, RP1
		bcf	BANK2:STATUS, RP0
		clrf	byte_DATA_113
		clrf	byte_DATA_114
		bcf	BANK2:STATUS, RP0
		bsf	BANK2:STATUS, RP1
		movlw	0A0 ; ' '
		subwf	byte_DATA_171, w
		bnc	loc_CODE_1340
		tstf	byte_DATA_17A
		bnz	loc_CODE_1340
		movfw	byte_DATA_17B
		sublw	45 ; 'E'
		bnc	loc_CODE_1340
		movfw	byte_DATA_15C
		movwf	byte_DATA_14C
		btfsc	byte_DATA_14C, 7
		 b	 loc_CODE_1334
		movfw	byte_DATA_14C
		addwf	byte_DATA_17B, f
		addcf	byte_DATA_17A, f
		b	loc_CODE_1340
; ---------------------------------------------------------------------------

loc_CODE_1334:				; CODE XREF: RESET_0+CEAj
		bcf	byte_DATA_14C, 7
		movfw	byte_DATA_14C
		subwf	byte_DATA_17B, f
		bc	loc_CODE_1340
		tstf	byte_DATA_17A
		bnz	loc_CODE_133F
		clrf	byte_DATA_17A
		clrf	byte_DATA_17B
		b	loc_CODE_1340
; ---------------------------------------------------------------------------

loc_CODE_133F:				; CODE XREF: RESET_0+CF6j
		decf	byte_DATA_17A, f

loc_CODE_1340:				; CODE XREF: RESET_0+BD5j RESET_0+CDEj ...
		bsf	BANK2:STATUS, RP1
		bcf	BANK2:STATUS, RP0
		clrf	byte_DATA_113
		clrf	byte_DATA_114
		bsf	BANK2:STATUS, RP1
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		btfsc	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		 b	 loc_CODE_135E
		bsf	BANK3:STATUS, RP1
		bsf	BANK3:STATUS, RP0
		bcf	BANK3:INTCON, GIE
		movfw	byte_DATA_1FB
		movwf	input_current_msb
		movfw	byte_DATA_1FA
		movwf	input_current_lsb
		bsf	BANK3:INTCON, GIE
		clrc
		rlf	byte_DATA_1FB, f
		rlf	byte_DATA_1FA, f
		rlf	byte_DATA_1FB, f
		rlf	byte_DATA_1FA, f
		rlf	byte_DATA_1FB, f
		rlf	byte_DATA_1FA, f
		rlf	byte_DATA_1FB, f
		rlf	byte_DATA_1FA, f
		rlf	byte_DATA_1FB, f
		rlf	byte_DATA_1FA, f
		rlf	byte_DATA_1FB, f
		rlf	byte_DATA_1FA, f
		movfw	byte_DATA_1FA

loc_CODE_135E:				; CODE XREF: RESET_0+BBFj RESET_0+D03j
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	yet_more_flags2, 5

loc_CODE_1361:				; CODE XREF: RESET_0+B14j RESET_0+B55j ...
		bcf	BANK0:STATUS, RP1
		bcf	BANK0:STATUS, RP0
		bsf	BANK0:INTCON, GIE
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		btfsc	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		 b	 loc_CODE_14D5	; maintain max output current record
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	some_major_flags, 1
		 b	 loc_CODE_14C9
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bcf	BANK2:INTCON, GIE
		movfw	ADCChannel1MSB
		movwf	byte_DATA_17A
		movfw	ADCChannel1LSB
		movwf	byte_DATA_17B
		bsf	BANK2:INTCON, GIE
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		movfw	byte_DATA_17B
		addwf	byte_DATA_164, f
		addcf	byte_DATA_165, f
		movfw	byte_DATA_17A
		addwf	byte_DATA_165, f
		incf	byte_DATA_166, f
		btfss	byte_DATA_166, 6
		 b	 loc_CODE_14D5	; maintain max output current record
		clrf	byte_DATA_166
		movfw	byte_DATA_164
		movwf	byte_DATA_17B
		movwf	byte_DATA_15E
		movfw	byte_DATA_165
		movwf	byte_DATA_17A
		bcf	BANK2:STATUS, RP0
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		movwf	byte_DATA_72
		bcf	BANK0:STATUS, RP0
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		clrf	byte_DATA_164
		clrf	byte_DATA_165
		bcf	BANK2:STATUS, RP0
		bsf	BANK2:STATUS, RP1
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		movfw	byte_DATA_17A
		movwf	byte_DATA_162
		movfw	byte_DATA_17B
		movwf	byte_DATA_161
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		clrc
		rrf	byte_DATA_17A, f
		rrf	byte_DATA_17B, f
		movfw	byte_DATA_161
		addwf	byte_DATA_17B, f
		addcf	byte_DATA_17A, f
		movfw	byte_DATA_162
		addwf	byte_DATA_17A, f
		bcf	BANK2:STATUS, RP0
		bsf	BANK2:STATUS, RP1
		btfss	byte_DATA_125, 3
		 b	 loc_CODE_14A2
		movfw	byte_DATA_151
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte2
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_150
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	math32_arg_byte1
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_153
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	byte_DATA_1ED
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_152
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	byte_DATA_1EC
		movfw	byte_DATA_1FA
		movwf	math32_arg2_LSB
		movfw	byte_DATA_1FB
		movwf	math32_arg2_MSB
		call	Multiply16x16Eq32 ; 16x16=32bit	multiply
		btfsc	byte_DATA_1ED, 7
		 b	 loc_CODE_13D9
		movfw	math32_arg_byte1
		addwf	byte_DATA_1ED, w
		movwf	byte_DATA_1FA
		movfw	math32_arg_byte0
		addwf	byte_DATA_1EC, w
		movwf	byte_DATA_1FB
		addcf	byte_DATA_1FA, f
		b	loc_CODE_13EE
; ---------------------------------------------------------------------------

loc_CODE_13D9:				; CODE XREF: RESET_0+D8Bj
		bcf	byte_DATA_1ED, 7
		movfw	byte_DATA_1ED
		subwf	math32_arg_byte1, w
		movwf	byte_DATA_1FA
		bc	loc_CODE_13E2
		clrf	byte_DATA_1FA
		clrf	byte_DATA_1FB
		b	loc_CODE_13EE
; ---------------------------------------------------------------------------

loc_CODE_13E2:				; CODE XREF: RESET_0+D99j
		movfw	byte_DATA_1EC
		subwf	math32_arg_byte0, w
		movwf	byte_DATA_1FB
		bc	loc_CODE_13EE
		tstf	byte_DATA_1FA
		bnz	loc_CODE_13ED
		clrf	byte_DATA_1FA
		clrf	byte_DATA_1FB
		b	loc_CODE_13EE
; ---------------------------------------------------------------------------

loc_CODE_13ED:				; CODE XREF: RESET_0+DA4j
		decf	byte_DATA_1FA, f

loc_CODE_13EE:				; CODE XREF: RESET_0+D94j RESET_0+D9Dj ...
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		bsf	BANK2:STATUS, RP1
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movfw	byte_DATA_1FA
		subwf	byte_DATA_1E5, w
		bnc	loc_CODE_1404
		bnz	loc_CODE_13FB
		movfw	byte_DATA_1FB
		subwf	byte_DATA_1E4, w
		bnc	loc_CODE_1404

loc_CODE_13FB:				; CODE XREF: RESET_0+DB1j
		movfw	byte_DATA_1D1
		movwf	math32_arg_byte2
		movfw	byte_DATA_1D0
		movwf	math32_arg_byte1
		movfw	byte_DATA_1D3
		movwf	byte_DATA_1ED
		movfw	byte_DATA_1D2
		movwf	byte_DATA_1EC
		b	loc_CODE_1445
; ---------------------------------------------------------------------------

loc_CODE_1404:				; CODE XREF: RESET_0+DAFj RESET_0+DB5j
		movfw	byte_DATA_1FA
		subwf	byte_DATA_1E7, w
		bnc	loc_CODE_1417
		bnz	loc_CODE_140E
		movfw	byte_DATA_1FB
		subwf	byte_DATA_1E6, w
		bnc	loc_CODE_1417

loc_CODE_140E:				; CODE XREF: RESET_0+DC4j
		movfw	byte_DATA_1D5
		movwf	math32_arg_byte2
		movfw	byte_DATA_1D4
		movwf	math32_arg_byte1
		movfw	byte_DATA_1D7
		movwf	byte_DATA_1ED
		movfw	byte_DATA_1D6
		movwf	byte_DATA_1EC
		b	loc_CODE_1445
; ---------------------------------------------------------------------------

loc_CODE_1417:				; CODE XREF: RESET_0+DC2j RESET_0+DC8j
		movfw	byte_DATA_1FA
		subwf	byte_DATA_1E9, w
		bnc	loc_CODE_142A
		bnz	loc_CODE_1421
		movfw	byte_DATA_1FB
		subwf	byte_DATA_1E8, w
		bnc	loc_CODE_142A

loc_CODE_1421:				; CODE XREF: RESET_0+DD7j
		movfw	byte_DATA_1D9
		movwf	math32_arg_byte2
		movfw	byte_DATA_1D8
		movwf	math32_arg_byte1
		movfw	byte_DATA_1DB
		movwf	byte_DATA_1ED
		movfw	byte_DATA_1DA
		movwf	byte_DATA_1EC
		b	loc_CODE_1445
; ---------------------------------------------------------------------------

loc_CODE_142A:				; CODE XREF: RESET_0+DD5j RESET_0+DDBj
		movfw	byte_DATA_1FA
		subwf	byte_DATA_1EB, w
		bnc	loc_CODE_143D
		bnz	loc_CODE_1434
		movfw	byte_DATA_1FB
		subwf	byte_DATA_1EA, w
		bnc	loc_CODE_143D

loc_CODE_1434:				; CODE XREF: RESET_0+DEAj
		movfw	byte_DATA_1DD
		movwf	math32_arg_byte2
		movfw	byte_DATA_1DC
		movwf	math32_arg_byte1
		movfw	byte_DATA_1DF
		movwf	byte_DATA_1ED
		movfw	byte_DATA_1DE
		movwf	byte_DATA_1EC
		b	loc_CODE_1445
; ---------------------------------------------------------------------------

loc_CODE_143D:				; CODE XREF: RESET_0+DE8j RESET_0+DEEj
		movfw	byte_DATA_1E1
		movwf	math32_arg_byte2
		movfw	byte_DATA_1E0
		movwf	math32_arg_byte1
		movfw	byte_DATA_1E3
		movwf	byte_DATA_1ED
		movfw	byte_DATA_1E2
		movwf	byte_DATA_1EC

loc_CODE_1445:				; CODE XREF: RESET_0+DBFj RESET_0+DD2j ...
		movfw	byte_DATA_1FA
		movwf	math32_arg2_LSB
		movfw	byte_DATA_1FB
		movwf	math32_arg2_MSB
		call	Multiply16x16Eq32 ; 16x16=32bit	multiply
		btfsc	byte_DATA_1ED, 7
		 b	 loc_CODE_1455
		movfw	math32_arg_byte1
		addwf	byte_DATA_1ED, w
		movwf	byte_DATA_1FA
		movfw	math32_arg_byte0
		addwf	byte_DATA_1EC, w
		movwf	byte_DATA_1FB
		addcf	byte_DATA_1FA, f
		b	loc_CODE_146A
; ---------------------------------------------------------------------------

loc_CODE_1455:				; CODE XREF: RESET_0+E07j
		bcf	byte_DATA_1ED, 7
		movfw	byte_DATA_1ED
		subwf	math32_arg_byte1, w
		movwf	byte_DATA_1FA
		bc	loc_CODE_145E
		clrf	byte_DATA_1FA
		clrf	byte_DATA_1FB
		b	loc_CODE_146A
; ---------------------------------------------------------------------------

loc_CODE_145E:				; CODE XREF: RESET_0+E15j
		movfw	byte_DATA_1EC
		subwf	math32_arg_byte0, w
		movwf	byte_DATA_1FB
		bc	loc_CODE_146A
		tstf	byte_DATA_1FA
		bnz	loc_CODE_1469
		clrf	byte_DATA_1FA
		clrf	byte_DATA_1FB
		b	loc_CODE_146A
; ---------------------------------------------------------------------------

loc_CODE_1469:				; CODE XREF: RESET_0+E20j
		decf	byte_DATA_1FA, f

loc_CODE_146A:				; CODE XREF: RESET_0+E10j RESET_0+E19j ...
		bsf	BANK3:STATUS, RP0
		bsf	BANK3:STATUS, RP1
		movfw	byte_DATA_1FA
		subwf	byte_DATA_1E7, w
		bnc	loc_CODE_14A2
		bnz	loc_CODE_1476
		movfw	byte_DATA_1FB
		subwf	byte_DATA_1E6, w
		bnc	loc_CODE_14A2

loc_CODE_1476:				; CODE XREF: RESET_0+E2Cj
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_15B
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	byte_DATA_1ED
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		movfw	byte_DATA_15A
		bsf	BANK2:STATUS, RP0
; assume bank =	3
		movwf	byte_DATA_1EC
		movfw	byte_DATA_1FA
		movwf	math32_arg_byte1
		movfw	byte_DATA_1FB
		movwf	math32_arg_byte0
		btfsc	byte_DATA_1ED, 7
		 b	 loc_CODE_148D
		movfw	math32_arg_byte1
		addwf	byte_DATA_1ED, w
		movwf	byte_DATA_1FA
		movfw	math32_arg_byte0
		addwf	byte_DATA_1EC, w
		movwf	byte_DATA_1FB
		addcf	byte_DATA_1FA, f
		b	loc_CODE_14A2
; ---------------------------------------------------------------------------

loc_CODE_148D:				; CODE XREF: RESET_0+E3Fj
		bcf	byte_DATA_1ED, 7
		movfw	byte_DATA_1ED
		subwf	math32_arg_byte1, w
		movwf	byte_DATA_1FA
		bc	loc_CODE_1496
		clrf	byte_DATA_1FA
		clrf	byte_DATA_1FB
		b	loc_CODE_14A2
; ---------------------------------------------------------------------------

loc_CODE_1496:				; CODE XREF: RESET_0+E4Dj
		movfw	byte_DATA_1EC
		subwf	math32_arg_byte0, w
		movwf	byte_DATA_1FB
		bc	loc_CODE_14A2
		tstf	byte_DATA_1FA
		bnz	loc_CODE_14A1
		clrf	byte_DATA_1FA
		clrf	byte_DATA_1FB
		b	loc_CODE_14A2
; ---------------------------------------------------------------------------

loc_CODE_14A1:				; CODE XREF: RESET_0+E58j
		decf	byte_DATA_1FA, f

loc_CODE_14A2:				; CODE XREF: RESET_0+D75j RESET_0+E2Aj ...
		bsf	BANK3:STATUS, RP0
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	temp16_msb
		sublw	0
		bnc	loc_CODE_14B7
		bnz	loc_CODE_14AE
		movfw	temp16_lsb
		sublw	0BF ; '¿'
		bnc	loc_CODE_14B7

loc_CODE_14AE:				; CODE XREF: RESET_0+E64j
		bcf	BANK1:INTCON, GIE
		clrf	OutputCurrentMSB
		movlw	0C0 ; 'À'
		movwf	OutputCurrentLSB
; assume bank =	3

loc_CODE_14B2:				; CODE XREF: RESET_0+E90j
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bsf	BANK1:STATUS, RP0
		bsf	BANK1:INTCON, GIE
		bsf	surprise_more_flags, 4
		b	loc_CODE_14C0
; ---------------------------------------------------------------------------

loc_CODE_14B7:				; CODE XREF: RESET_0+E62j RESET_0+E68j
		bcf	BANK1:INTCON, GIE
		movfw	temp16_lsb
		bsf	BANK1:STATUS, RP0
		bcf	BANK1:STATUS, RP1
		movwf	OutputCurrentLSB
		movfw	temp16_msb
		movwf	OutputCurrentMSB
		bsf	BANK1:INTCON, GIE
		bcf	surprise_more_flags, 4

loc_CODE_14C0:				; CODE XREF: RESET_0+E72j
		bsf	BANK1:STATUS, RP0
		clrc
		rlf	temp16_lsb, f
		rlf	temp16_msb, f
		movfw	temp16_msb
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	byte_DATA_1AD
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		b	loc_CODE_14D5	; maintain max output current record
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_14C9:				; CODE XREF: RESET_0+D27j
		bsf	BANK0:STATUS, RP1
; assume bank =	2
		bcf	BANK2:STATUS, RP0
		clrf	byte_DATA_164
		clrf	byte_DATA_165
		clrf	byte_DATA_166
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	OutputCurrentLSB
		clrf	OutputCurrentMSB
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		clrf	byte_DATA_1AD
		b	loc_CODE_14B2
; ---------------------------------------------------------------------------
; assume bank =	1

loc_CODE_14D5:				; CODE XREF: RESET_0+D23j RESET_0+D49j ...
		bsf	BANK1:STATUS, RP1 ; maintain max output	current	record
; assume bank =	3
		bsf	BANK3:STATUS, RP0
		btfsc	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		 b	 DoneMaxCurrentUpdate
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	some_major_flags, 1
		 b	 ResetMaxCurrentMeasurement
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movfw	MaxRecordedCurrentMSB
		subwf	OutputCurrentMSB, w
		bnc	DoneMaxCurrentUpdate
		movfw	OutputCurrentMSB
		xorwf	MaxRecordedCurrentMSB, w
		bnz	loc_CODE_14EA
		movfw	OutputCurrentLSB
		subwf	MaxRecordedCurrentLSB, w
		bc	DoneMaxCurrentUpdate

loc_CODE_14EA:				; CODE XREF: RESET_0+EA0j
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfsc	i2c_flags3, 5
		 b	 DoneMaxCurrentUpdate
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	BANK1:INTCON, GIE
		movfw	OutputCurrentLSB
		movwf	MaxRecordedCurrentLSB
		movfw	OutputCurrentMSB
		movwf	MaxRecordedCurrentMSB
		bsf	BANK1:INTCON, GIE
		b	DoneMaxCurrentUpdate
; ---------------------------------------------------------------------------
; assume bank =	0

ResetMaxCurrentMeasurement:		; CODE XREF: RESET_0+E98j
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	MaxRecordedCurrentLSB
		clrf	MaxRecordedCurrentMSB

DoneMaxCurrentUpdate:			; CODE XREF: RESET_0+E94j RESET_0+E9Cj ...
		bcf	BANK1:STATUS, RP1
		bsf	BANK1:STATUS, RP0
		btfss	readable_flags_lsb, 1
		 b	 loc_CODE_151C
		movfw	input_voltage_msb
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	math32_arg_byte2
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	input_voltage_lsb
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	math32_arg_byte1
		movfw	input_current_lsb
		movwf	math32_arg2_LSB
		movfw	input_current_msb
		movwf	math32_arg2_MSB
		call	Multiply16x16Eq32 ; 16x16=32bit	multiply
		clrc
		rrf	math32_arg_byte2, f
		rrf	math32_arg_byte1, f
		rrf	math32_arg_byte0, f
		clrc
		rrf	math32_arg_byte2, f
		rrf	math32_arg_byte1, f
		rrf	math32_arg_byte0, f
		clrc
		rrf	math32_arg_byte2, f
		rrf	math32_arg_byte1, f
		rrf	math32_arg_byte0, f
		bcf	BANK3:INTCON, GIE
		movfw	math32_arg_byte1
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movwf	input_watts_msb
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movfw	math32_arg_byte0
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movwf	input_watts_lsb

loc_CODE_151C:				; CODE XREF: RESET_0+EB7j
		bsf	BANK1:INTCON, GIE
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		bsf	BANK3:STATUS, RP0
		btfsc	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		 b	 loc_CODE_1557
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	some_major_flags, 1
		 b	 loc_CODE_1553
		btfsc	i2c_flags1, 0	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 loc_CODE_1553
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movfw	OutputVoltageMSB
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	math32_arg_byte2
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	OutputVoltageLSB
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	math32_arg_byte1
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	OutputCurrentMSB
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	math32_arg2_LSB
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	OutputCurrentLSB
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	math32_arg2_MSB
		call	Multiply16x16Eq32 ; 16x16=32bit	multiply
		clrc
		rlf	math32_arg_byte0, f ; <<2
		rlf	math32_arg_byte1, f
		rlf	math32_arg_byte2, f
		clrc
		rlf	math32_arg_byte0, f
		rlf	math32_arg_byte1, f
		rlf	math32_arg_byte2, f
		bcf	BANK3:INTCON, GIE
		tstf	math32_arg_byte2
		bnz	loc_CODE_154B
		movfw	math32_arg_byte1
		sublw	24 ; '$'
		bnc	loc_CODE_154B
		movlw	24 ; '$'
		movwf	math32_arg_byte1
		clrf	math32_arg_byte2

loc_CODE_154B:				; CODE XREF: RESET_0+EFEj RESET_0+F02j
		movfw	math32_arg_byte2
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movwf	WattsOutMSB
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movfw	math32_arg_byte1
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movwf	WattsOutLSB
		b	loc_CODE_1557
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_1553:				; CODE XREF: RESET_0+EE0j RESET_0+EE2j
		bcf	BANK0:STATUS, RP1
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	WattsOutLSB
		clrf	WattsOutMSB

loc_CODE_1557:				; CODE XREF: RESET_0+EDCj RESET_0+F0Ej
		bcf	BANK1:STATUS, RP1
		bsf	BANK1:STATUS, RP0
		btfss	readable_flags_lsb, 1
		 b	 loc_CODE_1596
		tstf	input_watts_msb
		bnz	loc_CODE_1572
		movfw	input_watts_lsb
		sublw	32 ; '2'
		bnc	loc_CODE_1572
		b	loc_CODE_1563
; ---------------------------------------------------------------------------

loc_CODE_1563:				; CODE XREF: RESET_0+F1Ej
		bcf	BANK1:INTCON, GIE
		bsf	surprise_more_flags, 2
		clrf	input_watts_msb
		movlw	32 ; '2'
		movwf	input_watts_lsb
		bcf	BANK1:INTCON, GIE
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movfw	input_current_lsb
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movwf	InputCurrentMSB
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movfw	input_current_msb
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movwf	InputCurrentLSB
		b	loc_CODE_157C
; ---------------------------------------------------------------------------

loc_CODE_1572:				; CODE XREF: RESET_0+F18j RESET_0+F1Cj
		bcf	BANK1:INTCON, GIE
		bcf	surprise_more_flags, 2
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movfw	input_current_lsb
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movwf	InputCurrentMSB
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movfw	input_current_msb
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movwf	InputCurrentLSB

loc_CODE_157C:				; CODE XREF: RESET_0+F2Dj
		bsf	BANK1:INTCON, GIE
		movfw	input_watts_msb
		subwf	WattsOutMSB, w
		bnc	loc_CODE_1592
		bnz	loc_CODE_158A
		movfw	WattsOutLSB
		subwf	input_watts_lsb, w
		bnc	loc_CODE_158A
		bz	loc_CODE_158A
		b	loc_CODE_1592
; ---------------------------------------------------------------------------

loc_CODE_158A:				; CODE XREF: RESET_0+F3Dj RESET_0+F41j ...
		movfw	WattsOutMSB
		movwf	input_watts_msb
		movfw	WattsOutLSB
		movwf	input_watts_lsb
		clrc
		incf	input_watts_lsb, f
		skpnz
		 incf	 input_watts_msb, f

loc_CODE_1592:				; CODE XREF: RESET_0+F3Bj RESET_0+F45j
		movfw	input_watts_msb
		movwf	WattsInMSB
		movfw	input_watts_lsb
		movwf	WattsInLSB

loc_CODE_1596:				; CODE XREF: RESET_0+F16j
		bsf	BANK1:INTCON, GIE
		bsf	BANK1:PCLATH, 3
; assume pclath	= 18
		bsf	BANK1:PCLATH, 4
		b	loc_CODE_1800
; END OF FUNCTION CHUNK	FOR RESET_0
; assume bank =	3
; assume pclath	= 10

; =============== S U B	R O U T	I N E =======================================


math_32bit_probably_divide:		; CODE XREF: RESET_0+AE7p RESET_0+B0Cp
		clrf	math32_dev_byte1
		clrf	math32_dev_byte0
		clrf	math32_dev_byte2
		rlf	math32_arg_byte2, w
		rlf	math32_dev_byte0, f
		movfw	math32_arg2_MSB
		subwf	math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpc
		 incfsz	 math32_arg2_LSB, w
		 subwf	 math32_dev_byte1, f
		clrw
		skpc
		 movlw	 1
		subwf	math32_dev_byte2, f
		rlf	math32_arg_byte2, f
		movlw	7
		movwf	loop_count

loc_CODE_15AC:				; CODE XREF: math_32bit_probably_divide+2Ej
		rlf	math32_arg_byte2, w
		rlf	math32_dev_byte0, f
		rlf	math32_dev_byte1, f
		rlf	math32_dev_byte2, f
		movfw	math32_arg2_MSB
		btfss	math32_arg_byte2, 0
		 b	 loc_CODE_15BD
		subwf	math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpc
		 incfsz	 math32_arg2_LSB, w
		 subwf	 math32_dev_byte1, f
		clrw
		skpc
		 movlw	 1
		subwf	math32_dev_byte2, f
		b	loc_CODE_15C6
; ---------------------------------------------------------------------------

loc_CODE_15BD:				; CODE XREF: math_32bit_probably_divide+18j
		addwf	math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpnc
		 incfsz	 math32_arg2_LSB, w
		 addwf	 math32_dev_byte1, f
		clrw
		skpnc
		 movlw	 1
		addwf	math32_dev_byte2, f

loc_CODE_15C6:				; CODE XREF: math_32bit_probably_divide+22j
		rlf	math32_arg_byte2, f
		decfsz	loop_count, f
		 b	 loc_CODE_15AC
		rlf	math32_arg_byte1, w
		rlf	math32_dev_byte0, f
		rlf	math32_dev_byte1, f
		rlf	math32_dev_byte2, f
		movfw	math32_arg2_MSB
		btfss	math32_arg_byte2, 0
		 b	 loc_CODE_15DA
		subwf	math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpc
		 incfsz	 math32_arg2_LSB, w
		 subwf	 math32_dev_byte1, f
		clrw
		skpc
		 movlw	 1
		subwf	math32_dev_byte2, f
		b	loc_CODE_15E3
; ---------------------------------------------------------------------------

loc_CODE_15DA:				; CODE XREF: math_32bit_probably_divide+35j
		addwf	math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpnc
		 incfsz	 math32_arg2_LSB, w
		 addwf	 math32_dev_byte1, f
		clrw
		skpnc
		 movlw	 1
		addwf	math32_dev_byte2, f

loc_CODE_15E3:				; CODE XREF: math_32bit_probably_divide+3Fj
		rlf	math32_arg_byte1, f
		movlw	7
		movwf	loop_count

loc_CODE_15E6:				; CODE XREF: math_32bit_probably_divide+68j
		rlf	math32_arg_byte1, w
		rlf	math32_dev_byte0, f
		rlf	math32_dev_byte1, f
		rlf	math32_dev_byte2, f
		movfw	math32_arg2_MSB
		btfss	math32_arg_byte1, 0
		 b	 loc_CODE_15F7
		subwf	math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpc
		 incfsz	 math32_arg2_LSB, w
		 subwf	 math32_dev_byte1, f
		clrw
		skpc
		 movlw	 1
		subwf	math32_dev_byte2, f
		b	loc_CODE_1600
; ---------------------------------------------------------------------------

loc_CODE_15F7:				; CODE XREF: math_32bit_probably_divide+52j
		addwf	math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpnc
		 incfsz	 math32_arg2_LSB, w
		 addwf	 math32_dev_byte1, f
		clrw
		skpnc
		 movlw	 1
		addwf	math32_dev_byte2, f

loc_CODE_1600:				; CODE XREF: math_32bit_probably_divide+5Cj
		rlf	math32_arg_byte1, f
		decfsz	loop_count, f
		 b	 loc_CODE_15E6
		rlf	math32_arg_byte0, w
		rlf	math32_dev_byte0, f
		rlf	math32_dev_byte1, f
		rlf	math32_dev_byte2, f
		movfw	math32_arg2_MSB
		btfss	math32_arg_byte1, 0
		 b	 loc_CODE_1614
		subwf	math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpc
		 incfsz	 math32_arg2_LSB, w
		 subwf	 math32_dev_byte1, f
		clrw
		skpc
		 movlw	 1
		subwf	math32_dev_byte2, f
		b	loc_CODE_161D
; ---------------------------------------------------------------------------

loc_CODE_1614:				; CODE XREF: math_32bit_probably_divide+6Fj
		addwf	math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpnc
		 incfsz	 math32_arg2_LSB, w
		 addwf	 math32_dev_byte1, f
		clrw
		skpnc
		 movlw	 1
		addwf	math32_dev_byte2, f

loc_CODE_161D:				; CODE XREF: math_32bit_probably_divide+79j
		rlf	math32_arg_byte0, f
		movlw	7
		movwf	loop_count

loc_CODE_1620:				; CODE XREF: math_32bit_probably_divide+A2j
		rlf	math32_arg_byte0, w
		rlf	math32_dev_byte0, f
		rlf	math32_dev_byte1, f
		rlf	math32_dev_byte2, f
		movfw	math32_arg2_MSB
		btfss	math32_arg_byte0, 0
		 b	 loc_CODE_1631
		subwf	math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpc
		 incfsz	 math32_arg2_LSB, w
		 subwf	 math32_dev_byte1, f
		clrw
		skpc
		 movlw	 1
		subwf	math32_dev_byte2, f
		b	loc_CODE_163A
; ---------------------------------------------------------------------------

loc_CODE_1631:				; CODE XREF: math_32bit_probably_divide+8Cj
		addwf	math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpnc
		 incfsz	 math32_arg2_LSB, w
		 addwf	 math32_dev_byte1, f
		clrw
		skpnc
		 movlw	 1
		addwf	math32_dev_byte2, f

loc_CODE_163A:				; CODE XREF: math_32bit_probably_divide+96j
		rlf	math32_arg_byte0, f
		decfsz	loop_count, f
		 b	 loc_CODE_1620
		rlf	math32_arg_byte3, w
		rlf	math32_dev_byte0, f
		rlf	math32_dev_byte1, f
		rlf	math32_dev_byte2, f
		movfw	math32_arg2_MSB
		btfss	math32_arg_byte0, 0
		 b	 loc_CODE_164E
		subwf	math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpc
		 incfsz	 math32_arg2_LSB, w
		 subwf	 math32_dev_byte1, f
		clrw
		skpc
		 movlw	 1
		subwf	math32_dev_byte2, f
		b	loc_CODE_1657
; ---------------------------------------------------------------------------

loc_CODE_164E:				; CODE XREF: math_32bit_probably_divide+A9j
		addwf	math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpnc
		 incfsz	 math32_arg2_LSB, w
		 addwf	 math32_dev_byte1, f
		clrw
		skpnc
		 movlw	 1
		addwf	math32_dev_byte2, f

loc_CODE_1657:				; CODE XREF: math_32bit_probably_divide+B3j
		rlf	math32_arg_byte3, f
		movlw	7
		movwf	loop_count

loc_CODE_165A:				; CODE XREF: math_32bit_probably_divide+DCj
		rlf	math32_arg_byte3, w
		rlf	math32_dev_byte0, f
		rlf	math32_dev_byte1, f
		rlf	math32_dev_byte2, f
		movfw	math32_arg2_MSB
		btfss	math32_arg_byte3, 0
		 b	 loc_CODE_166B
		subwf	math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpc
		 incfsz	 math32_arg2_LSB, w
		 subwf	 math32_dev_byte1, f
		clrw
		skpc
		 movlw	 1
		subwf	math32_dev_byte2, f
		b	loc_CODE_1674
; ---------------------------------------------------------------------------

loc_CODE_166B:				; CODE XREF: math_32bit_probably_divide+C6j
		addwf	math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpnc
		 incfsz	 math32_arg2_LSB, w
		 addwf	 math32_dev_byte1, f
		clrw
		skpnc
		 movlw	 1
		addwf	math32_dev_byte2, f

loc_CODE_1674:				; CODE XREF: math_32bit_probably_divide+D0j
		rlf	math32_arg_byte3, f
		decfsz	loop_count, f
		 b	 loc_CODE_165A
		btfsc	math32_arg_byte3, 0
		 b	 locret_CODE_167F
		movfw	math32_arg2_MSB
		addwf	math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpnc
		 incfsz	 math32_arg2_LSB, w
		 addwf	 math32_dev_byte1, f

locret_CODE_167F:			; CODE XREF: math_32bit_probably_divide+DEj
		retlw	0
; End of function math_32bit_probably_divide


; =============== S U B	R O U T	I N E =======================================


math32_something:			; CODE XREF: RESET_0+B45p
		clrf	math32_dev_byte1
		clrf	math32_dev_byte0
		clrf	byte_DATA_1BD
		clrf	math32_dev_byte2
		rlf	math32_arg_byte2, w
		rlf	byte_DATA_1BD, f
		movfw	byte_DATA_1B9
		subwf	byte_DATA_1BD, f
		movfw	math32_arg2_MSB
		skpc
		 incfsz	 math32_arg2_MSB, w
		 subwf	 math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpc
		 incfsz	 math32_arg2_LSB, w
		 subwf	 math32_dev_byte1, f
		clrw
		skpc
		 movlw	 1
		subwf	math32_dev_byte2, f
		rlf	math32_arg_byte2, f
		movlw	7
		movwf	loop_count

loc_CODE_1697:				; CODE XREF: math32_something+3Cj
		rlf	math32_arg_byte2, w
		rlf	byte_DATA_1BD, f
		rlf	math32_dev_byte0, f
		rlf	math32_dev_byte1, f
		rlf	math32_dev_byte2, f
		movfw	byte_DATA_1B9
		btfss	math32_arg_byte2, 0
		 b	 loc_CODE_16AD
		subwf	byte_DATA_1BD, f
		movfw	math32_arg2_MSB
		skpc
		 incfsz	 math32_arg2_MSB, w
		 subwf	 math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpc
		 incfsz	 math32_arg2_LSB, w
		 subwf	 math32_dev_byte1, f
		clrw
		skpc
		 movlw	 1
		subwf	math32_dev_byte2, f
		b	loc_CODE_16BA
; ---------------------------------------------------------------------------

loc_CODE_16AD:				; CODE XREF: math32_something+1Ej
		addwf	byte_DATA_1BD, f
		movfw	math32_arg2_MSB
		skpnc
		 incfsz	 math32_arg2_MSB, w
		 addwf	 math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpnc
		 incfsz	 math32_arg2_LSB, w
		 addwf	 math32_dev_byte1, f
		clrw
		skpnc
		 movlw	 1
		addwf	math32_dev_byte2, f

loc_CODE_16BA:				; CODE XREF: math32_something+2Cj
		rlf	math32_arg_byte2, f
		decfsz	loop_count, f
		 b	 loc_CODE_1697
		rlf	math32_arg_byte1, w
		rlf	byte_DATA_1BD, f
		rlf	math32_dev_byte0, f
		rlf	math32_dev_byte1, f
		rlf	math32_dev_byte2, f
		movfw	byte_DATA_1B9
		btfss	math32_arg_byte2, 0
		 b	 loc_CODE_16D3
		subwf	byte_DATA_1BD, f
		movfw	math32_arg2_MSB
		skpc
		 incfsz	 math32_arg2_MSB, w
		 subwf	 math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpc
		 incfsz	 math32_arg2_LSB, w
		 subwf	 math32_dev_byte1, f
		clrw
		skpc
		 movlw	 1
		subwf	math32_dev_byte2, f
		b	loc_CODE_16E0
; ---------------------------------------------------------------------------

loc_CODE_16D3:				; CODE XREF: math32_something+44j
		addwf	byte_DATA_1BD, f
		movfw	math32_arg2_MSB
		skpnc
		 incfsz	 math32_arg2_MSB, w
		 addwf	 math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpnc
		 incfsz	 math32_arg2_LSB, w
		 addwf	 math32_dev_byte1, f
		clrw
		skpnc
		 movlw	 1
		addwf	math32_dev_byte2, f

loc_CODE_16E0:				; CODE XREF: math32_something+52j
		rlf	math32_arg_byte1, f
		movlw	7
		movwf	loop_count

loc_CODE_16E3:				; CODE XREF: math32_something+88j
		rlf	math32_arg_byte1, w
		rlf	byte_DATA_1BD, f
		rlf	math32_dev_byte0, f
		rlf	math32_dev_byte1, f
		rlf	math32_dev_byte2, f
		movfw	byte_DATA_1B9
		btfss	math32_arg_byte1, 0
		 b	 loc_CODE_16F9
		subwf	byte_DATA_1BD, f
		movfw	math32_arg2_MSB
		skpc
		 incfsz	 math32_arg2_MSB, w
		 subwf	 math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpc
		 incfsz	 math32_arg2_LSB, w
		 subwf	 math32_dev_byte1, f
		clrw
		skpc
		 movlw	 1
		subwf	math32_dev_byte2, f
		b	loc_CODE_1706
; ---------------------------------------------------------------------------

loc_CODE_16F9:				; CODE XREF: math32_something+6Aj
		addwf	byte_DATA_1BD, f
		movfw	math32_arg2_MSB
		skpnc
		 incfsz	 math32_arg2_MSB, w
		 addwf	 math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpnc
		 incfsz	 math32_arg2_LSB, w
		 addwf	 math32_dev_byte1, f
		clrw
		skpnc
		 movlw	 1
		addwf	math32_dev_byte2, f

loc_CODE_1706:				; CODE XREF: math32_something+78j
		rlf	math32_arg_byte1, f
		decfsz	loop_count, f
		 b	 loc_CODE_16E3
		rlf	math32_arg_byte0, w
		rlf	byte_DATA_1BD, f
		rlf	math32_dev_byte0, f
		rlf	math32_dev_byte1, f
		rlf	math32_dev_byte2, f
		movfw	byte_DATA_1B9
		btfss	math32_arg_byte1, 0
		 b	 loc_CODE_171F
		subwf	byte_DATA_1BD, f
		movfw	math32_arg2_MSB
		skpc
		 incfsz	 math32_arg2_MSB, w
		 subwf	 math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpc
		 incfsz	 math32_arg2_LSB, w
		 subwf	 math32_dev_byte1, f
		clrw
		skpc
		 movlw	 1
		subwf	math32_dev_byte2, f
		b	loc_CODE_172C
; ---------------------------------------------------------------------------

loc_CODE_171F:				; CODE XREF: math32_something+90j
		addwf	byte_DATA_1BD, f
		movfw	math32_arg2_MSB
		skpnc
		 incfsz	 math32_arg2_MSB, w
		 addwf	 math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpnc
		 incfsz	 math32_arg2_LSB, w
		 addwf	 math32_dev_byte1, f
		clrw
		skpnc
		 movlw	 1
		addwf	math32_dev_byte2, f

loc_CODE_172C:				; CODE XREF: math32_something+9Ej
		rlf	math32_arg_byte0, f
		movlw	7
		movwf	loop_count

loc_CODE_172F:				; CODE XREF: math32_something+D4j
		rlf	math32_arg_byte0, w
		rlf	byte_DATA_1BD, f
		rlf	math32_dev_byte0, f
		rlf	math32_dev_byte1, f
		rlf	math32_dev_byte2, f
		movfw	byte_DATA_1B9
		btfss	math32_arg_byte0, 0
		 b	 loc_CODE_1745
		subwf	byte_DATA_1BD, f
		movfw	math32_arg2_MSB
		skpc
		 incfsz	 math32_arg2_MSB, w
		 subwf	 math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpc
		 incfsz	 math32_arg2_LSB, w
		 subwf	 math32_dev_byte1, f
		clrw
		skpc
		 movlw	 1
		subwf	math32_dev_byte2, f
		b	loc_CODE_1752
; ---------------------------------------------------------------------------

loc_CODE_1745:				; CODE XREF: math32_something+B6j
		addwf	byte_DATA_1BD, f
		movfw	math32_arg2_MSB
		skpnc
		 incfsz	 math32_arg2_MSB, w
		 addwf	 math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpnc
		 incfsz	 math32_arg2_LSB, w
		 addwf	 math32_dev_byte1, f
		clrw
		skpnc
		 movlw	 1
		addwf	math32_dev_byte2, f

loc_CODE_1752:				; CODE XREF: math32_something+C4j
		rlf	math32_arg_byte0, f
		decfsz	loop_count, f
		 b	 loc_CODE_172F
		btfsc	math32_arg_byte0, 0
		 b	 locret_CODE_1761
		movfw	byte_DATA_1B9
		addwf	byte_DATA_1BD, f
		movfw	math32_arg2_MSB
		skpnc
		 incfsz	 math32_arg2_MSB, w
		 addwf	 math32_dev_byte0, f
		movfw	math32_arg2_LSB
		skpnc
		 incfsz	 math32_arg2_LSB, w
		 addwf	 math32_dev_byte1, f

locret_CODE_1761:			; CODE XREF: math32_something+D6j
		retlw	0
; End of function math32_something


; =============== S U B	R O U T	I N E =======================================

; 16x16=32bit multiply

Multiply16x16Eq32:			; CODE XREF: RESET_0+B84p RESET_0+BF4p ...
		clrf	math32_arg_byte0
		clrf	math32_arg_byte3
		movfw	math32_arg_byte2
		movwf	math32_tempLSB
		movfw	math32_arg_byte1
		movwf	math32_tempMSB
		movlw	8
		movwf	loop_count

loop1:					; CODE XREF: Multiply16x16Eq32+Cj
		rrf	math32_arg2_MSB, f
		bc	loc_CODE_177A
		decfsz	loop_count, f
		 b	 loop1
		movwf	loop_count

loop2:					; CODE XREF: Multiply16x16Eq32+12j
		rrf	math32_arg2_LSB, f
		bc	loc_CODE_1778
		decfsz	loop_count, f
		 b	 loop2
		clrf	math32_arg_byte2
		clrf	math32_arg_byte1
		retlw	0
; ---------------------------------------------------------------------------

loc_CODE_1778:				; CODE XREF: Multiply16x16Eq32+Fj
		clrc
		b	loc_CODE_1795
; ---------------------------------------------------------------------------

loc_CODE_177A:				; CODE XREF: Multiply16x16Eq32+9j
		clrc
		b	loc_CODE_1785
; ---------------------------------------------------------------------------

loc_CODE_177C:				; CODE XREF: Multiply16x16Eq32+27j
		rrf	math32_arg2_MSB, f
		bnc	loc_CODE_1785
		movfw	math32_tempMSB
		addwf	math32_arg_byte1, f
		movfw	math32_tempLSB
		skpnc
		 incfsz	 math32_tempLSB, w
		 addwf	 math32_arg_byte2, f

loc_CODE_1785:				; CODE XREF: Multiply16x16Eq32+19j
					; Multiply16x16Eq32+1Bj
		rrf	math32_arg_byte2, f
		rrf	math32_arg_byte1, f
		rrf	math32_arg_byte0, f
		decfsz	loop_count, f
		 b	 loc_CODE_177C
		movlw	8
		movwf	loop_count

loc_CODE_178C:				; CODE XREF: Multiply16x16Eq32+38j
		rrf	math32_arg2_LSB, f
		bnc	loc_CODE_1795
		movfw	math32_tempMSB
		addwf	math32_arg_byte1, f
		movfw	math32_tempLSB
		skpnc
		 incfsz	 math32_tempLSB, w
		 addwf	 math32_arg_byte2, f

loc_CODE_1795:				; CODE XREF: Multiply16x16Eq32+17j
					; Multiply16x16Eq32+2Bj
		rrf	math32_arg_byte2, f
		rrf	math32_arg_byte1, f
		rrf	math32_arg_byte0, f
		rrf	math32_arg_byte3, f
		decfsz	loop_count, f
		 b	 loc_CODE_178C
		retlw	0
; End of function Multiply16x16Eq32

; ---------------------------------------------------------------------------
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
; START	OF FUNCTION CHUNK FOR RESET_0
; assume bank =	1
; assume pclath	= 18

loc_CODE_1800:				; CODE XREF: RESET_0+F55j
		bsf	BANK1:STATUS, RP0
		bcf	BANK1:STATUS, RP1
		btfss	byte_DATA_A4, 1
		 b	 loc_CODE_181C
		bcf	byte_DATA_A4, 1
		movlw	1
		subwf	voltage_threshold3_msb,	w
		movwf	temp16_msb
		movfw	copy_of_write_data_msb
		subwf	temp16_msb, w
		bnc	loc_CODE_1812
		bnz	loc_CODE_1818
		movfw	voltage_threshold3_lsb
		subwf	copy_of_write_data_lsb,	w
		bnc	loc_CODE_1818

loc_CODE_1812:				; CODE XREF: RESET_0+11C6j
		movlw	1
		subwf	voltage_threshold3_msb,	w
		movwf	voltage_threshold1_msb
		movfw	voltage_threshold3_lsb
		movwf	voltage_threshold1_lsb
		b	loc_CODE_181C
; ---------------------------------------------------------------------------

loc_CODE_1818:				; CODE XREF: RESET_0+11C8j
					; RESET_0+11CCj
		movfw	copy_of_write_data_msb
		movwf	voltage_threshold1_msb
		movfw	copy_of_write_data_lsb
		movwf	voltage_threshold1_lsb

loc_CODE_181C:				; CODE XREF: RESET_0+11BFj
					; RESET_0+11D3j
		btfss	byte_DATA_A4, 3
		 b	 loc_CODE_1836
		bcf	byte_DATA_A4, 3
		movlw	1
		subwf	byte_DATA_ED, w
		movwf	temp16_msb
		movfw	copy_of_write_data_msb
		subwf	temp16_msb, w
		bnc	loc_CODE_182C
		bnz	loc_CODE_1832
		movfw	byte_DATA_EC
		subwf	copy_of_write_data_lsb,	w
		bnc	loc_CODE_1832

loc_CODE_182C:				; CODE XREF: RESET_0+11E0j
		movlw	1
		subwf	byte_DATA_ED, w
		movwf	byte_DATA_EB
		movfw	byte_DATA_EC
		movwf	byte_DATA_EA
		b	loc_CODE_1836
; ---------------------------------------------------------------------------

loc_CODE_1832:				; CODE XREF: RESET_0+11E2j
					; RESET_0+11E6j
		movfw	copy_of_write_data_msb
		movwf	byte_DATA_EB
		movfw	copy_of_write_data_lsb
		movwf	byte_DATA_EA

loc_CODE_1836:				; CODE XREF: RESET_0+11D9j
					; RESET_0+11EDj
		btfss	byte_DATA_A4, 2
		 b	 loc_CODE_184E
		bcf	byte_DATA_A4, 2
		movlw	1
		addwf	voltage_threshold1_msb,	w
		subwf	copy_of_write_data_msb,	w
		bnc	loc_CODE_1844
		bnz	loc_CODE_184A
		movfw	copy_of_write_data_lsb
		subwf	voltage_threshold1_lsb,	w
		bnc	loc_CODE_184A

loc_CODE_1844:				; CODE XREF: RESET_0+11F8j
		movlw	1
		addwf	voltage_threshold1_msb,	w
		movwf	voltage_threshold3_msb
		movfw	voltage_threshold1_lsb
		movwf	voltage_threshold3_lsb
		b	loc_CODE_184E
; ---------------------------------------------------------------------------

loc_CODE_184A:				; CODE XREF: RESET_0+11FAj
					; RESET_0+11FEj
		movfw	copy_of_write_data_msb
		movwf	voltage_threshold3_msb
		movfw	copy_of_write_data_lsb
		movwf	voltage_threshold3_lsb

loc_CODE_184E:				; CODE XREF: RESET_0+11F3j
					; RESET_0+1205j
		btfss	byte_DATA_A4, 4
		 b	 loc_CODE_1866
		bcf	byte_DATA_A4, 4
		movlw	1
		addwf	byte_DATA_EB, w
		subwf	copy_of_write_data_msb,	w
		bnc	loc_CODE_185C
		bnz	loc_CODE_1862
		movfw	copy_of_write_data_lsb
		subwf	byte_DATA_EA, w
		bnc	loc_CODE_1862

loc_CODE_185C:				; CODE XREF: RESET_0+1210j
		movlw	1
		addwf	byte_DATA_EB, w
		movwf	byte_DATA_ED
		movfw	byte_DATA_EA
		movwf	byte_DATA_EC
		b	loc_CODE_1866
; ---------------------------------------------------------------------------

loc_CODE_1862:				; CODE XREF: RESET_0+1212j
					; RESET_0+1216j
		movfw	copy_of_write_data_msb
		movwf	byte_DATA_ED
		movfw	copy_of_write_data_lsb
		movwf	byte_DATA_EC

loc_CODE_1866:				; CODE XREF: RESET_0+120Bj
					; RESET_0+121Dj
		bcf	BANK1:STATUS, RP1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfsc	bunch_of_other_flags, 3	; bit0=1=psu on
		 b	 loc_CODE_1872
		btfss	BANK0:PORTA, RA4
		 b	 loc_CODE_1879
		decfsz	byte_DATA_3C, f
		 b	 loc_CODE_187C
		bsf	bunch_of_other_flags, 3	; bit0=1=psu on
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:SSPADD, 1
		b	loc_CODE_1879
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_1872:				; CODE XREF: RESET_0+1225j
		btfsc	BANK0:PORTA, RA4
		 b	 loc_CODE_1879
		decfsz	byte_DATA_3C, f
		 b	 loc_CODE_187C
		bcf	bunch_of_other_flags, 3	; bit0=1=psu on
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	BANK1:SSPADD, 1
; assume bank =	0

loc_CODE_1879:				; CODE XREF: RESET_0+1227j
					; RESET_0+122Dj ...
		bcf	BANK0:STATUS, RP0
		movlw	3
		movwf	byte_DATA_3C

loc_CODE_187C:				; CODE XREF: RESET_0+1229j
					; RESET_0+1231j
		btfsc	bunch_of_other_flags, 2	; bit0=1=psu on
		 b	 loc_CODE_1886
		btfss	BANK0:PORTA, RA5
		 b	 loc_CODE_188D
		decfsz	byte_DATA_3B, f
		 b	 loc_CODE_1890
		bsf	bunch_of_other_flags, 2	; bit0=1=psu on
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:SSPADD, 2
		b	loc_CODE_188D
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_1886:				; CODE XREF: RESET_0+1239j
		btfsc	BANK0:PORTA, RA5
		 b	 loc_CODE_188D
		decfsz	byte_DATA_3B, f
		 b	 loc_CODE_1890
		bcf	bunch_of_other_flags, 2	; bit0=1=psu on
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	BANK1:SSPADD, 2
; assume bank =	0

loc_CODE_188D:				; CODE XREF: RESET_0+123Bj
					; RESET_0+1241j ...
		bcf	BANK0:STATUS, RP0
		movlw	3
		movwf	byte_DATA_3B

loc_CODE_1890:				; CODE XREF: RESET_0+123Dj
					; RESET_0+1245j
		btfsc	i2c_flags2, 0
		 b	 loc_CODE_189A
		btfss	BANK0:PORTE, 3
		 b	 loc_CODE_18A1
		decfsz	byte_DATA_2D, f
		 b	 loc_CODE_18A4
		bsf	i2c_flags2, 0
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:SSPADD, 3
		b	loc_CODE_18A1
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_189A:				; CODE XREF: RESET_0+124Dj
		btfsc	BANK0:PORTE, 3
		 b	 loc_CODE_18A1
		decfsz	byte_DATA_2D, f
		 b	 loc_CODE_18A4
		bcf	i2c_flags2, 0
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	BANK1:SSPADD, 3
; assume bank =	0

loc_CODE_18A1:				; CODE XREF: RESET_0+124Fj
					; RESET_0+1255j ...
		bcf	BANK0:STATUS, RP0
		movlw	3
		movwf	byte_DATA_2D

loc_CODE_18A4:				; CODE XREF: RESET_0+1251j
					; RESET_0+1259j
		movlw	0
		addwf	byte_DATA_67, w
		subwf	another_temperature_maybe_external, w
		bc	loc_CODE_18AF
		movlw	2
		subwf	byte_DATA_67, w
		subwf	another_temperature_maybe_external, w
		bnc	loc_CODE_18AF
		b	loc_CODE_18B1
; ---------------------------------------------------------------------------

loc_CODE_18AF:				; CODE XREF: RESET_0+1263j
					; RESET_0+1268j
		movfw	another_temperature_maybe_external
		movwf	byte_DATA_67

loc_CODE_18B1:				; CODE XREF: RESET_0+126Aj
		movlw	5
		addwf	byte_DATA_39, w
		subwf	byte_DATA_72, w
		bc	loc_CODE_18BC
		movlw	5
		subwf	byte_DATA_39, w
		subwf	byte_DATA_72, w
		bnc	loc_CODE_18BC
		b	loc_CODE_18BE
; ---------------------------------------------------------------------------

loc_CODE_18BC:				; CODE XREF: RESET_0+1270j
					; RESET_0+1275j
		movfw	byte_DATA_72
		movwf	byte_DATA_39

loc_CODE_18BE:				; CODE XREF: RESET_0+1277j
		movlw	0
		addwf	byte_DATA_3A, w
		subwf	internal_temperature, w
		bc	loc_CODE_18C9
		movlw	3
		subwf	byte_DATA_3A, w
		subwf	internal_temperature, w
		bnc	loc_CODE_18C9
		b	loc_CODE_18CB
; ---------------------------------------------------------------------------

loc_CODE_18C9:				; CODE XREF: RESET_0+127Dj
					; RESET_0+1282j
		movfw	internal_temperature
		movwf	byte_DATA_3A

loc_CODE_18CB:				; CODE XREF: RESET_0+1284j
		bcf	BANK0:STATUS, RP1
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movlw	0
		addwf	input_volts_related, w
		subwf	input_voltage_shifted_up_a_bit,	w
		bc	loc_CODE_18D8
		movlw	2
		subwf	input_volts_related, w
		subwf	input_voltage_shifted_up_a_bit,	w
		bnc	loc_CODE_18D8
		b	loc_CODE_18DA
; ---------------------------------------------------------------------------

loc_CODE_18D8:				; CODE XREF: RESET_0+128Cj
					; RESET_0+1291j
		movfw	input_voltage_shifted_up_a_bit
		movwf	input_volts_related

loc_CODE_18DA:				; CODE XREF: RESET_0+1293j
		bcf	BANK1:STATUS, RP1
		bsf	BANK1:STATUS, RP0
		bcf	BANK1:INTCON, GIE
		btfsc	readable_flags2_lsb, 4
		 b	 loc_CODE_18FC
		movfw	input_volts_related
		sublw	6C ; 'l'        ; 108v (undervoltage check?)
		bnc	loc_CODE_18E6
		bsf	readable_flags_msb, 0 ;	bits0/1=input voltage check flags
		bcf	readable_flags_msb, 1 ;	bits0/1=input voltage check flags
		b	loc_CODE_1902
; ---------------------------------------------------------------------------

loc_CODE_18E6:				; CODE XREF: RESET_0+129Dj
		movfw	input_volts_related
		sublw	84 ; ''        ; 132v
		bnc	loc_CODE_18ED
		bcf	readable_flags_msb, 0 ;	bits0/1=input voltage check flags
		bsf	readable_flags_msb, 1 ;	bits0/1=input voltage check flags
		b	loc_CODE_1902
; ---------------------------------------------------------------------------

loc_CODE_18ED:				; CODE XREF: RESET_0+12A4j
		movfw	input_volts_related
		sublw	0B3 ; '³'       ; 179
		bc	loc_CODE_18FC
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movfw	input_voltage_volts
		subwf	byte_DATA_1B1, w
		bnc	loc_CODE_18FC
		movlw	84 ; ''
		movwf	byte_DATA_1B1
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bsf	readable_flags_msb, 0 ;	bits0/1=input voltage check flags
		bsf	readable_flags_msb, 1 ;	bits0/1=input voltage check flags
		b	loc_CODE_1902
; ---------------------------------------------------------------------------
; assume bank =	3

loc_CODE_18FC:				; CODE XREF: RESET_0+129Aj
					; RESET_0+12ABj ...
		bsf	BANK3:STATUS, RP1
		movlw	83 ; ''
		movwf	byte_DATA_1B1
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	readable_flags_msb, 0 ;	bits0/1=input voltage check flags
		bcf	readable_flags_msb, 1 ;	bits0/1=input voltage check flags

loc_CODE_1902:				; CODE XREF: RESET_0+12A1j
					; RESET_0+12A8j ...
		bsf	BANK1:INTCON, GIE
		bcf	BANK1:STATUS, RP1
		bsf	BANK1:STATUS, RP0
		bcf	surprise_more_flags, 6
		movfw	interesting_ctrl_byte_set_cmd3b
		andlw	7
		xorlw	2
		skpnz
		 bsf	 surprise_more_flags, 6
		bcf	BANK1:STATUS, RP1
		bsf	BANK1:STATUS, RP0
		movfw	interesting_ctrl_byte_set_cmd3b
		andlw	7
		xorlw	1
		bnz	again_bits_not_1
		btfss	readable_flags_lsb, 1
		 b	 loc_CODE_1920
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfsc	some_major_flags, 2
		 b	 loc_CODE_1920
		btfss	BANK0:PORTB, RB5
		 b	 loc_CODE_191D
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		tstf	readable_flags2_lsb
		bnz	loc_CODE_1920
; assume bank =	0

loc_CODE_191D:				; CODE XREF: RESET_0+12D4j
		bcf	BANK0:STATUS, RP0
		bsf	BANK0:PORTB, RB7
		b	loc_CODE_1929
; ---------------------------------------------------------------------------
; assume bank =	1

loc_CODE_1920:				; CODE XREF: RESET_0+12CFj
					; RESET_0+12D2j ...
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	BANK0:PORTB, RB7
		b	loc_CODE_1929
; ---------------------------------------------------------------------------
; assume bank =	1

again_bits_not_1:			; CODE XREF: RESET_0+12CCj
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfsc	BANK0:PORTC, RC5 ; test	if power is turned off (PC5=0)
		 b	 psu_is_turned_on
		bsf	BANK0:PORTB, RB7
		b	loc_CODE_1929
; ---------------------------------------------------------------------------

psu_is_turned_on:			; CODE XREF: RESET_0+12E1j
		bcf	BANK0:PORTB, RB7

loc_CODE_1929:				; CODE XREF: RESET_0+12DBj
					; RESET_0+12DEj ...
		bcf	BANK0:STATUS, RP1
		bcf	BANK0:STATUS, RP0
		btfss	BANK0:PORTB, RB0
		 b	 loc_CODE_1933
		btfss	i2c_flags1, 1	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 loc_CODE_194A
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		btfsc	yet_yet_more_flags, 1
		 b	 loc_CODE_1938
		b	loc_CODE_1942
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_1933:				; CODE XREF: RESET_0+12E8j
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	interesting_ctrl_byte_set_cmd3b, 5
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	BANK0:PORTC, RC1
		b	loc_CODE_194A
; ---------------------------------------------------------------------------
; assume bank =	1

loc_CODE_1938:				; CODE XREF: RESET_0+12EDj
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfsc	yet_more_flags,	5
		 b	 loc_CODE_1942
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		btfss	interesting_ctrl_byte_set_cmd3b, 3
		 b	 loc_CODE_1942
		bsf	interesting_ctrl_byte_set_cmd3b, 5
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:PORTC, RC1
		b	loc_CODE_194A
; ---------------------------------------------------------------------------
; assume bank =	1

loc_CODE_1942:				; CODE XREF: RESET_0+12EEj
					; RESET_0+12F6j ...
		bsf	BANK1:STATUS, RP0
		btfss	yet_yet_more_flags, 2
		 b	 loc_CODE_194A
		btfss	interesting_ctrl_byte_set_cmd3b, 4
		 b	 loc_CODE_194A
		bsf	interesting_ctrl_byte_set_cmd3b, 5
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bsf	BANK0:PORTC, RC1
; assume bank =	1

loc_CODE_194A:				; CODE XREF: RESET_0+12EAj
					; RESET_0+12F3j ...
		bcf	BANK1:STATUS, RP1
		bsf	BANK1:STATUS, RP0
		btfsc	readable_flags_lsb, 1
		 b	 dont_clear_stats
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		bsf	BANK3:STATUS, RP0
		btfsc	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		 b	 dont_clear_stats
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bsf	BANK1:STATUS, RP0
		clrf	input_voltage_lsb
		clrf	input_voltage_msb
		clrf	InputCurrentLSB
		clrf	InputCurrentMSB
		clrf	WattsInLSB
		clrf	WattsInMSB
		clrf	total_watts_in_byte0
		clrf	total_watts_in_byte1
		clrf	total_watts_in_byte2
		clrf	total_watts_in_byte3
		clrf	uptime_seconds_lsb
		clrf	uptime_seconds_msb
		clrf	MaxInputWattsLSB
		clrf	MaxInputWattsMSB
		clrf	MaxInputCurrentLSB
		clrf	MaxInputCurrentMSB
		bcf	surprise_more_flags, 5
; assume bank =	3

dont_clear_stats:			; CODE XREF: RESET_0+1309j
					; RESET_0+130Dj
		bsf	BANK3:STATUS, RP0
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	byte_DATA_EE
		movwf	temp16_lsb
		movfw	byte_DATA_EF
		movwf	temp16_msb
		clrc
		rlf	temp16_lsb, f	; *4
		rlf	temp16_msb, f
		rlf	temp16_lsb, f
		rlf	temp16_msb, f
		movfw	temp16_msb
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	another_temperature_threshold
		movlw	5
		subwf	another_temperature_threshold, w
		movwf	some_temperature_threshold
		bsf	BANK3:STATUS, RP0
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	byte_DATA_A5
		movwf	temp16_lsb
		movfw	byte_DATA_A6
		movwf	temp16_msb
		clrc
		rlf	temp16_lsb, f	; *4
		rlf	temp16_msb, f
		rlf	temp16_lsb, f
		rlf	temp16_msb, f
		movfw	temp16_msb
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	byte_DATA_192
		movlw	5
		subwf	byte_DATA_192, w
		movwf	some_temp_threshold
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bsf	BANK1:STATUS, RP0
		btfss	readable_flags_lsb, 0
		 b	 loc_CODE_19EC
		movfw	byte_DATA_EA
		movwf	temp16_lsb
		movfw	byte_DATA_EB
		movwf	temp16_msb
		clrc
		rlf	temp16_lsb, f
		rlf	temp16_msb, f
		rlf	temp16_lsb, f
		rlf	temp16_msb, f
		rlf	temp16_lsb, f
		rlf	temp16_msb, f
		movfw	temp16_msb
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	byte_DATA_199
		movlw	5C ; '\'
		movwf	byte_DATA_19A
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		movfw	OutputVoltageLSB
		movwf	temp16_lsb
		movfw	OutputVoltageMSB
		movwf	temp16_msb
		clrc
		rlf	temp16_lsb, f
		rlf	temp16_msb, f
		rlf	temp16_lsb, f
		rlf	temp16_msb, f
		rlf	temp16_lsb, f
		rlf	temp16_msb, f
		movfw	temp16_msb
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	byte_DATA_19D
		bsf	BANK3:STATUS, RP0
		bsf	BANK3:STATUS, RP1
		movfw	byte_DATA_19D
		subwf	byte_DATA_199, w
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bc	loc_CODE_19BF
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movfw	byte_DATA_19A
		subwf	byte_DATA_19D, w
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bnc	loc_CODE_19C3
		btfss	some_major_flags, 1
		 b	 loc_CODE_19C3
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	status_flags_including_temperature, 3
		b	loc_CODE_19C3
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_19BF:				; CODE XREF: RESET_0+136Cj
		btfss	bunch_of_timing_flags, 5
		 b	 loc_CODE_19C3
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	status_flags_including_temperature, 3
; assume bank =	0

loc_CODE_19C3:				; CODE XREF: RESET_0+1374j
					; RESET_0+1377j ...
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	BANK1:STATUS, RP1
		movfw	byte_DATA_EC
		movwf	temp16_lsb
		movfw	byte_DATA_ED
		movwf	temp16_msb
		clrc
		rlf	temp16_lsb, f
		rlf	temp16_msb, f
		rlf	temp16_lsb, f
		rlf	temp16_msb, f
		rlf	temp16_lsb, f
		rlf	temp16_msb, f
		movfw	temp16_msb
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movwf	byte_DATA_19B
		movlw	65 ; 'e'
		movwf	byte_DATA_19C
		bsf	BANK3:STATUS, RP0
		bsf	BANK3:STATUS, RP1
		movfw	byte_DATA_19D
		subwf	byte_DATA_19B, w
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bnc	loc_CODE_19EA
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		movfw	byte_DATA_19C
		subwf	byte_DATA_19D, w
		bcf	BANK3:STATUS, RP0
; assume bank =	2
		bcf	BANK2:STATUS, RP1
; assume bank =	0
		bc	loc_CODE_19EC
		btfss	some_major_flags, 1
		 b	 loc_CODE_19EC
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	status_flags_including_temperature, 2
		b	loc_CODE_19EC
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_19EA:				; CODE XREF: RESET_0+1397j
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bsf	status_flags_including_temperature, 2

loc_CODE_19EC:				; CODE XREF: RESET_0+1346j
					; RESET_0+139Fj ...
		bcf	BANK1:STATUS, RP1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	i2c_flags1, 2	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 dont_reset_watts_secs
		btfss	i2c_flags1, 7	; bit0=psu on,bit1 set every 10k timerIrqs
		 b	 dont_reset_watts_secs
		bcf	i2c_flags1, 2	; bit0=psu on,bit1 set every 10k timerIrqs
		bcf	i2c_flags1, 7	; bit0=psu on,bit1 set every 10k timerIrqs
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	total_watts_in_byte0
		clrf	total_watts_in_byte1
		clrf	total_watts_in_byte2
		clrf	total_watts_in_byte3
		clrf	uptime_seconds_lsb
		clrf	uptime_seconds_msb
; assume bank =	0

dont_reset_watts_secs:			; CODE XREF: RESET_0+13ABj
					; RESET_0+13ADj
		bcf	BANK0:STATUS, RP1
		bcf	BANK0:STATUS, RP0
		btfss	BANK0:PORTB, RB0
		 b	 PortB0_clear1
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movfw	MaxInputWattsMSB
		subwf	WattsInMSB, w
		bnc	skip_this1
		movfw	WattsInMSB
		xorwf	MaxInputWattsMSB, w
		bnz	loc_CODE_1A0C
		movfw	WattsInLSB
		subwf	MaxInputWattsLSB, w
		bc	skip_this1

loc_CODE_1A0C:				; CODE XREF: RESET_0+13C2j
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfsc	i2c_flags3, 7
		 b	 skip_this1
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	BANK1:INTCON, GIE
		movfw	WattsInLSB
		movwf	MaxInputWattsLSB
		movfw	WattsInMSB
		movwf	MaxInputWattsMSB
		bsf	BANK1:INTCON, GIE
		b	skip_this1
; ---------------------------------------------------------------------------
; assume bank =	0

PortB0_clear1:				; CODE XREF: RESET_0+13BAj
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	MaxInputWattsLSB
		clrf	MaxInputWattsMSB

skip_this1:				; CODE XREF: RESET_0+13BEj
					; RESET_0+13C6j ...
		bsf	BANK1:STATUS, RP1
; assume bank =	3
		bsf	BANK3:STATUS, RP0
		btfsc	logging_trigger_flags, 0 ; bit1	is set once every 24hrs
		 b	 skip_this
		bcf	BANK3:STATUS, RP1
; assume bank =	1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	BANK0:PORTB, RB0
		 b	 PortB0_clear
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movfw	MaxInputCurrentMSB
		subwf	InputCurrentMSB, w
		bnc	skip_this
		movfw	InputCurrentMSB
		xorwf	MaxInputCurrentMSB, w
		bnz	loc_CODE_1A2F
		movfw	InputCurrentLSB
		subwf	MaxInputCurrentLSB, w
		bc	skip_this

loc_CODE_1A2F:				; CODE XREF: RESET_0+13E5j
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfsc	i2c_flags3, 6
		 b	 skip_this
		bcf	BANK0:STATUS, RP1
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	BANK1:INTCON, GIE
		movfw	InputCurrentMSB
		movwf	MaxInputCurrentMSB
		movfw	InputCurrentLSB
		movwf	MaxInputCurrentLSB
		bsf	BANK1:INTCON, GIE
		b	skip_this
; ---------------------------------------------------------------------------
; assume bank =	0

PortB0_clear:				; CODE XREF: RESET_0+13DDj
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		clrf	MaxInputCurrentLSB
		clrf	MaxInputCurrentMSB

skip_this:				; CODE XREF: RESET_0+13D9j
					; RESET_0+13E1j ...
		bcf	BANK1:STATUS, RP1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		btfss	i2c_flags3, 4
		 b	 loc_CODE_1A7D
		bcf	i2c_flags3, 4
		btfss	some_major_flags, 6
		 b	 loc_CODE_1A51
		bcf	some_major_flags, 6
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		bcf	BANK1:INTCON, GIE
		movfw	fan_related_msb
		movwf	byte_DATA_D3
		movfw	fan_related_lsb
		movwf	byte_DATA_D2
		movlw	0C		; set to 3300 decimal
		movwf	fan_related_msb
		movlw	0E4 ; 'ä'
		movwf	fan_related_lsb
		bsf	BANK1:INTCON, GIE
; assume bank =	0

loc_CODE_1A51:				; CODE XREF: RESET_0+1400j
		bcf	BANK0:STATUS, RP0
		btfsc	some_major_flags, 1
		 b	 loc_CODE_1A66
; assume bank =	1

another_bits_not_1:			; CODE XREF: RESET_0+1426j
		bsf	BANK1:STATUS, RP0
		movfw	fan_related_msb
		sublw	0C		; compare to 3300
		bnc	loc_CODE_1A7D
		bnz	loc_CODE_1A5F
		movfw	fan_related_lsb
		sublw	0E4 ; 'ä'
		bnc	loc_CODE_1A7D

loc_CODE_1A5F:				; CODE XREF: RESET_0+1415j
		bcf	BANK1:INTCON, GIE
		movlw	0C
		movwf	fan_related_msb
		movlw	0E4 ; 'ä'
		movwf	fan_related_lsb
		bsf	BANK1:INTCON, GIE
		b	loc_CODE_1A7D
; ---------------------------------------------------------------------------
; assume bank =	0

loc_CODE_1A66:				; CODE XREF: RESET_0+140Fj
		bsf	BANK0:STATUS, RP0
; assume bank =	1
		movfw	interesting_ctrl_byte_set_cmd3b
		andlw	7
		xorlw	1
		bnz	another_bits_not_1
		movfw	fan_related_msb
		sublw	0C
		bnc	loc_CODE_1A7D
		bnz	loc_CODE_1A76
		movfw	fan_related_lsb
		sublw	0E4 ; 'ä'
		bnc	loc_CODE_1A7D

loc_CODE_1A76:				; CODE XREF: RESET_0+142Cj
		bcf	BANK1:INTCON, GIE
		movlw	0C
		movwf	fan_related_msb
		movlw	0E4 ; 'ä'
		movwf	fan_related_lsb
		bsf	BANK1:INTCON, GIE
		b	loc_CODE_1A7D
; ---------------------------------------------------------------------------

loc_CODE_1A7D:				; CODE XREF: RESET_0+13FDj
					; RESET_0+1413j ...
		bcf	BANK1:STATUS, RP1
		bcf	BANK1:STATUS, RP0
; assume bank =	0
		bcf	BANK0:PCLATH, 3
; assume pclath	= 10
		bcf	BANK0:PCLATH, 4
; assume pclath	= 0
		b	loc_CODE_71D
; END OF FUNCTION CHUNK	FOR RESET_0
; ---------------------------------------------------------------------------
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		addlw	0FF
		return
; ---------------------------------------------------------------------------
		return
; ---------------------------------------------------------------------------
		data 0E, 6
		res 3
		data  23CA ; Ê#
		data 3FFF
		res 0F7
		data	 0
		data 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0
		data 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 2E,	3, 1, 7
		data 0,	0B, 1, 84, 14, 1, 91, 0B, 0, 2,	0, 0, 0, 0, 0
		data 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0
		data 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0
		data 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0
		data 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0
		data 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0
		data 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0
		data 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0
		data 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0
		data 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0
		data 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0
		data 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0
		data 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0
		data 0,	0

; ===========================================================================

; Segment type:	Internal processor memory & SFR
		; .data	(DATA)
; assume bank =	0
; assume pclath	= 0
BANK0_INDF	equ 0			; DATA XREF: ISR+1F7r ISR+24Fr ...
BANK0_TMR0	equ 1			; DATA XREF: ISR+36Dw RESET_0+40w
BANK0_PCL	equ 2			; DATA XREF: lookup_ram_to_read_for_cmdw
					; lookup_ram_to_write_for_cmdw	...
BANK0_STATUS	equ 3			; DATA XREF: ISR+1r ISR+3w ...
 C		equ 0
 DC		equ 1
 Z		equ 2
 PD		equ 3
 TO		equ 4
 RP0		equ 5
 RP1		equ 6
 IRP		equ 7

BANK0_FSR	equ 4			; DATA XREF: ISR+1F6w ISR+24Ew ...
BANK0_PORTA	equ 5			; DATA XREF: RESET_0+10w RESET_0+C1r ...
 RA0		equ 0
 RA1		equ 1
 RA2		equ 2
 RA3		equ 3
 RA4		equ 4
 RA5		equ 5

BANK0_PORTB	equ 6			; DATA XREF: ISR+3DFw ISR+3F3w ...
 RB0		equ 0
 RB1		equ 1
 RB2		equ 2
 RB3		equ 3
 RB4		equ 4
 RB5		equ 5
 RB6		equ 6
 RB7		equ 7

BANK0_PORTC	equ 7			; DATA XREF: ISR+325w ISR+3E1w ...
 RC0		equ 0
 RC1		equ 1
 RC2		equ 2
 RC3		equ 3
 RC4		equ 4
 RC5		equ 5
 RC6		equ 6
 RC7		equ 7

BANK0_PORTD	equ 8
 RD0		equ 0
 RD1		equ 1
 RD2		equ 2
 RD3		equ 3
 RD4		equ 4
 RD5		equ 5
 RD6		equ 6
 RD7		equ 7

BANK0_PORTE	equ 9			; DATA XREF: RESET_0:loc_CODE_711r
					; RESET_0+124Er ...
 RE0		equ 0
 RE1		equ 1
 RE2		equ 2

BANK0_PCLATH	equ 0A			; DATA XREF: ISR+4r ISR+6w ...
BANK0_INTCON	equ 0B			; DATA XREF: ISR+Ar ISR+Cw ...
 RBIF		equ 0
 INTF		equ 1
 TMR0IF		equ 2
 RBIE		equ 3
 INTE		equ 4
 TMR0IE		equ 5
 PEIE		equ 6
 GIE		equ 7

BANK0_PIR1	equ 0C			; DATA XREF: ISR+8r ISR+358w ...
 TMR1IF		equ 0
 TMR2IF		equ 1
 CCP1IF		equ 2
 SSPIF		equ 3
 TXIF		equ 4
 RCIF		equ 5
 ADIF		equ 6
 PSPIF		equ 7

BANK0_PIR2	equ 0D
 CCP2IF		equ 0
 BCLIF		equ 3
 EEIF		equ 4
 CMIF		equ 6

BANK0_TMR1L	equ 0E
BANK0_TMR1H	equ 0F
BANK0_T1CON	equ 10			; DATA XREF: RESET_0+2Ao
 TMR1ON		equ 0
 TMR1CS		equ 1
 T1SYNC		equ 2
 T1OSCEN	equ 3
 T1CKPS0	equ 4
 T1CKPS1	equ 5

BANK0_TMR2	equ 11			; DATA XREF: RESET_0+60w
BANK0_T2CON	equ 12			; DATA XREF: RESET_0+63w RESET_0+6Bw
 T2CKPS0	equ 0
 T2CKPS1	equ 1
 TMR2ON		equ 2
 TOUTPS0	equ 3
 TOUTPS1	equ 4
 TOUTPS2	equ 5
 TOUTPS3	equ 6

BANK0_SSPBUF	equ 13			; DATA XREF: ISR+1CDr ISR+1D9w ...
BANK0_SSPCON	equ 14			; DATA XREF: ISR+356w ISR+357w ...
 SSPM0		equ 0
 SSPM1		equ 1
 SSPM2		equ 2
 SSPM3		equ 3
 CKP		equ 4
 SSPEN		equ 5
 SSPOV		equ 6
 WCOL		equ 7

BANK0_CCPR1L	equ 15			; DATA XREF: RESET_0+5w RESET_0+AEw ...
					; fan speed PWM	output
BANK0_CCPR1H	equ 16			; DATA XREF: RESET_0+61w
BANK0_CCP1CON	equ 17			; DATA XREF: RESET_0+65w
 CCP1M0		equ 0
 CCP1M1		equ 1
 CCP1M2		equ 2
 CCP1M3		equ 3
 CCP1Y		equ 4
 CCP1X		equ 5

BANK0_RCSTA	equ 18			; DATA XREF: RESET_0+49w RESET_0+4Ew ...
 RX9D		equ 0
 OERR		equ 1
 FERR		equ 2
 ADDEN		equ 3
 CREN		equ 4
 SREN		equ 5
 RX9		equ 6
 SPEN		equ 7

BANK0_TXREG	equ 19			; DATA XREF: CODE:0D8Aw CODE:0D91w ...
BANK0_RCREG	equ 1A			; DATA XREF: RESET_0+47r RESET_0+48w ...
BANK0_CCPR2L	equ 1B			; DATA XREF: CODE:0D8Fw CODE:0DA1w
BANK0_CCPR2H	equ 1C			; DATA XREF: CODE:loc_CODE_D8Ew
					; CODE:0DA0w
BANK0_CCP2CON	equ 1D			; DATA XREF: CODE:0D8Dw
					; CODE:loc_CODE_D9Ew
 CCP2M0		equ 0
 CCP2M1		equ 1
 CCP2M2		equ 2
 CCP2M3		equ 3
 CCP2Y		equ 4
 CCP2X		equ 5

BANK0_ADRESH	equ 1E			; DATA XREF: ISR+383r
					; ISR:ADCReadChannel0r	...
BANK0_ADCON0	equ 1F			; DATA XREF: ISR:loc_CODE_384r
					; ISR+3BCr ...
 ADON		equ 0
 GO_DONE	equ 2
 CHS0		equ 3
 CHS1		equ 4
 CHS2		equ 5
 ADCS0		equ 6
 ADCS1		equ 7

fan_speed	equ 20			; DATA XREF: RESET_0+2w
					; RESET_0:loc_CODE_717r ...
count_up_to_200	equ 21			; DATA XREF: RESET_0+6w CODE:0DA5r ...
other_min_fan_speed equ	22		; DATA XREF: RESET_0+3w RESET_0+1D8r ...
downcount2_from_1250_lsb equ 23		; DATA XREF: ISR:loc_CODE_4EFr
					; ISR+4EEw ...
downcount2_from_1250_msb equ 24		; DATA XREF: ISR:loc_CODE_4F4r
					; ISR+4FBw ...
byte_DATA_25	equ 25			; DATA XREF: RESET_0+92w CODE:0DA3w ...
ADCChannel0MSB	equ 26			; DATA XREF: ISR+3CCw RESET_0+472r
some_major_flags equ 27			; DATA XREF: ISR+2B1w ISR+343r ...
yet_more_flags	equ 28			; DATA XREF: ISR:loc_CODE_2F9w
					; ISR+31Bw ...
bunch_of_timing_flags equ 29		; DATA XREF: ISR+3E3w ISR+3F7w ...
bunch_of_other_flags equ 2A		; DATA XREF: ISR+4F3r ISR+4F5w ...
					; bit0=1=psu on
i2c_flags2	equ 2B			; DATA XREF: ISR+1CEw ISR+1D0w ...
i2c_flags1	equ 2C			; DATA XREF: ISR+1CFw ISR+1D6r ...
					; bit0=psu on,bit1 set every 10k timerIrqs
byte_DATA_2D	equ 2D			; DATA XREF: RESET_0+88w RESET_0+1250w ...
downcount_from_500_250_lsb equ 2E	; DATA XREF: ISR+461w
					; ISR:loc_CODE_469r ...
downcount_from_500_250_msb equ 2F	; DATA XREF: ISR+463w
					; ISR:loc_CODE_46Er ...
downcount_from_100_lsb equ 32		; DATA XREF: ISR:loc_CODE_47Dr
					; ISR+47Cw ...
downcount_from_100_msb equ 33		; DATA XREF: ISR:loc_CODE_482r
					; ISR:loc_CODE_487w ...
byte_DATA_34	equ 34			; DATA XREF: ISR:loc_CODE_4CAr
					; ISR:loc_CODE_4CFw ...
downcount_from_1250_lsb	equ 35		; DATA XREF: ISR+4D1w
					; ISR:loc_CODE_4D9r ...
downcount_from_1250_msb	equ 36		; DATA XREF: ISR+4D3w
					; ISR:loc_CODE_4DEr ...
downcount_from_6500_lsb	equ 37		; DATA XREF: ISR+496w
					; ISR:loc_CODE_49Er ...
downcount_from_6500_msb	equ 38		; DATA XREF: ISR+498w
					; ISR:loc_CODE_4A3r ...
byte_DATA_39	equ 39			; DATA XREF: RESET_0+126Er
					; RESET_0+1273r ...
byte_DATA_3A	equ 3A			; DATA XREF: RESET_0+127Br
					; RESET_0+1280r ...
byte_DATA_3B	equ 3B			; DATA XREF: RESET_0+87w RESET_0+123Cw ...
byte_DATA_3C	equ 3C			; DATA XREF: RESET_0+86w RESET_0+1228w ...
byte_DATA_3D	equ 3D			; DATA XREF: ISR+382r ISR+39Bw ...
byte_DATA_3E	equ 3E			; DATA XREF: ISR+384w ISR+388w ...
byte_DATA_3F	equ 3F			; DATA XREF: ISR+398w ISR+3B2w ...
i2c_checksum	equ 40			; DATA XREF: ISR+1FCw
					; ISR:done_send_checksumr ...
incoming_write_data_lsb	equ 41		; DATA XREF: ISR+274w ISR+29Cr ...
incoming_write_data_msb	equ 42		; DATA XREF: ISR+27Cw ISR+2ABr ...

byte_DATA_44	equ 44			; DATA XREF: ISR+406r CODE:0425w
byte_DATA_45	equ 45			; DATA XREF: ISR:loc_CODE_408r
					; CODE:0423w ...
some_24bit_output_byte0	equ 46		; DATA XREF: RESET_0+B01r
some_24bit_output_byte1	equ 47		; DATA XREF: RESET_0+AFBr
some_24bit_output_byte2	equ 48		; DATA XREF: RESET_0+AF5r
byte_DATA_49	equ 49			; DATA XREF: RESET_0:loc_CODE_1133r
byte_DATA_4A	equ 4A			; DATA XREF: RESET_0+B08r
byte_DATA_4B	equ 4B			; DATA XREF: RESET_0+ADCr
byte_DATA_4C	equ 4C			; DATA XREF: RESET_0+AD6r
byte_DATA_4D	equ 4D			; DATA XREF: RESET_0+AD0r
byte_DATA_4E	equ 4E			; DATA XREF: RESET_0+ACAr
byte_DATA_4F	equ 4F			; DATA XREF: RESET_0+AE3r
byte_DATA_50	equ 50			; DATA XREF: RESET_0+26Bo RESET_0+AECr
internal_temperature equ 51		; DATA XREF: RESET_0+EDw RESET_0+4EEr	...

i2c_cmd_code	equ 53			; DATA XREF: ISR+1EDr ISR+1F2w ...
i2c_cmd_code_copy2 equ 54		; DATA XREF: ISR+259w ISR+268w ...
FanTachPulsesLSB equ 55			; DATA XREF: ISR+515w ISR+51Bw ...
FanTachPulsesMSB equ 56			; DATA XREF: ISR+518w ISR+51Cw ...
i2c_rx_checksum	equ 57			; DATA XREF: ISR+1D8r ISR+1DFr ...
i2c_rx_cmd_byte_count equ 58		; DATA XREF: ISR+261w
					; ISR:flags2_bit2_receive_2ndplus_bytesr ...
some_other_downcounter2_lsb equ	59	; DATA XREF: ISR+585r ISR+588w ...
some_other_downcounter2_msb equ	5A	; DATA XREF: ISR:loc_CODE_58Er
					; ISR:loc_CODE_593w ...
downcount_from_2500_lsb	equ 5B		; DATA XREF: ISR:loc_CODE_489r
					; ISR+488w ...
downcount_from_2500_msb	equ 5C		; DATA XREF: ISR:loc_CODE_48Er
					; ISR:loc_CODE_493w ...
another_temperature_maybe_external equ 5D ; DATA XREF: RESET_0+100w
					; RESET_0+529r	...
byte_DATA_5E	equ 5E			; DATA XREF: RESET_0+EFr RESET_0+AEDw

i2c_flags3	equ 60			; DATA XREF: ISR+21Aw ISR+21Ew ...
yet_more_flags2	equ 61			; DATA XREF: RESET_0+A5Cr RESET_0+A5Er ...
irq_store_pclath equ 62			; DATA XREF: ISR+5w ISR+Fr ...
tirq_store_plath equ 63			; DATA XREF: ISR+369w ISR+639r
irq_pclath_copy	equ 64			; DATA XREF: ISR+1BFw ISR+35Dr
byte_DATA_65	equ 65			; DATA XREF: ISR:loc_CODE_401w
					; ISR+3FEr
byte_DATA_66	equ 66			; DATA XREF: RESET_0:loc_CODE_10BBr
					; RESET_0+A7Dr	...
byte_DATA_67	equ 67			; DATA XREF: RESET_0+1261r
					; RESET_0+1266r ...
byte_DATA_68	equ 68			; DATA XREF: RESET_0+E0w
					; RESET_0:loc_CODE_726w ...
FanTachPulseCopyLSB equ	69		; DATA XREF: ISR+524w ISR+52Aw ...
FanTachPulseCopyMSB equ	6A		; DATA XREF: ISR+526w ISR+52Bw
downcount_from_10000_lsb equ 6B		; DATA XREF: ISR+374r ISR+377w ...
downcount_from_10000_msb equ 6C		; DATA XREF: ISR:loc_CODE_37Dr
					; ISR:loc_CODE_382w ...
FanTachPulseErrorTimeoutLSB equ	6E	; DATA XREF: ISR+530w ISR+531r ...
FanTachPulseErrorTimeoutMSB equ	6F	; DATA XREF: ISR+537w ISR+538r ...
byte_DATA_72	equ 72			; DATA XREF: RESET_0+D52w
					; RESET_0+126Fr ...
irq_fw_copy	equ 73			; DATA XREF: ISR+1BBw ISR+361w ...
irq_status_copy	equ 74			; DATA XREF: ISR+1BDw ISR+35Fr
tirq_store_w	equ 75			; DATA XREF: ISR+365w ISR+63Dw ...
tirq_store_status equ 76		; DATA XREF: ISR+367w ISR+63Br
irq_store_w	equ 77			; DATA XREF: ISRw ISR+13w ...
irq_store_status equ 78			; DATA XREF: ISR+2w ISR+11r ...
cleared_every_i2c_irq equ 79		; DATA XREF: ISR+1C7w
multiply_result_MSB equ	7A		; DATA XREF: RESET_0+473w RESET_0+4CBr ...
multiply_result_LSB equ	7B		; DATA XREF: RESET_0:loc_CODE_B1Ar
					; RESET_0+5A2r	...
loop_counter	equ 7C			; DATA XREF: multiply8x8+4w
					; multiply8x8+Cw
multiply_data_arg1 equ 7D		; DATA XREF: RESET_0+4C9w RESET_0+51Dw ...
multiply_data_arg2 equ 7E		; DATA XREF: RESET_0+4C7w RESET_0+51Fw ...

BANK1_INDF	equ 80
BANK1_OPTION	equ 81			; DATA XREF: ISR+370w RESET_0+43w
 PS0		equ 0
 PS1		equ 1
 PS2		equ 2
 PSA		equ 3
 T0SE		equ 4
 T0CS		equ 5
 INTEDG		equ 6
 RBPU		equ 7

BANK1_PCL	equ 82			; DATA XREF: sub_CODE_7Bw sub_CODE_81w ...
BANK1_STATUS	equ 83			; DATA XREF: ISR+1CBw ISR+1CCw ...
 C		equ 0
 DC		equ 1
 Z		equ 2
 PD		equ 3
 TO		equ 4
 RP0		equ 5
 RP1		equ 6
 IRP		equ 7

BANK1_FSR	equ 84
BANK1_TRISA	equ 85			; DATA XREF: RESET_0+17w
 TRISA0		equ 0
 TRISA1		equ 1
 TRISA2		equ 2
 TRISA3		equ 3
 TRISA4		equ 4
 TRISA5		equ 5

BANK1_TRISB	equ 86			; DATA XREF: RESET_0+19w RESET_0+27Dw
 TRISB0		equ 0
 TRISB1		equ 1
 TRISB2		equ 2
 TRISB3		equ 3
 TRISB4		equ 4
 TRISB5		equ 5
 TRISB6		equ 6
 TRISB7		equ 7

BANK1_TRISC	equ 87			; DATA XREF: ISR+615w ISR+616w ...
 TRISC0		equ 0
 TRISC1		equ 1
 TRISC2		equ 2
 TRISC3		equ 3
 TRISC4		equ 4
 TRISC5		equ 5
 TRISC6		equ 6
 TRISC7		equ 7

BANK1_TRISD	equ 88
 TRISD0		equ 0
 TRISD1		equ 1
 TRISD2		equ 2
 TRISD3		equ 3
 TRISD4		equ 4
 TRISD5		equ 5
 TRISD6		equ 6
 TRISD7		equ 7

BANK1_TRISE	equ 89
 TRISE0		equ 0
 TRISE1		equ 1
 TRISE2		equ 2
 PSPMODE	equ 4
 IBOV		equ 5
 OBF		equ 6
 IBF		equ 7

BANK1_PCLATH	equ 8A			; DATA XREF: RESET_0+108w RESET_0+10Bw ...
BANK1_INTCON	equ 8B			; DATA XREF: ISR:downcounter_not_expired1w
					; RESET_0+6Dw ...
 RBIF		equ 0
 INTF		equ 1
 TMR0IF		equ 2
 RBIE		equ 3
 INTE		equ 4
 TMR0IE		equ 5
 PEIE		equ 6
 GIE		equ 7

BANK1_PIE1	equ 8C			; DATA XREF: RESET_0+6Fw
 TMR1IE		equ 0
 TMR2IE		equ 1
 CCP1IE		equ 2
 SSPIE		equ 3
 TXIE		equ 4
 RCIE		equ 5
 ADIE		equ 6
 PSPIE		equ 7

BANK1_PIE2	equ 8D
 CCP2IE		equ 0
 BCLIE		equ 3
 EEIE		equ 4
 CMIE		equ 6

BANK1_PCON	equ 8E
 BOR		equ 0
 POR		equ 1

BANK1_RESERVED008F equ 8F
BANK1_RESERVED0090 equ 90
BANK1_SSPCON2	equ 91
 SEN		equ 0
 RSEN		equ 1
 PEN		equ 2
 RCEN		equ 3
 ACKEN		equ 4
 ACKDT		equ 5
 ACKSTAT	equ 6
 GCEN		equ 7

BANK1_PR2	equ 92			; DATA XREF: RESET_0+30o RESET_0+69w
BANK1_SSPADD	equ 93			; DATA XREF: ISR+25Br RESET_0+39w ...
BANK1_SSPSTAT	equ 94			; DATA XREF: ISR+1C9r ISR+1D2r ...
 BF		equ 0
 UA		equ 1
 R_W		equ 2
 S		equ 3
 P		equ 4
 D_A		equ 5
 CKE		equ 6
 SMP		equ 7

BANK1_RESERVED0095 equ 95
BANK1_RESERVED0096 equ 96
BANK1_RESERVED0097 equ 97
BANK1_TXSTA	equ 98			; DATA XREF: RESET_0+4Bw RESET_0+53w ...
 TX9D		equ 0
 TRMT		equ 1
 BRGH		equ 2
 SYNC		equ 4
 TXEN		equ 5
 TX9		equ 6
 CSRC		equ 7

BANK1_SPBRG	equ 99			; DATA XREF: RESET_0+51w
					; EEPROM_Write+22w
BANK1_RESERVED009A equ 9A
BANK1_RESERVED009B equ 9B
BANK1_CMCON	equ 9C
 CM0		equ 0
 CM1		equ 1
 CM2		equ 2
 CIS		equ 3
 C1INV		equ 4
 C2INV		equ 5
 C1OUT		equ 6
 C2OUT		equ 7

BANK1_CVRCON	equ 9D
 CVR0		equ 0
 CVR1		equ 1
 CVR2		equ 2
 CVR3		equ 3
 CVRR		equ 5
 CVROE		equ 6
 CVREN		equ 7

BANK1_ADRESL	equ 9E			; DATA XREF: ISR+3CEr CODE:0419r
BANK1_ADCON1	equ 9F			; DATA XREF: ISR+40Cw CODE:042Aw ...
 PCFG0		equ 0
 PCFG1		equ 1
 PCFG2		equ 2
 PCFG3		equ 3
 ADCS2		equ 6
 ADFM		equ 7

yet_yet_more_flags equ 0A0		; DATA XREF: ISR+31Fr RESET_0+24o ...
byte_DATA_A1	equ 0A1			; DATA XREF: RESET_0+374w
input_watts_msb	equ 0A2			; DATA XREF: RESET_0+ED3w RESET_0+F17r ...
byte_DATA_A4	equ 0A4			; DATA XREF: ISR+2E2w ISR+2E9w ...
byte_DATA_A5	equ 0A5			; DATA XREF: RESET_0+328w
					; RESET_0+1334r
byte_DATA_A6	equ 0A6			; DATA XREF: RESET_0+32Aw
					; RESET_0+1336r
counter_for_eeprom_logging equ 0A7	; DATA XREF: RESET_0+2FCw RESET_0+2FEr ...
tag_for_eeprom_logging equ 0A8		; DATA XREF: RESET_0+2FDw RESET_0+302r ...
EEPROM_read_addr_ptr equ 0A9		; DATA XREF: ISR+23Ar

byte_DATA_AB	equ 0AB			; DATA XREF: RESET_0+373w RESET_0+569r ...
some_eeprom_log_counter	equ 0AC		; DATA XREF: RESET_0+24Ew RESET_0+664w ...
possibly_total_mins_uptime_byte0 equ 0AD ; DATA	XREF: ISR+5EBw	ISR+5FFw ...
possibly_total_mins_uptime_byte1 equ 0AE ; DATA	XREF: ISR+5EDw	RESET_0+258w ...
possibly_total_mins_uptime_byte2 equ 0AF ; DATA	XREF: ISR+5EFw	RESET_0+25Dw ...
readable_flags_lsb equ 0B0		; DATA XREF: ISR+44Fr RESET_0+1EBw ...
readable_flags_msb equ 0B1		; DATA XREF: RESET_0+129Fw
					; RESET_0+12A0w ...
					; bits0/1=input	voltage	check flags
readable_flags2_lsb equ	0B2		; DATA XREF: ISR+451w ISR+4A4w ...
byte_DATA_B3	equ 0B3			; DATA XREF: RESET_0+370w
status_flags_including_temperature equ 0B4 ; DATA XREF:	RESET_0+371w
					; RESET_0+54Bw	...
byte_DATA_B5	equ 0B5			; DATA XREF: RESET_0+372w
input_voltage_lsb equ 0B6		; DATA XREF: RESET_0+68Dr RESET_0+696r ...
input_voltage_msb equ 0B7		; DATA XREF: RESET_0+687r
					; RESET_0:loc_CODE_CD4r ...
InputCurrentLSB	equ 0B8			; DATA XREF: RESET_0+F2Cw RESET_0+F37w ...
InputCurrentMSB	equ 0B9			; DATA XREF: RESET_0+F28w RESET_0+F33w ...
OutputVoltageLSB equ 0BA		; DATA XREF: RESET_0+4B2w RESET_0+4BEw ...
OutputVoltageMSB equ 0BB		; DATA XREF: RESET_0+4B4w RESET_0+4BFw ...
OutputCurrentLSB equ 0BC		; DATA XREF: RESET_0+E6Dw RESET_0+E77w ...
OutputCurrentMSB equ 0BD		; DATA XREF: RESET_0+E6Bw RESET_0+E79w ...
Temperature1LSB	equ 0BE			; DATA XREF: RESET_0+526w
Temperature1MSB	equ 0BF			; DATA XREF: RESET_0+524w
Temperature2LSB	equ 0C0			; DATA XREF: RESET_0+533w
Temperature2MSB	equ 0C1			; DATA XREF: RESET_0+531w
reported_fan_speed_lsb equ 0C2		; DATA XREF: RESET_0+1FAr RESET_0+4D8r ...
reported_fan_speed_msb equ 0C3		; DATA XREF: RESET_0+1F4r RESET_0+4CDr ...
MaxInputCurrentLSB equ 0C4		; DATA XREF: ISR+2BDw RESET_0+131Ew ...
MaxInputCurrentMSB equ 0C5		; DATA XREF: ISR+2BEw RESET_0+131Fw ...
MaxRecordedCurrentLSB equ 0C6		; DATA XREF: ISR+2C5w RESET_0+EA3r ...
MaxRecordedCurrentMSB equ 0C7		; DATA XREF: ISR+2C6w RESET_0+E9Ar ...
interesting_ctrl_byte_set_cmd3b	equ 0C8	; DATA XREF: ISR+2F7w ISR+321r ...

copy_of_write_data_msb equ 0CA		; DATA XREF: ISR+315w RESET_0+11C4r ...
copy_of_write_data_lsb equ 0CB		; DATA XREF: ISR+311w RESET_0+11CBr ...

written_by_cmd_3d_lsb equ 0CD		; DATA XREF: ISR+2FBw ISR+32Aw ...
minimum_fan_speed equ 0CE		; DATA XREF: RESET_0+1CCw RESET_0+201r ...
surprise_more_flags equ	0CF		; DATA XREF: ISR+2DBw ISR+33Br ...
input_watts_lsb	equ 0D0			; DATA XREF: RESET_0+ED7w RESET_0+F1Ar ...
input_voltage_shifted_up_a_bit equ 0D1	; DATA XREF: RESET_0+BA2w
					; RESET_0+128Br ...
byte_DATA_D2	equ 0D2			; DATA XREF: RESET_0+388r
					; RESET_0+1407w
byte_DATA_D3	equ 0D3			; DATA XREF: RESET_0+386r
					; RESET_0+1405w
fan_related_msb	equ 0D4			; DATA XREF: ISR+347w ISR+34Dw ...

byte_DATA_D6	equ 0D6			; DATA XREF: RESET_0+312w
WattsInLSB	equ 0D7			; DATA XREF: ISR+5BDr RESET_0+F51w ...
WattsInMSB	equ 0D8			; DATA XREF: ISR:loc_CODE_5CBr
					; RESET_0+F4Fw	...
WattsOutLSB	equ 0D9			; DATA XREF: RESET_0+F0Dw RESET_0+F11w ...
WattsOutMSB	equ 0DA			; DATA XREF: RESET_0+F09w RESET_0+F12w ...
total_watts_in_byte0 equ 0DB		; DATA XREF: ISR+5BEw RESET_0+1316w ...
total_watts_in_byte1 equ 0DC		; DATA XREF: ISR+5C1w ISR+5C8w ...
total_watts_in_byte2 equ 0DD		; DATA XREF: ISR+5C4w ISR+5CBw ...
total_watts_in_byte3 equ 0DE		; DATA XREF: ISR+5C6w ISR+5CDw ...
uptime_seconds_lsb equ 0DF		; DATA XREF: ISR+5B6r
					; ISR:loc_CODE_5BEw ...
uptime_seconds_msb equ 0E0		; DATA XREF: ISR+5B3r ISR+5BCw ...
MaxInputWattsLSB equ 0E1		; DATA XREF: ISR+2CDw RESET_0+131Cw ...
MaxInputWattsMSB equ 0E2		; DATA XREF: ISR+2CEw RESET_0+131Dw ...
min_fan_speed_if_cm3b_bit6_set equ 0E3	; DATA XREF: RESET_0+1E4r RESET_0+1E7r ...
written_by_cmd_3d_msb equ 0E4		; DATA XREF: ISR+2FFw ISR+32Bw ...
fan_related_lsb	equ 0E5			; DATA XREF: ISR+349w ISR+34Fw ...
voltage_threshold1_lsb equ 0E6		; DATA XREF: RESET_0+314w RESET_0+675r ...
voltage_threshold1_msb equ 0E7		; DATA XREF: RESET_0+316w RESET_0+677r ...
voltage_threshold3_lsb equ 0E8		; DATA XREF: RESET_0+318w RESET_0+6A0r ...
voltage_threshold3_msb equ 0E9		; DATA XREF: RESET_0+31Aw RESET_0+6A2r ...
byte_DATA_EA	equ 0EA			; DATA XREF: RESET_0+31Cw
					; RESET_0+11ECw ...
byte_DATA_EB	equ 0EB			; DATA XREF: RESET_0+31Ew
					; RESET_0+11EAw ...
byte_DATA_EC	equ 0EC			; DATA XREF: RESET_0+320w
					; RESET_0+11E4r ...
byte_DATA_ED	equ 0ED			; DATA XREF: RESET_0+322w
					; RESET_0+11DCr ...
byte_DATA_EE	equ 0EE			; DATA XREF: RESET_0+324w
					; RESET_0+1323r
byte_DATA_EF	equ 0EF			; DATA XREF: RESET_0+326w
					; RESET_0+1325r
byte_DATA_F0	equ 0F0			; DATA XREF: RESET_0+106w RESET_0+109r ...
input_volts_related equ	0F1		; DATA XREF: RESET_0+10Cr
					; RESET_0+128Ar ...
byte_DATA_F2	equ 0F2			; DATA XREF: RESET_0+11Fr RESET_0+136r

temp16_msb	equ 0FA			; DATA XREF: RESET_0+4B3r RESET_0+523r ...
temp16_lsb	equ 0FB			; DATA XREF: RESET_0+525r RESET_0+532r ...
BANK2_INDF	equ 100			; DATA XREF: RESET_0+271w
BANK2_TMR0	equ 101
BANK2_PCL	equ 102
BANK2_STATUS	equ 103			; DATA XREF: ISR+1C6w ISR+23Ew ...
 C		equ 0
 DC		equ 1
 Z		equ 2
 PD		equ 3
 TO		equ 4
 RP0		equ 5
 RP1		equ 6
 IRP		equ 7

BANK2_FSR	equ 104			; DATA XREF: RESET_0+26Cw RESET_0+273w
BANK2_RESERVED0105 equ 105
BANK2_PORTB	equ 106
 RB0		equ 0
 RB1		equ 1
 RB2		equ 2
 RB3		equ 3
 RB4		equ 4
 RB5		equ 5
 RB6		equ 6
 RB7		equ 7

BANK2_RESERVED0107 equ 107
BANK2_RESERVED0108 equ 108
BANK2_RESERVED0109 equ 109
BANK2_PCLATH	equ 10A
BANK2_INTCON	equ 10B			; DATA XREF: RESET_0+477w
					; RESET_0:loc_CODE_AF2w ...
 RBIF		equ 0
 INTF		equ 1
 TMR0IF		equ 2
 RBIE		equ 3
 INTE		equ 4
 TMR0IE		equ 5
 PEIE		equ 6
 GIE		equ 7

BANK2_EEDATA	equ 10C			; DATA XREF: ISR+242r EEPROM_Read+Br ...
BANK2_EEADR	equ 10D			; DATA XREF: ISR+23Dw EEPROM_Read+6w ...
BANK2_EEDATH	equ 10E
BANK2_EEADRH	equ 10F
byte_DATA_110	equ 110			; DATA XREF: RESET_0+B63w RESET_0+B68w ...
byte_DATA_111	equ 111			; DATA XREF: RESET_0+B62w RESET_0+B6Fw ...
byte_DATA_112	equ 112			; DATA XREF: RESET_0+99w RESET_0+B69w	...
byte_DATA_113	equ 113			; DATA XREF: RESET_0+BB8w RESET_0+BBDw ...
byte_DATA_114	equ 114			; DATA XREF: RESET_0+BB7w RESET_0+BC4w ...
byte_DATA_115	equ 115			; DATA XREF: RESET_0+9Bw RESET_0+BBEw	...
byte_DATA_116	equ 116			; DATA XREF: RESET_0+AADw RESET_0+AB6r ...
byte_DATA_117	equ 117			; DATA XREF: RESET_0+A83w RESET_0+A8Cr ...

byte_DATA_125	equ 125			; DATA XREF: RESET_0+278w RESET_0+652w ...
byte_DATA_126	equ 126			; DATA XREF: RESET_0+5BCw RESET_0+5BDr ...
i2c_timeout_counter_lsb	equ 127		; DATA XREF: ISR+1C5w ISR+608r ...
i2c_timeout_counter_msb	equ 128		; DATA XREF: ISR+1C3w
					; ISR:loc_CODE_611r ...
byte_DATA_129	equ 129			; DATA XREF: RESET_0+5E5w RESET_0+5E6r ...
byte_DATA_12D	equ 12D			; DATA XREF: RESET_0+2BBw RESET_0+C2Br
byte_DATA_12E	equ 12E			; DATA XREF: RESET_0+2BDw
					; RESET_0:loc_CODE_126Br
byte_DATA_12F	equ 12F			; DATA XREF: RESET_0+2BFw RESET_0+C2Fr
byte_DATA_130	equ 130			; DATA XREF: RESET_0+2C1w RESET_0+C40r
byte_DATA_131	equ 131			; DATA XREF: RESET_0+2C3w
					; RESET_0:loc_CODE_1280r
byte_DATA_132	equ 132			; DATA XREF: RESET_0+2C5w RESET_0+C44r
byte_DATA_133	equ 133			; DATA XREF: RESET_0+2C7w RESET_0+C55r
byte_DATA_134	equ 134			; DATA XREF: RESET_0+2C9w
					; RESET_0:loc_CODE_1295r
byte_DATA_135	equ 135			; DATA XREF: RESET_0+2CBw RESET_0+C59r
byte_DATA_136	equ 136			; DATA XREF: RESET_0+2D3w RESET_0+C24r
byte_DATA_137	equ 137			; DATA XREF: RESET_0+2D5w RESET_0+C1Er
byte_DATA_138	equ 138			; DATA XREF: RESET_0+2D7w RESET_0+C39r
byte_DATA_139	equ 139			; DATA XREF: RESET_0+2D9w RESET_0+C33r
byte_DATA_13A	equ 13A			; DATA XREF: RESET_0+2DFw RESET_0+C88r
byte_DATA_13B	equ 13B			; DATA XREF: RESET_0+2E1w
					; RESET_0:loc_CODE_12C8r
byte_DATA_13C	equ 13C			; DATA XREF: RESET_0+2E3w RESET_0+C8Cr
byte_DATA_13D	equ 13D			; DATA XREF: RESET_0+2E5w RESET_0+C9Dr
byte_DATA_13E	equ 13E			; DATA XREF: RESET_0+2E7w
					; RESET_0:loc_CODE_12DDr
byte_DATA_13F	equ 13F			; DATA XREF: RESET_0+2E9w RESET_0+CA1r
byte_DATA_140	equ 140			; DATA XREF: RESET_0+2EBw RESET_0+CA8r
byte_DATA_141	equ 141			; DATA XREF: RESET_0+2EDw
					; RESET_0:loc_CODE_12E8r
byte_DATA_142	equ 142			; DATA XREF: RESET_0+2EFw RESET_0+CACr
byte_DATA_143	equ 143			; DATA XREF: RESET_0+2F1w RESET_0+C81r
byte_DATA_144	equ 144			; DATA XREF: RESET_0+2F3w RESET_0+C7Br
byte_DATA_145	equ 145			; DATA XREF: RESET_0+2F5w RESET_0+C96r
byte_DATA_146	equ 146			; DATA XREF: RESET_0+2F7w RESET_0+C90r
byte_DATA_147	equ 147			; DATA XREF: RESET_0+2CDw RESET_0+C60r
byte_DATA_148	equ 148			; DATA XREF: RESET_0+2CFw
					; RESET_0:loc_CODE_12A0r
byte_DATA_149	equ 149			; DATA XREF: RESET_0+2D1w RESET_0+C64r
byte_DATA_14A	equ 14A			; DATA XREF: RESET_0+2DBw RESET_0+C4Er
byte_DATA_14B	equ 14B			; DATA XREF: RESET_0+2DDw RESET_0+C48r
byte_DATA_14C	equ 14C			; DATA XREF: RESET_0+BE3w RESET_0+BEEw ...
byte_DATA_14E	equ 14E			; DATA XREF: RESET_0+26Ew
					; RESET_0:loc_CODE_8B3r ...

byte_DATA_150	equ 150			; DATA XREF: RESET_0+D7Ar
byte_DATA_151	equ 151			; DATA XREF: RESET_0+D76r
byte_DATA_152	equ 152			; DATA XREF: RESET_0+D82r
byte_DATA_153	equ 153			; DATA XREF: RESET_0+D7Er
byte_DATA_154	equ 154			; DATA XREF: RESET_0+BE9r
byte_DATA_155	equ 155			; DATA XREF: RESET_0:loc_CODE_1229r
byte_DATA_156	equ 156			; DATA XREF: RESET_0+BEDr
byte_DATA_157	equ 157			; DATA XREF: RESET_0+BDEr
byte_DATA_158	equ 158			; DATA XREF: RESET_0+BDAr
byte_DATA_159	equ 159			; DATA XREF: RESET_0+BE2r
byte_DATA_15A	equ 15A			; DATA XREF: RESET_0+E37r
byte_DATA_15B	equ 15B			; DATA XREF: RESET_0+E33r
byte_DATA_15C	equ 15C			; DATA XREF: RESET_0+CE7r
ADCChannel0LSB	equ 15D			; DATA XREF: ISR+3D1w RESET_0+475r
byte_DATA_15E	equ 15E			; DATA XREF: RESET_0+D4Dw
fan_speed_adj_timer_lsb	equ 15F		; DATA XREF: RESET_0+214w RESET_0+215r ...
fan_speed_adj_timer_msb	equ 160		; DATA XREF: RESET_0+218w RESET_0+219r ...
byte_DATA_161	equ 161			; DATA XREF: RESET_0+D65w RESET_0+D6Cr
byte_DATA_162	equ 162			; DATA XREF: RESET_0+D63w RESET_0+D70r

byte_DATA_164	equ 164			; DATA XREF: RESET_0+D42w RESET_0+D4Br ...
byte_DATA_165	equ 165			; DATA XREF: RESET_0+D43w RESET_0+D46w ...
byte_DATA_166	equ 166			; DATA XREF: RESET_0+D47w RESET_0+D48r ...
byte_DATA_167	equ 167			; DATA XREF: RESET_0+48Bw RESET_0+494r ...
byte_DATA_168	equ 168			; DATA XREF: RESET_0+48Cw RESET_0+48Fw ...
byte_DATA_169	equ 169			; DATA XREF: RESET_0+490w RESET_0+491r ...
ADCChannel1MSB	equ 16A			; DATA XREF: CODE:0416w RESET_0+D2Ar
ADCChannel1LSB	equ 16B			; DATA XREF: CODE:041Cw RESET_0+D2Cr
downcount2_from_10000_lsb equ 16C	; DATA XREF: ISR+43Ew ISR+577r ...
downcount2_from_10000_msb equ 16D	; DATA XREF: ISR+440w
					; ISR:loc_CODE_580r ...
count_up_to_5_then_turn_psu_on equ 16E	; DATA XREF: ISR+3D6w ISR+3D7r ...
byte_DATA_16F	equ 16F			; DATA XREF: RESET_0+9D5w RESET_0+9D9w ...
byte_DATA_171	equ 171			; DATA XREF: RESET_0+BD7r RESET_0+C1Ar ...

byte_DATA_17A	equ 17A			; DATA XREF: RESET_0+479w RESET_0+47Cw ...
byte_DATA_17B	equ 17B			; DATA XREF: RESET_0+476w RESET_0+47Aw ...

BANK3_INDF	equ 180			; DATA XREF: RESET_0+707r
BANK3_OPTION	equ 181
 PS0		equ 0
 PS1		equ 1
 PS2		equ 2
 PSA		equ 3
 T0SE		equ 4
 T0CS		equ 5
 INTEDG		equ 6
 RBPU		equ 7

BANK3_PCL	equ 182			; DATA XREF: CODE:LookupSomethingElsew
BANK3_STATUS	equ 183			; DATA XREF: ISR+241w CODE:0418w ...
 C		equ 0
 DC		equ 1
 Z		equ 2
 PD		equ 3
 TO		equ 4
 RP0		equ 5
 RP1		equ 6
 IRP		equ 7

BANK3_FSR	equ 184			; DATA XREF: RESET_0+706w
BANK3_RESERVED0185 equ 185
BANK3_TRISB	equ 186
 TRISB0		equ 0
 TRISB1		equ 1
 TRISB2		equ 2
 TRISB3		equ 3
 TRISB4		equ 4
 TRISB5		equ 5
 TRISB6		equ 6
 TRISB7		equ 7

BANK3_RESERVED0187 equ 187
BANK3_RESERVED0188 equ 188		; DATA XREF: RESET_0+5Dw
BANK3_RESERVED0189 equ 189		; DATA XREF: RESET_0+5Bw
BANK3_PCLATH	equ 18A			; DATA XREF: RESET_0:loc_CODE_78Aw
					; RESET_0+23Aw	...
BANK3_INTCON	equ 18B			; DATA XREF: RESET_0+Cw RESET_0+245w ...
 RBIF		equ 0
 INTF		equ 1
 TMR0IF		equ 2
 RBIE		equ 3
 INTE		equ 4
 TMR0IE		equ 5
 PEIE		equ 6
 GIE		equ 7

BANK3_EECON1	equ 18C			; DATA XREF: ISR+23Fw ISR+240w ...
 RD		equ 0
 WR		equ 1
 WREN		equ 2
 WRERR		equ 3
 EEPGD		equ 7

BANK3_EECON2	equ 18D			; DATA XREF: EEPROM_Write+10w
					; EEPROM_Write+12w
BANK3_RESERVED018E equ 18E
BANK3_RESERVED018F equ 18F
byte_DATA_190	equ 190			; DATA XREF: RESET_0+9w RESET_0+B3w ...
byte_DATA_191	equ 191			; DATA XREF: RESET_0+Aw RESET_0+1C4r ...
byte_DATA_192	equ 192			; DATA XREF: RESET_0+555r
					; RESET_0+133Fw ...
some_temp_threshold equ	193		; DATA XREF: RESET_0+55Cr
					; RESET_0+1342w

input_voltage_volts equ	198		; DATA XREF: RESET_0+BAEw
					; RESET_0+12AEr
byte_DATA_199	equ 199			; DATA XREF: RESET_0+1354w
					; RESET_0+1369r
byte_DATA_19A	equ 19A			; DATA XREF: RESET_0+1356w
					; RESET_0+1370r
byte_DATA_19B	equ 19B			; DATA XREF: RESET_0+138Ew
					; RESET_0+1394r
byte_DATA_19C	equ 19C			; DATA XREF: RESET_0+1390w
					; RESET_0+139Br
byte_DATA_19D	equ 19D			; DATA XREF: RESET_0+1365w
					; RESET_0+1368r ...
downcount_from_2492_lsb	equ 19E		; DATA XREF: ISR+5A6r ISR+5A9w ...
downcount_from_2492_msb	equ 19F		; DATA XREF: ISR:loc_CODE_5AFr
					; ISR+5B1w ...
EEPROM_Write_Addr equ 1A0		; DATA XREF: RESET_0+300w RESET_0+3C1w ...
EEPROM_Write_Data equ 1A1		; DATA XREF: RESET_0+304w RESET_0+3BFw ...
eeprom_log_addr_base equ 1A2		; DATA XREF: RESET_0+249w RESET_0+66Cw ...
eeprom_log_addr_counter	equ 1A3		; DATA XREF: RESET_0+243w RESET_0+705r ...
downcounter_from4987_lsb equ 1A4	; DATA XREF: ISR+5D8r ISR+5DBw ...
downcounter_from4987_byte1 equ 1A5	; DATA XREF: ISR:loc_CODE_5E1r
					; ISR+5E3w ...
seconds_uptime_wraps_at_60 equ 1A6	; DATA XREF: ISR+5E4w ISR+5E5r ...
hours_uptime_counter equ 1A7		; DATA XREF: ISR+5F7w ISR+5F8r ...
minutes_uptime_counter equ 1A8		; DATA XREF: ISR+5F1w ISR+5F2r ...

logging_trigger_flags equ 1AA		; DATA XREF: ISR+5FDw RESET_0+244w ...
					; bit1 is set once every 24hrs
byte_DATA_1AB	equ 1AB			; DATA XREF: RESET_0+128w RESET_0+13Aw ...
byte_DATA_1AC	equ 1AC			; DATA XREF: RESET_0+123w RESET_0+124r ...
byte_DATA_1AD	equ 1AD			; DATA XREF: RESET_0+E82w RESET_0+E8Fw
another_temperature_threshold equ 1AE	; DATA XREF: RESET_0+53Dr
					; RESET_0+132Ew ...

count_up_to_60	equ 1B0			; DATA XREF: RESET_0+A1Fw RESET_0+A23w ...
byte_DATA_1B1	equ 1B1			; DATA XREF: RESET_0+12AFr
					; RESET_0+12B3w ...
math32_arg_byte2 equ 1B2		; DATA XREF: RESET_0+ACDw RESET_0+AF2w ...
math32_arg_byte1 equ 1B3		; DATA XREF: RESET_0+AD3w RESET_0+AF8w ...
math32_arg_byte0 equ 1B4		; DATA XREF: RESET_0+AD9w RESET_0+AFEw ...
math32_arg_byte3 equ 1B5		; DATA XREF: RESET_0+ADFw RESET_0+B04w ...
math32_arg2_LSB	equ 1B7			; DATA XREF: RESET_0+AE0w RESET_0+B05w ...
math32_arg2_MSB	equ 1B8			; DATA XREF: RESET_0+AE6w RESET_0+B0Bw ...
byte_DATA_1B9	equ 1B9			; DATA XREF: RESET_0+B44w
					; math32_something+6r ...
math32_dev_byte2 equ 1BA		; DATA XREF: math_32bit_probably_divide+2w
					; math_32bit_probably_divide+Ew ...
math32_dev_byte1 equ 1BB		; DATA XREF: math_32bit_probably_dividew
					; math_32bit_probably_divide+Aw ...
math32_dev_byte0 equ 1BC		; DATA XREF: math_32bit_probably_divide+1w
					; math_32bit_probably_divide+4w ...
byte_DATA_1BD	equ 1BD			; DATA XREF: math32_something+2w
					; math32_something+5w ...
loop_count	equ 1BE			; DATA XREF: math_32bit_probably_divide+11w
					; math_32bit_probably_divide+2Dw ...
byte_DATA_1BF	equ 1BF			; DATA XREF: RESET_0+B29w RESET_0+B39r
byte_DATA_1C0	equ 1C0			; DATA XREF: RESET_0+B2Cw RESET_0+B3Br
byte_DATA_1C1	equ 1C1			; DATA XREF: RESET_0+B2Fw RESET_0+B3Dr
byte_DATA_1C2	equ 1C2			; DATA XREF: RESET_0+B24w RESET_0+B2Aw ...
byte_DATA_1C3	equ 1C3			; DATA XREF: RESET_0+B25w RESET_0+B2Dw ...
byte_DATA_1C4	equ 1C4			; DATA XREF: RESET_0+B26w RESET_0+B30w ...
byte_DATA_1C5	equ 1C5			; DATA XREF: RESET_0+B36w RESET_0+B54w
math32_tempLSB	equ 1C6			; DATA XREF: Multiply16x16Eq32+3w
					; Multiply16x16Eq32+1Fr ...
math32_tempMSB	equ 1C7			; DATA XREF: Multiply16x16Eq32+5w
					; Multiply16x16Eq32+1Dr ...
some_temperature_threshold equ 1C8	; DATA XREF: RESET_0+544r
					; RESET_0+1331w
input_current_msb equ 1C9		; DATA XREF: RESET_0+D08w RESET_0+EC1r ...
input_current_lsb equ 1CA		; DATA XREF: RESET_0+D0Aw RESET_0+EBFr ...

byte_DATA_1D0	equ 1D0			; DATA XREF: RESET_0+281w RESET_0+DB9r
byte_DATA_1D1	equ 1D1			; DATA XREF: RESET_0+283w
					; RESET_0:loc_CODE_13FBr
byte_DATA_1D2	equ 1D2			; DATA XREF: RESET_0+285w RESET_0+DBDr
byte_DATA_1D3	equ 1D3			; DATA XREF: RESET_0+287w RESET_0+DBBr
byte_DATA_1D4	equ 1D4			; DATA XREF: RESET_0+289w RESET_0+DCCr
byte_DATA_1D5	equ 1D5			; DATA XREF: RESET_0+28Bw
					; RESET_0:loc_CODE_140Er
byte_DATA_1D6	equ 1D6			; DATA XREF: RESET_0+28Dw RESET_0+DD0r
byte_DATA_1D7	equ 1D7			; DATA XREF: RESET_0+28Fw RESET_0+DCEr
byte_DATA_1D8	equ 1D8			; DATA XREF: RESET_0+291w RESET_0+DDFr
byte_DATA_1D9	equ 1D9			; DATA XREF: RESET_0+293w
					; RESET_0:loc_CODE_1421r
byte_DATA_1DA	equ 1DA			; DATA XREF: RESET_0+295w RESET_0+DE3r
byte_DATA_1DB	equ 1DB			; DATA XREF: RESET_0+297w RESET_0+DE1r
byte_DATA_1DC	equ 1DC			; DATA XREF: RESET_0+299w RESET_0+DF2r
byte_DATA_1DD	equ 1DD			; DATA XREF: RESET_0+29Bw
					; RESET_0:loc_CODE_1434r
byte_DATA_1DE	equ 1DE			; DATA XREF: RESET_0+29Dw RESET_0+DF6r
byte_DATA_1DF	equ 1DF			; DATA XREF: RESET_0+29Fw RESET_0+DF4r
byte_DATA_1E0	equ 1E0			; DATA XREF: RESET_0+2A1w RESET_0+DFBr
byte_DATA_1E1	equ 1E1			; DATA XREF: RESET_0+2A3w
					; RESET_0:loc_CODE_143Dr
byte_DATA_1E2	equ 1E2			; DATA XREF: RESET_0+2A5w RESET_0+DFFr
byte_DATA_1E3	equ 1E3			; DATA XREF: RESET_0+2A7w RESET_0+DFDr
byte_DATA_1E4	equ 1E4			; DATA XREF: RESET_0+2A9w RESET_0+DB4r
byte_DATA_1E5	equ 1E5			; DATA XREF: RESET_0+2ABw RESET_0+DAEr
byte_DATA_1E6	equ 1E6			; DATA XREF: RESET_0+2ADw RESET_0+DC7r ...
byte_DATA_1E7	equ 1E7			; DATA XREF: RESET_0+2AFw RESET_0+DC1r ...
byte_DATA_1E8	equ 1E8			; DATA XREF: RESET_0+2B1w RESET_0+DDAr
byte_DATA_1E9	equ 1E9			; DATA XREF: RESET_0+2B3w RESET_0+DD4r
byte_DATA_1EA	equ 1EA			; DATA XREF: RESET_0+2B5w RESET_0+DEDr
byte_DATA_1EB	equ 1EB			; DATA XREF: RESET_0+2B7w RESET_0+DE7r
byte_DATA_1EC	equ 1EC			; DATA XREF: RESET_0+D84w RESET_0+D90r ...
byte_DATA_1ED	equ 1ED			; DATA XREF: RESET_0+D80w RESET_0+D8Ar ...

byte_DATA_1FA	equ 1FA			; DATA XREF: RESET_0+B86w RESET_0+BF0r ...
byte_DATA_1FB	equ 1FB			; DATA XREF: RESET_0+B88w RESET_0+BF2r ...

		end ;
